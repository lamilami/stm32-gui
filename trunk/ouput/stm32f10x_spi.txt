; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\stm32f10x_spi.o --depend=.\ouput\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\stm32f10x_spi.crf Source\FWLib\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;449      */
;;;450    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;451    {
;;;452      /* Check the parameters */
;;;453      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;454      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;455      if (NewState != DISABLE)
;;;456      {
;;;457        /* Enable the selected SPI peripheral (in I2S mode) */
;;;458        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
;;;459      }
;;;460      else
;;;461      {
;;;462        /* Disable the selected SPI peripheral (in I2S mode) */
;;;463        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
000002  8b81              LDRH     r1,[r0,#0x1c]
000004  d002              BEQ      |L1.12|
000006  f4416180          ORR      r1,r1,#0x400          ;458
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L1.16|
000010  8381              STRH     r1,[r0,#0x1c]         ;458
;;;464      }
;;;465    }
000012  4770              BX       lr
;;;466    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=1

                  I2S_Init PROC
;;;217      */
;;;218    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;219    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;220      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000006  2002              MOVS     r0,#2
000008  2100              MOVS     r1,#0
;;;221      uint32_t tmp = 0;
;;;222      RCC_ClocksTypeDef RCC_Clocks;
;;;223      uint32_t sourceclock = 0;
;;;224      
;;;225      /* Check the I2S parameters */
;;;226      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;227      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;228      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;229      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;230      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;231      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;232      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;233    
;;;234    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;235      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;236      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00000a  8baa              LDRH     r2,[r5,#0x1c]
00000c  b085              SUB      sp,sp,#0x14           ;219
00000e  2601              MOVS     r6,#1                 ;220
000010  f24f0340          MOV      r3,#0xf040
000014  401a              ANDS     r2,r2,r3
000016  83aa              STRH     r2,[r5,#0x1c]
;;;237      SPIx->I2SPR = 0x0002;
000018  8428              STRH     r0,[r5,#0x20]
;;;238      
;;;239      /* Get the I2SCFGR register value */
;;;240      tmpreg = SPIx->I2SCFGR;
00001a  8baf              LDRH     r7,[r5,#0x1c]
;;;241      
;;;242      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;243      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00001c  68a2              LDR      r2,[r4,#8]
00001e  2a02              CMP      r2,#2
000020  d01e              BEQ      |L2.96|
;;;244      {
;;;245        i2sodd = (uint16_t)0;
;;;246        i2sdiv = (uint16_t)2;   
;;;247      }
;;;248      /* If the requested audio frequency is not the default, compute the prescaler */
;;;249      else
;;;250      {
;;;251        /* Check the frame length (For the Prescaler computing) */
;;;252        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000022  88a0              LDRH     r0,[r4,#4]
000024  b100              CBZ      r0,|L2.40|
;;;253        {
;;;254          /* Packet length is 16 bits */
;;;255          packetlength = 1;
;;;256        }
;;;257        else
;;;258        {
;;;259          /* Packet length is 32 bits */
;;;260          packetlength = 2;
000026  2602              MOVS     r6,#2
                  |L2.40|
;;;261        }
;;;262    
;;;263        /* Get the I2S clock source mask depending on the peripheral number */
;;;264        if(((uint32_t)SPIx) == SPI2_BASE)
;;;265        {
;;;266          /* The mask is relative to I2S2 */
;;;267          tmp = I2S2_CLOCK_SRC;
;;;268        }
;;;269        else 
;;;270        {
;;;271          /* The mask is relative to I2S3 */      
;;;272          tmp = I2S3_CLOCK_SRC;
;;;273        }
;;;274    
;;;275        /* Check the I2S clock source configuration depending on the Device:
;;;276           Only Connectivity line devices have the PLL3 VCO clock */
;;;277    #ifdef STM32F10X_CL
;;;278        if((RCC->CFGR2 & tmp) != 0)
;;;279        {
;;;280          /* Get the configuration bits of RCC PLL3 multiplier */
;;;281          tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
;;;282    
;;;283          /* Get the value of the PLL3 multiplier */      
;;;284          if((tmp > 5) && (tmp < 15))
;;;285          {
;;;286            /* Multplier is between 8 and 14 (value 15 is forbidden) */
;;;287            tmp += 2;
;;;288          }
;;;289          else
;;;290          {
;;;291            if (tmp == 15)
;;;292            {
;;;293              /* Multiplier is 20 */
;;;294              tmp = 20;
;;;295            }
;;;296          }      
;;;297          /* Get the PREDIV2 value */
;;;298          sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
;;;299          
;;;300          /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
;;;301          sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
;;;302        }
;;;303        else
;;;304        {
;;;305          /* I2S Clock source is System clock: Get System Clock frequency */
;;;306          RCC_GetClocksFreq(&RCC_Clocks);      
;;;307          
;;;308          /* Get the source clock value: based on System Clock value */
;;;309          sourceclock = RCC_Clocks.SYSCLK_Frequency;
;;;310        }        
;;;311    #else /* STM32F10X_HD */
;;;312        /* I2S Clock source is System clock: Get System Clock frequency */
;;;313        RCC_GetClocksFreq(&RCC_Clocks);      
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       RCC_GetClocksFreq
;;;314          
;;;315        /* Get the source clock value: based on System Clock value */
;;;316        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
;;;317    #endif /* STM32F10X_CL */    
;;;318    
;;;319        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;320        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00002e  88e1              LDRH     r1,[r4,#6]
000030  9800              LDR      r0,[sp,#0]
000032  f5b17f00          CMP      r1,#0x200
000036  d029              BEQ      |L2.140|
;;;321        {
;;;322          /* MCLK output is enabled */
;;;323          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;324        }
;;;325        else
;;;326        {
;;;327          /* MCLK output is disabled */
;;;328          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000038  0171              LSLS     r1,r6,#5
00003a  fbb0f0f1          UDIV     r0,r0,r1
                  |L2.62|
00003e  eb000080          ADD      r0,r0,r0,LSL #2
000042  68a1              LDR      r1,[r4,#8]
000044  0040              LSLS     r0,r0,#1
000046  fbb0f0f1          UDIV     r0,r0,r1
00004a  1d40              ADDS     r0,r0,#5
00004c  b280              UXTH     r0,r0
;;;329        }
;;;330        
;;;331        /* Remove the flaoting point */
;;;332        tmp = tmp / 10;  
00004e  210a              MOVS     r1,#0xa
000050  fbb0f0f1          UDIV     r0,r0,r1
;;;333          
;;;334        /* Check the parity of the divider */
;;;335        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000054  f0000101          AND      r1,r0,#1
;;;336       
;;;337        /* Compute the i2sdiv prescaler */
;;;338        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
000058  1a40              SUBS     r0,r0,r1
00005a  f3c0004f          UBFX     r0,r0,#1,#16
;;;339       
;;;340        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;341        i2sodd = (uint16_t) (i2sodd << 8);
00005e  0209              LSLS     r1,r1,#8
                  |L2.96|
;;;342      }
;;;343      
;;;344      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;345      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000060  1e82              SUBS     r2,r0,#2
000062  2afe              CMP      r2,#0xfe
000064  d301              BCC      |L2.106|
;;;346      {
;;;347        /* Set the default values */
;;;348        i2sdiv = 2;
000066  2002              MOVS     r0,#2
;;;349        i2sodd = 0;
000068  2100              MOVS     r1,#0
                  |L2.106|
;;;350      }
;;;351    
;;;352      /* Write to SPIx I2SPR register the computed value */
;;;353      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
00006a  88e2              LDRH     r2,[r4,#6]
00006c  4308              ORRS     r0,r0,r1
00006e  4302              ORRS     r2,r2,r0
000070  842a              STRH     r2,[r5,#0x20]
;;;354     
;;;355      /* Configure the I2S with the SPI_InitStruct values */
;;;356      tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
000072  8820              LDRH     r0,[r4,#0]
000074  8861              LDRH     r1,[r4,#2]
000076  89a2              LDRH     r2,[r4,#0xc]
000078  4308              ORRS     r0,r0,r1
00007a  88a1              LDRH     r1,[r4,#4]
00007c  4311              ORRS     r1,r1,r2
00007e  4308              ORRS     r0,r0,r1
000080  4338              ORRS     r0,r0,r7
000082  f4406000          ORR      r0,r0,#0x800
;;;357                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;358                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;359     
;;;360      /* Write to SPIx I2SCFGR */  
;;;361      SPIx->I2SCFGR = tmpreg;   
000086  83a8              STRH     r0,[r5,#0x1c]
;;;362    }
000088  b005              ADD      sp,sp,#0x14
00008a  bdf0              POP      {r4-r7,pc}
                  |L2.140|
00008c  0a00              LSRS     r0,r0,#8              ;323
00008e  e7d6              B        |L2.62|
;;;363    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;396      */
;;;397    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;398    {
;;;399    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;400      /* Initialize the I2S_Mode member */
;;;401      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;402      
;;;403      /* Initialize the I2S_Standard member */
;;;404      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;405      
;;;406      /* Initialize the I2S_DataFormat member */
;;;407      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;408      
;;;409      /* Initialize the I2S_MCLKOutput member */
;;;410      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;411      
;;;412      /* Initialize the I2S_AudioFreq member */
;;;413      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2202              MOVS     r2,#2
;;;414      
;;;415      /* Initialize the I2S_CPOL member */
;;;416      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000c  6082              STR      r2,[r0,#8]
00000e  8181              STRH     r1,[r0,#0xc]
;;;417    }
000010  4770              BX       lr
;;;418    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;730      */
;;;731    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;732    {
;;;733      /* Check the parameters */
;;;734      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;735      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;736      if (SPI_Direction == SPI_Direction_Tx)
;;;737      {
;;;738        /* Set the Tx only mode */
;;;739        SPIx->CR1 |= SPI_Direction_Tx;
;;;740      }
;;;741      else
;;;742      {
;;;743        /* Set the Rx only mode */
;;;744        SPIx->CR1 &= SPI_Direction_Rx;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L4.16|
000008  f4214180          BIC      r1,r1,#0x4000
                  |L4.12|
00000c  8001              STRH     r1,[r0,#0]            ;739
;;;745      }
;;;746    }
00000e  4770              BX       lr
                  |L4.16|
000010  f4414180          ORR      r1,r1,#0x4000         ;739
000014  e7fa              B        |L4.12|
;;;747    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;661      */
;;;662    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;663    {
;;;664      /* Check the parameters */
;;;665      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;666      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;667      if (NewState != DISABLE)
;;;668      {
;;;669        /* Enable the selected SPI CRC calculation */
;;;670        SPIx->CR1 |= CR1_CRCEN_Set;
;;;671      }
;;;672      else
;;;673      {
;;;674        /* Disable the selected SPI CRC calculation */
;;;675        SPIx->CR1 &= CR1_CRCEN_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L5.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;670
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L5.16|
000010  8001              STRH     r1,[r0,#0]            ;670
;;;676      }
;;;677    }
000012  4770              BX       lr
;;;678    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;425      */
;;;426    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;427    {
;;;428      /* Check the parameters */
;;;429      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;430      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;431      if (NewState != DISABLE)
;;;432      {
;;;433        /* Enable the selected SPI peripheral */
;;;434        SPIx->CR1 |= CR1_SPE_Set;
;;;435      }
;;;436      else
;;;437      {
;;;438        /* Disable the selected SPI peripheral */
;;;439        SPIx->CR1 &= CR1_SPE_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f0410140          ORR      r1,r1,#0x40           ;434
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f0210140          BIC      r1,r1,#0x40
                  |L6.16|
000010  8001              STRH     r1,[r0,#0]            ;434
;;;440      }
;;;441    }
000012  4770              BX       lr
;;;442    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;629      */
;;;630    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;631    {
;;;632      /* Check the parameters */
;;;633      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;634      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;635      /* Clear DFF bit */
;;;636      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f4226200          BIC      r2,r2,#0x800
000006  8002              STRH     r2,[r0,#0]
;;;637      /* Set new DFF bit value */
;;;638      SPIx->CR1 |= SPI_DataSize;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;639    }
00000e  4770              BX       lr
;;;640    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;687      */
;;;688    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  2901              CMP      r1,#1
;;;689    {
;;;690      uint16_t crcreg = 0;
;;;691      /* Check the parameters */
;;;692      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;693      assert_param(IS_SPI_CRC(SPI_CRC));
;;;694      if (SPI_CRC != SPI_CRC_Rx)
000002  d001              BEQ      |L8.8|
;;;695      {
;;;696        /* Get the Tx CRC register */
;;;697        crcreg = SPIx->TXCRCR;
000004  8b00              LDRH     r0,[r0,#0x18]
;;;698      }
;;;699      else
;;;700      {
;;;701        /* Get the Rx CRC register */
;;;702        crcreg = SPIx->RXCRCR;
;;;703      }
;;;704      /* Return the selected CRC register */
;;;705      return crcreg;
;;;706    }
000006  4770              BX       lr
                  |L8.8|
000008  8a80              LDRH     r0,[r0,#0x14]         ;702
00000a  4770              BX       lr
;;;707    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;712      */
;;;713    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;714    {
;;;715      /* Check the parameters */
;;;716      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;717      
;;;718      /* Return the CRC polynomial register */
;;;719      return SPIx->CRCPR;
;;;720    }
000002  4770              BX       lr
;;;721    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;802      */
;;;803    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43c9              MVNS     r1,r1
;;;804    {
;;;805      /* Check the parameters */
;;;806      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;807      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;808        
;;;809        /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;810        SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8101              STRH     r1,[r0,#8]
;;;811    }
000004  4770              BX       lr
;;;812    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;881      */
;;;882    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  f001020f          AND      r2,r1,#0xf
;;;883    {
;;;884      uint16_t itpos = 0;
;;;885      /* Check the parameters */
;;;886      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;887      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;888    
;;;889      /* Get the SPI IT index */
;;;890      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;891    
;;;892      /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;893      SPIx->SR = (uint16_t)~itpos;
000008  43c9              MVNS     r1,r1
00000a  8101              STRH     r1,[r0,#8]
;;;894    }
00000c  4770              BX       lr
;;;895    /**
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;519      */
;;;520    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;521    {
;;;522      /* Check the parameters */
;;;523      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;524      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;525      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;526      if (NewState != DISABLE)
;;;527      {
;;;528        /* Enable the selected SPI/I2S DMA requests */
;;;529        SPIx->CR2 |= SPI_I2S_DMAReq;
;;;530      }
;;;531      else
;;;532      {
;;;533        /* Disable the selected SPI/I2S DMA requests */
;;;534        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000002  8882              LDRH     r2,[r0,#4]
000004  d001              BEQ      |L12.10|
000006  430a              ORRS     r2,r2,r1              ;529
000008  e000              B        |L12.12|
                  |L12.10|
00000a  438a              BICS     r2,r2,r1
                  |L12.12|
00000c  8082              STRH     r2,[r0,#4]            ;529
;;;535      }
;;;536    }
00000e  4770              BX       lr
;;;537    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;117      */
;;;118    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  4911              LDR      r1,|L13.72|
;;;119    {
000002  b510              PUSH     {r4,lr}
;;;120      /* Check the parameters */
;;;121      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;122    
;;;123      if (SPIx == SPI1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L13.30|
;;;124      {
;;;125        /* Enable SPI1 reset state */
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000008  1484              ASRS     r4,r0,#18
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;127        /* Release SPI1 from reset state */
;;;128        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L13.30|
;;;129      }
;;;130      else if (SPIx == SPI2)
00001e  490b              LDR      r1,|L13.76|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L13.42|
;;;131      {
;;;132        /* Enable SPI2 reset state */
;;;133        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000024  2101              MOVS     r1,#1
000026  1404              ASRS     r4,r0,#16
;;;134        /* Release SPI2 from reset state */
;;;135        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000028  e004              B        |L13.52|
                  |L13.42|
;;;136      }
;;;137      else
;;;138      {
;;;139        if (SPIx == SPI3)
00002a  4909              LDR      r1,|L13.80|
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L13.70|
;;;140        {
;;;141          /* Enable SPI3 reset state */
;;;142          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000030  2101              MOVS     r1,#1
000032  13c4              ASRS     r4,r0,#15
                  |L13.52|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;143          /* Release SPI3 from reset state */
;;;144          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00003a  4620              MOV      r0,r4
00003c  e8bd4010          POP      {r4,lr}
000040  2100              MOVS     r1,#0
000042  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L13.70|
;;;145        }
;;;146      }
;;;147    }
000046  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  |L13.72|
                          DCD      0x40013000
                  |L13.76|
                          DCD      0x40003800
                  |L13.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;764      */
;;;765    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;766    {
;;;767      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;768      /* Check the parameters */
;;;769      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;770      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;771      /* Check the status of the specified SPI/I2S flag */
;;;772      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8912              LDRH     r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L14.12|
;;;773      {
;;;774        /* SPI_I2S_FLAG is set */
;;;775        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L14.12|
;;;776      }
;;;777      else
;;;778      {
;;;779        /* SPI_I2S_FLAG is reset */
;;;780        bitstatus = RESET;
;;;781      }
;;;782      /* Return the SPI_I2S_FLAG status */
;;;783      return  bitstatus;
;;;784    }
00000c  4770              BX       lr
;;;785    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;827      */
;;;828    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;829    {
;;;830      ITStatus bitstatus = RESET;
;;;831      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
;;;832    
;;;833      /* Check the parameters */
;;;834      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;835      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;836    
;;;837      /* Get the SPI/I2S IT index */
;;;838      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000002  f001030f          AND      r3,r1,#0xf
000006  2401              MOVS     r4,#1
000008  fa04f303          LSL      r3,r4,r3
00000c  4602              MOV      r2,r0                 ;829
00000e  2000              MOVS     r0,#0                 ;830
;;;839    
;;;840      /* Get the SPI/I2S IT mask */
;;;841      itmask = SPI_I2S_IT >> 4;
000010  0909              LSRS     r1,r1,#4
;;;842    
;;;843      /* Set the IT mask */
;;;844      itmask = 0x01 << itmask;
000012  408c              LSLS     r4,r4,r1
;;;845    
;;;846      /* Get the SPI_I2S_IT enable bit status */
;;;847      enablestatus = (SPIx->CR2 & itmask) ;
000014  8891              LDRH     r1,[r2,#4]
000016  b29b              UXTH     r3,r3                 ;838
000018  b2a4              UXTH     r4,r4                 ;844
;;;848    
;;;849      /* Check the status of the specified SPI/I2S interrupt */
;;;850      if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
00001a  8912              LDRH     r2,[r2,#8]
00001c  4021              ANDS     r1,r1,r4              ;847
00001e  421a              TST      r2,r3
000020  d002              BEQ      |L15.40|
000022  2900              CMP      r1,#0
000024  d000              BEQ      |L15.40|
;;;851      {
;;;852        /* SPI_I2S_IT is set */
;;;853        bitstatus = SET;
000026  2001              MOVS     r0,#1
                  |L15.40|
;;;854      }
;;;855      else
;;;856      {
;;;857        /* SPI_I2S_IT is reset */
;;;858        bitstatus = RESET;
;;;859      }
;;;860      /* Return the SPI_I2S_IT status */
;;;861      return bitstatus;
;;;862    }
000028  bd10              POP      {r4,pc}
;;;863    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;480      */
;;;481    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  0909              LSRS     r1,r1,#4
;;;482    {
;;;483      uint16_t itpos = 0, itmask = 0 ;
;;;484      /* Check the parameters */
;;;485      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;488    
;;;489      /* Get the SPI/I2S IT index */
;;;490      itpos = SPI_I2S_IT >> 4;
;;;491    
;;;492      /* Set the IT mask */
;;;493      itmask = (uint16_t)1 << (uint16_t)itpos;
000002  2301              MOVS     r3,#1
000004  408b              LSLS     r3,r3,r1
;;;494    
;;;495      if (NewState != DISABLE)
000006  2a00              CMP      r2,#0
;;;496      {
;;;497        /* Enable the selected SPI/I2S interrupt */
;;;498        SPIx->CR2 |= itmask;
;;;499      }
;;;500      else
;;;501      {
;;;502        /* Disable the selected SPI/I2S interrupt */
;;;503        SPIx->CR2 &= (uint16_t)~itmask;
000008  8882              LDRH     r2,[r0,#4]
00000a  b299              UXTH     r1,r3                 ;493
00000c  d001              BEQ      |L16.18|
00000e  430a              ORRS     r2,r2,r1              ;498
000010  e000              B        |L16.20|
                  |L16.18|
000012  438a              BICS     r2,r2,r1
                  |L16.20|
000014  8082              STRH     r2,[r0,#4]            ;498
;;;504      }
;;;505    }
000016  4770              BX       lr
;;;506    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;561      */
;;;562    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  8980              LDRH     r0,[r0,#0xc]
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;566      
;;;567      /* Return the data in the DR register */
;;;568      return SPIx->DR;
;;;569    }
000002  4770              BX       lr
;;;570    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;545      */
;;;546    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;547    {
;;;548      /* Check the parameters */
;;;549      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;550      
;;;551      /* Write in the DR register the data to be sent */
;;;552      SPIx->DR = Data;
;;;553    }
000002  4770              BX       lr
;;;554    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;156      */
;;;157    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;158    {
;;;159      uint16_t tmpreg = 0;
;;;160      
;;;161      /* check the parameters */
;;;162      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;163      
;;;164      /* Check the SPI parameters */
;;;165      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;166      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;167      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;168      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;169      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;170      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;171      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;172      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;173      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;174    
;;;175    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;176      /* Get the SPIx CR1 value */
;;;177      tmpreg = SPIx->CR1;
000002  8802              LDRH     r2,[r0,#0]
;;;178      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;179      tmpreg &= CR1_CLEAR_Mask;
;;;180      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;181         master/salve mode, CPOL and CPHA */
;;;182      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;183      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;184      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;185      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;186      /* Set CPOL bit according to SPI_CPOL value */
;;;187      /* Set CPHA bit according to SPI_CPHA value */
;;;188      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000004  884c              LDRH     r4,[r1,#2]
000006  f4025341          AND      r3,r2,#0x3040         ;179
00000a  880a              LDRH     r2,[r1,#0]
00000c  88cd              LDRH     r5,[r1,#6]
00000e  4322              ORRS     r2,r2,r4
000010  888c              LDRH     r4,[r1,#4]
000012  432c              ORRS     r4,r4,r5
000014  4322              ORRS     r2,r2,r4
000016  890c              LDRH     r4,[r1,#8]
000018  4322              ORRS     r2,r2,r4
00001a  894c              LDRH     r4,[r1,#0xa]
00001c  4322              ORRS     r2,r2,r4
00001e  898c              LDRH     r4,[r1,#0xc]
000020  4322              ORRS     r2,r2,r4
000022  89cc              LDRH     r4,[r1,#0xe]
000024  4322              ORRS     r2,r2,r4
000026  431a              ORRS     r2,r2,r3
;;;189                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;190                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;191                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;192      /* Write to SPIx CR1 */
;;;193      SPIx->CR1 = tmpreg;
000028  8002              STRH     r2,[r0,#0]
;;;194      
;;;195      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;196      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002a  8b82              LDRH     r2,[r0,#0x1c]
00002c  f4226200          BIC      r2,r2,#0x800
000030  8382              STRH     r2,[r0,#0x1c]
;;;197    
;;;198    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;199      /* Write to SPIx CRCPOLY */
;;;200      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000032  8a09              LDRH     r1,[r1,#0x10]
000034  8201              STRH     r1,[r0,#0x10]
;;;201    }
000036  bd30              POP      {r4,r5,pc}
;;;202    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;579      */
;;;580    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;581    {
;;;582      /* Check the parameters */
;;;583      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;584      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;585      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
;;;586      {
;;;587        /* Set NSS pin internally by software */
;;;588        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
;;;589      }
;;;590      else
;;;591      {
;;;592        /* Reset NSS pin internally by software */
;;;593        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000004  8801              LDRH     r1,[r0,#0]
000006  3aff              SUBS     r2,r2,#0xff           ;585
000008  d002              BEQ      |L20.16|
00000a  f4417180          ORR      r1,r1,#0x100          ;588
00000e  e001              B        |L20.20|
                  |L20.16|
000010  f4217180          BIC      r1,r1,#0x100
                  |L20.20|
000014  8001              STRH     r1,[r0,#0]            ;588
;;;594      }
;;;595    }
000016  4770              BX       lr
;;;596    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;603      */
;;;604    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;605    {
;;;606      /* Check the parameters */
;;;607      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;608      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;609      if (NewState != DISABLE)
;;;610      {
;;;611        /* Enable the selected SPI SS output */
;;;612        SPIx->CR2 |= CR2_SSOE_Set;
;;;613      }
;;;614      else
;;;615      {
;;;616        /* Disable the selected SPI SS output */
;;;617        SPIx->CR2 &= CR2_SSOE_Reset;
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L21.12|
000006  f0410104          ORR      r1,r1,#4              ;612
00000a  e001              B        |L21.16|
                  |L21.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L21.16|
000010  8081              STRH     r1,[r0,#4]            ;612
;;;618      }
;;;619    }
000012  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;368      */
;;;369    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;370    {
;;;371    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;372      /* Initialize the SPI_Direction member */
;;;373      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;374      /* initialize the SPI_Mode member */
;;;375      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;376      /* initialize the SPI_DataSize member */
;;;377      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;378      /* Initialize the SPI_CPOL member */
;;;379      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;380      /* Initialize the SPI_CPHA member */
;;;381      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;382      /* Initialize the SPI_NSS member */
;;;383      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;384      /* Initialize the SPI_BaudRatePrescaler member */
;;;385      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;386      /* Initialize the SPI_FirstBit member */
;;;387      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;388      /* Initialize the SPI_CRCPolynomial member */
;;;389      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;390    }
000016  4770              BX       lr
;;;391    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;645      */
;;;646    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;647    {
;;;648      /* Check the parameters */
;;;649      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;650      
;;;651      /* Enable the selected SPI CRC transmission */
;;;652      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;653    }
000008  4770              BX       lr
;;;654    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Source\\FWLib\\src\\stm32f10x_spi.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_spi_c_2b928927____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_spi_c_2b928927____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_spi_c_2b928927____REVSH|
#line 128
|__asm___15_stm32f10x_spi_c_2b928927____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
