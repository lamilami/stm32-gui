; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\os_task.o --depend=.\ouput\os_task.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\os_task.crf Source\uCOS-II\Source\os_task.c]
                          THUMB

                          AREA ||i.OSTaskChangePrio||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0u
;;;51     INT8U  OSTaskChangePrio (INT8U  oldprio,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;52                              INT8U  newprio)
;;;53     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;54     #if (OS_EVENT_EN)
;;;55         OS_EVENT  *pevent;
;;;56     #if (OS_EVENT_MULTI_EN > 0u)
;;;57         OS_EVENT **pevents;
;;;58     #endif
;;;59     #endif
;;;60         OS_TCB    *ptcb;
;;;61         INT8U      y_new;
;;;62         INT8U      x_new;
;;;63         INT8U      y_old;
;;;64         OS_PRIO    bity_new;
;;;65         OS_PRIO    bitx_new;
;;;66         OS_PRIO    bity_old;
;;;67         OS_PRIO    bitx_old;
;;;68     #if OS_CRITICAL_METHOD == 3u
;;;69         OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
;;;70     #endif
;;;71     
;;;72     
;;;73     /*$PAGE*/
;;;74     #if OS_ARG_CHK_EN > 0u
;;;75         if (oldprio >= OS_LOWEST_PRIO) {
000008  283f              CMP      r0,#0x3f
00000a  d301              BCC      |L1.16|
;;;76             if (oldprio != OS_PRIO_SELF) {
00000c  2cff              CMP      r4,#0xff
00000e  d101              BNE      |L1.20|
                  |L1.16|
;;;77                 return (OS_ERR_PRIO_INVALID);
;;;78             }
;;;79         }
;;;80         if (newprio >= OS_LOWEST_PRIO) {
000010  2d3f              CMP      r5,#0x3f
000012  d302              BCC      |L1.26|
                  |L1.20|
;;;81             return (OS_ERR_PRIO_INVALID);
000014  202a              MOVS     r0,#0x2a
                  |L1.22|
;;;82         }
;;;83     #endif
;;;84         OS_ENTER_CRITICAL();
;;;85         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
;;;86             OS_EXIT_CRITICAL();
;;;87             return (OS_ERR_PRIO_EXIST);
;;;88         }
;;;89         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;90             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;91         }
;;;92         ptcb = OSTCBPrioTbl[oldprio];
;;;93         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;94             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;95             return (OS_ERR_PRIO);
;;;96         }
;;;97         if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;98             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;99             return (OS_ERR_TASK_NOT_EXIST);
;;;100        }
;;;101    #if OS_LOWEST_PRIO <= 63u
;;;102        y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
;;;103        x_new                 = (INT8U)(newprio & 0x07u);
;;;104    #else
;;;105        y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
;;;106        x_new                 = (INT8U)(newprio & 0x0Fu);
;;;107    #endif
;;;108        bity_new              = (OS_PRIO)(1uL << y_new);
;;;109        bitx_new              = (OS_PRIO)(1uL << x_new);
;;;110    
;;;111        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;112        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;113        y_old                 =  ptcb->OSTCBY;
;;;114        bity_old              =  ptcb->OSTCBBitY;
;;;115        bitx_old              =  ptcb->OSTCBBitX;
;;;116        if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
;;;117             OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
;;;118             if (OSRdyTbl[y_old] == 0u) {
;;;119                 OSRdyGrp &= (OS_PRIO)~bity_old;
;;;120             }
;;;121             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;122             OSRdyTbl[y_new] |= bitx_new;
;;;123        }
;;;124    
;;;125    #if (OS_EVENT_EN)
;;;126        pevent = ptcb->OSTCBEventPtr;
;;;127        if (pevent != (OS_EVENT *)0) {
;;;128            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
;;;129            if (pevent->OSEventTbl[y_old] == 0u) {
;;;130                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;131            }
;;;132            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;133            pevent->OSEventTbl[y_new] |= bitx_new;
;;;134        }
;;;135    #if (OS_EVENT_MULTI_EN > 0u)
;;;136        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;137            pevents =  ptcb->OSTCBEventMultiPtr;
;;;138            pevent  = *pevents;
;;;139            while (pevent != (OS_EVENT *)0) {
;;;140                pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
;;;141                if (pevent->OSEventTbl[y_old] == 0u) {
;;;142                    pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;143                }
;;;144                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;145                pevent->OSEventTbl[y_new] |= bitx_new;
;;;146                pevents++;
;;;147                pevent                     = *pevents;
;;;148            }
;;;149        }
;;;150    #endif
;;;151    #endif
;;;152    
;;;153        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;154        ptcb->OSTCBY    = y_new;
;;;155        ptcb->OSTCBX    = x_new;
;;;156        ptcb->OSTCBBitY = bity_new;
;;;157        ptcb->OSTCBBitX = bitx_new;
;;;158        OS_EXIT_CRITICAL();
;;;159        if (OSRunning == OS_TRUE) {
;;;160            OS_Sched();                                         /* Find new highest priority task          */
;;;161        }
;;;162        return (OS_ERR_NONE);
;;;163    }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4b40              LDR      r3,|L1.288|
000020  4601              MOV      r1,r0                 ;84
000022  f8530025          LDR      r0,[r3,r5,LSL #2]     ;85
000026  b120              CBZ      r0,|L1.50|
000028  4608              MOV      r0,r1                 ;86
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  2028              MOVS     r0,#0x28              ;87
000030  e7f1              B        |L1.22|
                  |L1.50|
000032  2cff              CMP      r4,#0xff              ;89
000034  d103              BNE      |L1.62|
000036  483b              LDR      r0,|L1.292|
000038  6800              LDR      r0,[r0,#0]            ;90  ; OSTCBCur
00003a  f890402a          LDRB     r4,[r0,#0x2a]         ;90
                  |L1.62|
00003e  f8532024          LDR      r2,[r3,r4,LSL #2]     ;92
000042  b35a              CBZ      r2,|L1.156|
000044  2a01              CMP      r2,#1                 ;97
000046  d02e              BEQ      |L1.166|
000048  08e8              LSRS     r0,r5,#3              ;102
00004a  2601              MOVS     r6,#1                 ;108
00004c  f0050b07          AND      r11,r5,#7             ;103
000050  fa06f700          LSL      r7,r6,r0              ;108
000054  fa06f60b          LSL      r6,r6,r11             ;109
000058  f00608ff          AND      r8,r6,#0xff           ;109
00005c  2600              MOVS     r6,#0                 ;111
00005e  f8436024          STR      r6,[r3,r4,LSL #2]     ;111
000062  f8432025          STR      r2,[r3,r5,LSL #2]     ;112
000066  f8123f2c          LDRB     r3,[r2,#0x2c]!        ;113
00006a  f8dfc0bc          LDR      r12,|L1.296|
00006e  7854              LDRB     r4,[r2,#1]            ;115
000070  f892a002          LDRB     r10,[r2,#2]           ;114
000074  f81c6003          LDRB     r6,[r12,r3]           ;116
000078  f00709ff          AND      r9,r7,#0xff           ;108
00007c  f1a2022c          SUB      r2,r2,#0x2c           ;115
000080  4226              TST      r6,r4                 ;116
000082  d023              BEQ      |L1.204|
000084  46e6              MOV      lr,r12                ;117
000086  4667              MOV      r7,r12                ;117
000088  ea6f0c04          MVN      r12,r4                ;117
00008c  f00c0cff          AND      r12,r12,#0xff         ;117
000090  ea16060c          ANDS     r6,r6,r12             ;117
000094  54fe              STRB     r6,[r7,r3]            ;117
000096  4f25              LDR      r7,|L1.300|
000098  d00a              BEQ      |L1.176|
00009a  e00d              B        |L1.184|
                  |L1.156|
00009c  4608              MOV      r0,r1                 ;94
00009e  f7fffffe          BL       OS_CPU_SR_Restore
0000a2  2029              MOVS     r0,#0x29              ;95
0000a4  e7b7              B        |L1.22|
                  |L1.166|
0000a6  4608              MOV      r0,r1                 ;98
0000a8  f7fffffe          BL       OS_CPU_SR_Restore
0000ac  2043              MOVS     r0,#0x43              ;99
0000ae  e7b2              B        |L1.22|
                  |L1.176|
0000b0  783e              LDRB     r6,[r7,#0]            ;119  ; OSRdyGrp
0000b2  ea26060a          BIC      r6,r6,r10             ;119
0000b6  703e              STRB     r6,[r7,#0]            ;119
                  |L1.184|
0000b8  783e              LDRB     r6,[r7,#0]            ;121  ; OSRdyGrp
0000ba  ea460609          ORR      r6,r6,r9              ;121
0000be  703e              STRB     r6,[r7,#0]            ;121
0000c0  f81e7000          LDRB     r7,[lr,r0]            ;122
0000c4  ea470708          ORR      r7,r7,r8              ;122
0000c8  f80e7000          STRB     r7,[lr,r0]            ;122
                  |L1.204|
0000cc  69d6              LDR      r6,[r2,#0x1c]         ;127
0000ce  b19e              CBZ      r6,|L1.248|
0000d0  18f7              ADDS     r7,r6,r3              ;128
0000d2  43e4              MVNS     r4,r4                 ;128
0000d4  7afb              LDRB     r3,[r7,#0xb]          ;128
0000d6  b2e4              UXTB     r4,r4                 ;128
0000d8  4023              ANDS     r3,r3,r4              ;128
0000da  72fb              STRB     r3,[r7,#0xb]          ;128
0000dc  d103              BNE      |L1.230|
0000de  7ab3              LDRB     r3,[r6,#0xa]          ;130
0000e0  ea23030a          BIC      r3,r3,r10             ;130
0000e4  72b3              STRB     r3,[r6,#0xa]          ;130
                  |L1.230|
0000e6  7ab3              LDRB     r3,[r6,#0xa]          ;132
0000e8  ea430309          ORR      r3,r3,r9              ;132
0000ec  72b3              STRB     r3,[r6,#0xa]          ;132
0000ee  1833              ADDS     r3,r6,r0              ;133
0000f0  7adc              LDRB     r4,[r3,#0xb]          ;133
0000f2  ea440408          ORR      r4,r4,r8              ;133
0000f6  72dc              STRB     r4,[r3,#0xb]          ;133
                  |L1.248|
0000f8  f8025f2a          STRB     r5,[r2,#0x2a]!        ;153
0000fc  7090              STRB     r0,[r2,#2]            ;154
0000fe  f882b001          STRB     r11,[r2,#1]           ;155
000102  f8829004          STRB     r9,[r2,#4]            ;156
000106  f8828003          STRB     r8,[r2,#3]            ;157
00010a  4608              MOV      r0,r1                 ;158
00010c  f7fffffe          BL       OS_CPU_SR_Restore
000110  4807              LDR      r0,|L1.304|
000112  7800              LDRB     r0,[r0,#0]            ;159  ; OSRunning
000114  2801              CMP      r0,#1                 ;159
000116  d101              BNE      |L1.284|
000118  f7fffffe          BL       OS_Sched
                  |L1.284|
00011c  2000              MOVS     r0,#0                 ;162
00011e  e77a              B        |L1.22|
;;;164    #endif
                          ENDP

                  |L1.288|
                          DCD      OSTCBPrioTbl
                  |L1.292|
                          DCD      OSTCBCur
                  |L1.296|
                          DCD      OSRdyTbl
                  |L1.300|
                          DCD      OSRdyGrp
                  |L1.304|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreateExt||, CODE, READONLY, ALIGN=2

                  OSTaskCreateExt PROC
;;;328    #if OS_TASK_CREATE_EXT_EN > 0u
;;;329    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;330                            void    *p_arg,
;;;331                            OS_STK  *ptos,
;;;332                            INT8U    prio,
;;;333                            INT16U   id,
;;;334                            OS_STK  *pbos,
;;;335                            INT32U   stk_size,
;;;336                            void    *pext,
;;;337                            INT16U   opt)
;;;338    {
000004  b083              SUB      sp,sp,#0xc
000006  4680              MOV      r8,r0
000008  e9ddb610          LDRD     r11,r6,[sp,#0x40]
;;;339        OS_STK    *psp;
;;;340        INT8U      err;
;;;341    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;342        OS_CPU_SR  cpu_sr = 0u;
;;;343    #endif
;;;344    
;;;345    
;;;346    
;;;347    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;348        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;349            OS_SAFETY_CRITICAL_EXCEPTION();
;;;350        }
;;;351    #endif
;;;352    
;;;353    #if OS_ARG_CHK_EN > 0u
;;;354        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
00000c  9f14              LDR      r7,[sp,#0x50]
00000e  4689              MOV      r9,r1                 ;338
000010  4692              MOV      r10,r2                ;338
000012  461c              MOV      r4,r3                 ;338
000014  2b3f              CMP      r3,#0x3f
000016  d903              BLS      |L2.32|
;;;355            return (OS_ERR_PRIO_INVALID);
000018  202a              MOVS     r0,#0x2a
                  |L2.26|
;;;356        }
;;;357    #endif
;;;358        OS_ENTER_CRITICAL();
;;;359        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
;;;360            OS_EXIT_CRITICAL();
;;;361            return (OS_ERR_TASK_CREATE_ISR);
;;;362        }
;;;363        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;364            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;365                                                 /* ... the same thing until task is created.              */
;;;366            OS_EXIT_CRITICAL();
;;;367    
;;;368    #if (OS_TASK_STAT_STK_CHK_EN > 0u)
;;;369            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;370    #endif
;;;371    
;;;372            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;373            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;374            if (err == OS_ERR_NONE) {
;;;375                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;376                    OS_Sched();
;;;377                }
;;;378            } else {
;;;379                OS_ENTER_CRITICAL();
;;;380                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;381                OS_EXIT_CRITICAL();
;;;382            }
;;;383            return (err);
;;;384        }
;;;385        OS_EXIT_CRITICAL();
;;;386        return (OS_ERR_PRIO_EXIST);
;;;387    }
00001a  b007              ADD      sp,sp,#0x1c
00001c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.32|
000020  f7fffffe          BL       OS_CPU_SR_Save
000024  491d              LDR      r1,|L2.156|
000026  7809              LDRB     r1,[r1,#0]            ;359  ; OSIntNesting
000028  b119              CBZ      r1,|L2.50|
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  203c              MOVS     r0,#0x3c              ;361
000030  e7f3              B        |L2.26|
                  |L2.50|
000032  4d1b              LDR      r5,|L2.160|
000034  f8551024          LDR      r1,[r5,r4,LSL #2]     ;363
000038  b119              CBZ      r1,|L2.66|
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2028              MOVS     r0,#0x28              ;386
000040  e7eb              B        |L2.26|
                  |L2.66|
000042  2101              MOVS     r1,#1                 ;364
000044  f8451024          STR      r1,[r5,r4,LSL #2]     ;364
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  463a              MOV      r2,r7                 ;369
00004e  4630              MOV      r0,r6                 ;369
000050  9912              LDR      r1,[sp,#0x48]         ;369
000052  f7fffffe          BL       OS_TaskStkClr
000056  463b              MOV      r3,r7                 ;372
000058  4652              MOV      r2,r10                ;372
00005a  4649              MOV      r1,r9                 ;372
00005c  4640              MOV      r0,r8                 ;372
00005e  f7fffffe          BL       OSTaskStkInit
000062  e9dd1212          LDRD     r1,r2,[sp,#0x48]      ;372
000066  e88d0086          STM      sp,{r1,r2,r7}         ;373
00006a  4601              MOV      r1,r0                 ;373
00006c  465b              MOV      r3,r11                ;373
00006e  4632              MOV      r2,r6                 ;373
000070  4620              MOV      r0,r4                 ;373
000072  f7fffffe          BL       OS_TCBInit
000076  0006              MOVS     r6,r0                 ;373
000078  d008              BEQ      |L2.140|
00007a  f7fffffe          BL       OS_CPU_SR_Save
00007e  2100              MOVS     r1,#0                 ;380
000080  f8451024          STR      r1,[r5,r4,LSL #2]     ;380
000084  f7fffffe          BL       OS_CPU_SR_Restore
                  |L2.136|
000088  4630              MOV      r0,r6                 ;383
00008a  e7c6              B        |L2.26|
                  |L2.140|
00008c  4805              LDR      r0,|L2.164|
00008e  7800              LDRB     r0,[r0,#0]            ;375  ; OSRunning
000090  2801              CMP      r0,#1                 ;375
000092  d1f9              BNE      |L2.136|
000094  f7fffffe          BL       OS_Sched
000098  e7f6              B        |L2.136|
;;;388    #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      OSIntNesting
                  |L2.160|
                          DCD      OSTCBPrioTbl
                  |L2.164|
                          DCD      OSRunning

                          AREA ||i.OSTaskRegGet||, CODE, READONLY, ALIGN=2

                  OSTaskRegGet PROC
;;;1086   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1087   INT32U  OSTaskRegGet (INT8U   prio,
000000  b570              PUSH     {r4-r6,lr}
;;;1088                         INT8U   id,
;;;1089                         INT8U  *perr)
;;;1090   {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;1091   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1092       OS_CPU_SR  cpu_sr = 0u;
;;;1093   #endif
;;;1094       INT32U     value;
;;;1095       OS_TCB    *ptcb;
;;;1096   
;;;1097   
;;;1098   #if OS_ARG_CHK_EN > 0u
;;;1099       if (prio >= OS_LOWEST_PRIO) {
000006  283f              CMP      r0,#0x3f
000008  d303              BCC      |L3.18|
;;;1100           if (prio != OS_PRIO_SELF) {
00000a  2cff              CMP      r4,#0xff
00000c  d001              BEQ      |L3.18|
;;;1101               *perr = OS_ERR_PRIO_INVALID;
00000e  202a              MOVS     r0,#0x2a
;;;1102               return (0u);
000010  e001              B        |L3.22|
                  |L3.18|
;;;1103           }
;;;1104       }
;;;1105       if (id >= OS_TASK_REG_TBL_SIZE) {
000012  b119              CBZ      r1,|L3.28|
;;;1106           *perr = OS_ERR_ID_INVALID;
000014  2008              MOVS     r0,#8
                  |L3.22|
000016  7010              STRB     r0,[r2,#0]
;;;1107           return (0u);
000018  2000              MOVS     r0,#0
;;;1108       }
;;;1109   #endif
;;;1110       OS_ENTER_CRITICAL();
;;;1111       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
;;;1112           ptcb = OSTCBCur;
;;;1113       } else {
;;;1114           ptcb = OSTCBPrioTbl[prio];
;;;1115       }
;;;1116       value = ptcb->OSTCBRegTbl[id];
;;;1117       OS_EXIT_CRITICAL();
;;;1118       *perr = OS_ERR_NONE;
;;;1119       return (value);
;;;1120   }
00001a  bd70              POP      {r4-r6,pc}
                  |L3.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4601              MOV      r1,r0                 ;1110
000022  2cff              CMP      r4,#0xff              ;1111
000024  d00a              BEQ      |L3.60|
000026  4807              LDR      r0,|L3.68|
000028  f8500024          LDR      r0,[r0,r4,LSL #2]     ;1114
                  |L3.44|
00002c  6c44              LDR      r4,[r0,#0x44]         ;1117
00002e  4608              MOV      r0,r1                 ;1117
000030  f7fffffe          BL       OS_CPU_SR_Restore
000034  2000              MOVS     r0,#0                 ;1118
000036  7028              STRB     r0,[r5,#0]            ;1118
000038  4620              MOV      r0,r4                 ;1119
00003a  bd70              POP      {r4-r6,pc}
                  |L3.60|
00003c  4802              LDR      r0,|L3.72|
00003e  6800              LDR      r0,[r0,#0]            ;1112  ; OSTCBCur
000040  e7f4              B        |L3.44|
;;;1121   #endif
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      OSTCBPrioTbl
                  |L3.72|
                          DCD      OSTCBCur

                          AREA ||i.OSTaskRegSet||, CODE, READONLY, ALIGN=2

                  OSTaskRegSet PROC
;;;1152   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1153   void  OSTaskRegSet (INT8U    prio,
000000  b570              PUSH     {r4-r6,lr}
;;;1154                       INT8U    id,
;;;1155                       INT32U   value,
;;;1156                       INT8U   *perr)
;;;1157   {
000002  4604              MOV      r4,r0
000004  4616              MOV      r6,r2
000006  461d              MOV      r5,r3
;;;1158   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1159       OS_CPU_SR  cpu_sr = 0u;
;;;1160   #endif
;;;1161       OS_TCB    *ptcb;
;;;1162   
;;;1163   
;;;1164   #if OS_ARG_CHK_EN > 0u
;;;1165       if (prio >= OS_LOWEST_PRIO) {
000008  283f              CMP      r0,#0x3f
00000a  d303              BCC      |L4.20|
;;;1166           if (prio != OS_PRIO_SELF) {
00000c  2cff              CMP      r4,#0xff
00000e  d001              BEQ      |L4.20|
;;;1167               *perr = OS_ERR_PRIO_INVALID;
000010  202a              MOVS     r0,#0x2a
;;;1168               return;
000012  e001              B        |L4.24|
                  |L4.20|
;;;1169           }
;;;1170       }
;;;1171       if (id >= OS_TASK_REG_TBL_SIZE) {
000014  b111              CBZ      r1,|L4.28|
;;;1172           *perr = OS_ERR_ID_INVALID;
000016  2008              MOVS     r0,#8
                  |L4.24|
000018  7018              STRB     r0,[r3,#0]
;;;1173           return;
;;;1174       }
;;;1175   #endif
;;;1176       OS_ENTER_CRITICAL();
;;;1177       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
;;;1178           ptcb = OSTCBCur;
;;;1179       } else {
;;;1180           ptcb = OSTCBPrioTbl[prio];
;;;1181       }
;;;1182       ptcb->OSTCBRegTbl[id] = value;
;;;1183       OS_EXIT_CRITICAL();
;;;1184       *perr                 = OS_ERR_NONE;
;;;1185   }
00001a  bd70              POP      {r4-r6,pc}
                  |L4.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4601              MOV      r1,r0                 ;1176
000022  2cff              CMP      r4,#0xff              ;1177
000024  d009              BEQ      |L4.58|
000026  4806              LDR      r0,|L4.64|
000028  f8500024          LDR      r0,[r0,r4,LSL #2]     ;1180
                  |L4.44|
00002c  6446              STR      r6,[r0,#0x44]         ;1183
00002e  4608              MOV      r0,r1                 ;1183
000030  f7fffffe          BL       OS_CPU_SR_Restore
000034  2000              MOVS     r0,#0                 ;1184
000036  7028              STRB     r0,[r5,#0]            ;1184
000038  bd70              POP      {r4-r6,pc}
                  |L4.58|
00003a  4802              LDR      r0,|L4.68|
00003c  6800              LDR      r0,[r0,#0]            ;1178  ; OSTCBCur
00003e  e7f5              B        |L4.44|
;;;1186   #endif
                          ENDP

                  |L4.64|
                          DCD      OSTCBPrioTbl
                  |L4.68|
                          DCD      OSTCBCur

                          AREA ||i.OSTaskResume||, CODE, READONLY, ALIGN=2

                  OSTaskResume PROC
;;;794    #if OS_TASK_SUSPEND_EN > 0u
;;;795    INT8U  OSTaskResume (INT8U prio)
000000  b510              PUSH     {r4,lr}
;;;796    {
000002  4604              MOV      r4,r0
;;;797        OS_TCB    *ptcb;
;;;798    #if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
;;;799        OS_CPU_SR  cpu_sr = 0u;
;;;800    #endif
;;;801    
;;;802    
;;;803    
;;;804    #if OS_ARG_CHK_EN > 0u
;;;805        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
000004  283f              CMP      r0,#0x3f
000006  d301              BCC      |L5.12|
;;;806            return (OS_ERR_PRIO_INVALID);
000008  202a              MOVS     r0,#0x2a
;;;807        }
;;;808    #endif
;;;809        OS_ENTER_CRITICAL();
;;;810        ptcb = OSTCBPrioTbl[prio];
;;;811        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
;;;812            OS_EXIT_CRITICAL();
;;;813            return (OS_ERR_TASK_RESUME_PRIO);
;;;814        }
;;;815        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;816            OS_EXIT_CRITICAL();
;;;817            return (OS_ERR_TASK_NOT_EXIST);
;;;818        }
;;;819        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;820            ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
;;;821            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;822                if (ptcb->OSTCBDly == 0u) {
;;;823                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;824                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;825                    OS_EXIT_CRITICAL();
;;;826                    if (OSRunning == OS_TRUE) {
;;;827                        OS_Sched();                               /* Find new highest priority task        */
;;;828                    }
;;;829                } else {
;;;830                    OS_EXIT_CRITICAL();
;;;831                }
;;;832            } else {                                              /* Must be pending on event              */
;;;833                OS_EXIT_CRITICAL();
;;;834            }
;;;835            return (OS_ERR_NONE);
;;;836        }
;;;837        OS_EXIT_CRITICAL();
;;;838        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;839    }
00000a  bd10              POP      {r4,pc}
                  |L5.12|
00000c  f7fffffe          BL       OS_CPU_SR_Save
000010  491c              LDR      r1,|L5.132|
000012  f8511024          LDR      r1,[r1,r4,LSL #2]     ;810
000016  b159              CBZ      r1,|L5.48|
000018  2901              CMP      r1,#1                 ;815
00001a  d00d              BEQ      |L5.56|
00001c  f8912028          LDRB     r2,[r1,#0x28]         ;819
000020  0713              LSLS     r3,r2,#28             ;819
000022  d52b              BPL      |L5.124|
000024  f01202f7          ANDS     r2,r2,#0xf7           ;820
000028  f8812028          STRB     r2,[r1,#0x28]         ;820
00002c  d008              BEQ      |L5.64|
00002e  e009              B        |L5.68|
                  |L5.48|
000030  f7fffffe          BL       OS_CPU_SR_Restore
000034  2046              MOVS     r0,#0x46              ;813
000036  bd10              POP      {r4,pc}
                  |L5.56|
000038  f7fffffe          BL       OS_CPU_SR_Restore
00003c  2043              MOVS     r0,#0x43              ;817
00003e  bd10              POP      {r4,pc}
                  |L5.64|
000040  6a4a              LDR      r2,[r1,#0x24]         ;822
000042  b11a              CBZ      r2,|L5.76|
                  |L5.68|
000044  f7fffffe          BL       OS_CPU_SR_Restore
                  |L5.72|
000048  2000              MOVS     r0,#0                 ;835
00004a  bd10              POP      {r4,pc}
                  |L5.76|
00004c  4a0e              LDR      r2,|L5.136|
00004e  f101012c          ADD      r1,r1,#0x2c
000052  788b              LDRB     r3,[r1,#2]            ;823
000054  7814              LDRB     r4,[r2,#0]            ;823  ; OSRdyGrp
000056  ea430304          ORR      r3,r3,r4              ;823
00005a  7013              STRB     r3,[r2,#0]            ;823
00005c  780a              LDRB     r2,[r1,#0]            ;824
00005e  4c0b              LDR      r4,|L5.140|
000060  7849              LDRB     r1,[r1,#1]            ;824
000062  5ca3              LDRB     r3,[r4,r2]            ;824
000064  ea430301          ORR      r3,r3,r1              ;824
000068  54a3              STRB     r3,[r4,r2]            ;824
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  4808              LDR      r0,|L5.144|
000070  7800              LDRB     r0,[r0,#0]            ;826  ; OSRunning
000072  2801              CMP      r0,#1                 ;826
000074  d1e8              BNE      |L5.72|
000076  f7fffffe          BL       OS_Sched
00007a  e7e5              B        |L5.72|
                  |L5.124|
00007c  f7fffffe          BL       OS_CPU_SR_Restore
000080  2044              MOVS     r0,#0x44              ;838
000082  bd10              POP      {r4,pc}
;;;840    #endif
                          ENDP

                  |L5.132|
                          DCD      OSTCBPrioTbl
                  |L5.136|
                          DCD      OSRdyGrp
                  |L5.140|
                          DCD      OSRdyTbl
                  |L5.144|
                          DCD      OSRunning

                          AREA ||i.OSTaskStkChk||, CODE, READONLY, ALIGN=2

                  OSTaskStkChk PROC
;;;861    #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;862    INT8U  OSTaskStkChk (INT8U         prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;863                         OS_STK_DATA  *p_stk_data)
;;;864    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;865        OS_TCB    *ptcb;
;;;866        OS_STK    *pchk;
;;;867        INT32U     nfree;
;;;868        INT32U     size;
;;;869    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;870        OS_CPU_SR  cpu_sr = 0u;
;;;871    #endif
;;;872    
;;;873    
;;;874    
;;;875    #if OS_ARG_CHK_EN > 0u
;;;876        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
000008  283f              CMP      r0,#0x3f
00000a  d904              BLS      |L6.22|
;;;877            if (prio != OS_PRIO_SELF) {
00000c  2cff              CMP      r4,#0xff
00000e  d002              BEQ      |L6.22|
;;;878                return (OS_ERR_PRIO_INVALID);
000010  202a              MOVS     r0,#0x2a
                  |L6.18|
;;;879            }
;;;880        }
;;;881        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;882            return (OS_ERR_PDATA_NULL);
;;;883        }
;;;884    #endif
;;;885        p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
;;;886        p_stk_data->OSUsed = 0u;
;;;887        OS_ENTER_CRITICAL();
;;;888        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
;;;889            prio = OSTCBCur->OSTCBPrio;
;;;890        }
;;;891        ptcb = OSTCBPrioTbl[prio];
;;;892        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
;;;893            OS_EXIT_CRITICAL();
;;;894            return (OS_ERR_TASK_NOT_EXIST);
;;;895        }
;;;896        if (ptcb == OS_TCB_RESERVED) {
;;;897            OS_EXIT_CRITICAL();
;;;898            return (OS_ERR_TASK_NOT_EXIST);
;;;899        }
;;;900        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
;;;901            OS_EXIT_CRITICAL();
;;;902            return (OS_ERR_TASK_OPT);
;;;903        }
;;;904        nfree = 0u;
;;;905        size  = ptcb->OSTCBStkSize;
;;;906        pchk  = ptcb->OSTCBStkBottom;
;;;907        OS_EXIT_CRITICAL();
;;;908    #if OS_STK_GROWTH == 1u
;;;909        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;910            nfree++;
;;;911        }
;;;912    #else
;;;913        while (*pchk-- == (OS_STK)0) {
;;;914            nfree++;
;;;915        }
;;;916    #endif
;;;917        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;918        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;919        return (OS_ERR_NONE);
;;;920    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L6.22|
000016  b146              CBZ      r6,|L6.42|
000018  2000              MOVS     r0,#0                 ;885
00001a  6030              STR      r0,[r6,#0]            ;886
00001c  6070              STR      r0,[r6,#4]            ;887
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4601              MOV      r1,r0                 ;887
000024  2cff              CMP      r4,#0xff              ;888
000026  d002              BEQ      |L6.46|
000028  e005              B        |L6.54|
                  |L6.42|
00002a  2009              MOVS     r0,#9                 ;882
00002c  e7f1              B        |L6.18|
                  |L6.46|
00002e  4814              LDR      r0,|L6.128|
000030  6800              LDR      r0,[r0,#0]            ;889  ; OSTCBCur
000032  f890402a          LDRB     r4,[r0,#0x2a]         ;889
                  |L6.54|
000036  4813              LDR      r0,|L6.132|
000038  f8500024          LDR      r0,[r0,r4,LSL #2]     ;891
00003c  b158              CBZ      r0,|L6.86|
00003e  2801              CMP      r0,#1                 ;896
000040  d009              BEQ      |L6.86|
000042  8a02              LDRH     r2,[r0,#0x10]         ;900
000044  07d2              LSLS     r2,r2,#31             ;900
000046  d00b              BEQ      |L6.96|
000048  e9d05702          LDRD     r5,r7,[r0,#8]         ;904
00004c  2400              MOVS     r4,#0                 ;904
00004e  4608              MOV      r0,r1                 ;907
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  e00a              B        |L6.108|
                  |L6.86|
000056  4608              MOV      r0,r1                 ;897
000058  f7fffffe          BL       OS_CPU_SR_Restore
00005c  2043              MOVS     r0,#0x43              ;898
00005e  e7d8              B        |L6.18|
                  |L6.96|
000060  4608              MOV      r0,r1                 ;901
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2045              MOVS     r0,#0x45              ;902
000068  e7d3              B        |L6.18|
                  |L6.106|
00006a  1c64              ADDS     r4,r4,#1              ;910
                  |L6.108|
00006c  cd01              LDM      r5!,{r0}              ;909
00006e  2800              CMP      r0,#0                 ;909
000070  d0fb              BEQ      |L6.106|
000072  00a0              LSLS     r0,r4,#2              ;917
000074  6030              STR      r0,[r6,#0]            ;918
000076  1b38              SUBS     r0,r7,r4              ;918
000078  0080              LSLS     r0,r0,#2              ;918
00007a  6070              STR      r0,[r6,#4]            ;919
00007c  2000              MOVS     r0,#0                 ;919
00007e  e7c8              B        |L6.18|
;;;921    #endif
                          ENDP

                  |L6.128|
                          DCD      OSTCBCur
                  |L6.132|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskSuspend||, CODE, READONLY, ALIGN=2

                  OSTaskSuspend PROC
;;;946    #if OS_TASK_SUSPEND_EN > 0u
;;;947    INT8U  OSTaskSuspend (INT8U prio)
000000  b570              PUSH     {r4-r6,lr}
;;;948    {
000002  4604              MOV      r4,r0
;;;949        BOOLEAN    self;
;;;950        OS_TCB    *ptcb;
;;;951        INT8U      y;
;;;952    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;953        OS_CPU_SR  cpu_sr = 0u;
;;;954    #endif
;;;955    
;;;956    
;;;957    
;;;958    #if OS_ARG_CHK_EN > 0u
;;;959        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
000004  283f              CMP      r0,#0x3f
000006  d004              BEQ      |L7.18|
;;;960            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;961        }
;;;962        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
000008  d305              BCC      |L7.22|
;;;963            if (prio != OS_PRIO_SELF) {
00000a  2cff              CMP      r4,#0xff
00000c  d003              BEQ      |L7.22|
;;;964                return (OS_ERR_PRIO_INVALID);
00000e  202a              MOVS     r0,#0x2a
;;;965            }
;;;966        }
;;;967    #endif
;;;968        OS_ENTER_CRITICAL();
;;;969        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
;;;970            prio = OSTCBCur->OSTCBPrio;
;;;971            self = OS_TRUE;
;;;972        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
;;;973            self = OS_TRUE;
;;;974        } else {
;;;975            self = OS_FALSE;                                        /* No suspending another task          */
;;;976        }
;;;977        ptcb = OSTCBPrioTbl[prio];
;;;978        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
;;;979            OS_EXIT_CRITICAL();
;;;980            return (OS_ERR_TASK_SUSPEND_PRIO);
;;;981        }
;;;982        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;983            OS_EXIT_CRITICAL();
;;;984            return (OS_ERR_TASK_NOT_EXIST);
;;;985        }
;;;986        y            = ptcb->OSTCBY;
;;;987        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
;;;988        if (OSRdyTbl[y] == 0u) {
;;;989            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;990        }
;;;991        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;992        OS_EXIT_CRITICAL();
;;;993        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;994            OS_Sched();                                             /* Find new highest priority task      */
;;;995        }
;;;996        return (OS_ERR_NONE);
;;;997    }
000010  bd70              POP      {r4-r6,pc}
                  |L7.18|
000012  2047              MOVS     r0,#0x47              ;960
000014  bd70              POP      {r4-r6,pc}
                  |L7.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4601              MOV      r1,r0                 ;968
00001c  481f              LDR      r0,|L7.156|
00001e  2cff              CMP      r4,#0xff              ;969
000020  6800              LDR      r0,[r0,#0]            ;972  ; OSTCBCur
000022  d005              BEQ      |L7.48|
000024  f890002a          LDRB     r0,[r0,#0x2a]         ;972
000028  42a0              CMP      r0,r4                 ;972
00002a  d104              BNE      |L7.54|
                  |L7.44|
00002c  2501              MOVS     r5,#1                 ;973
00002e  e003              B        |L7.56|
                  |L7.48|
000030  f890402a          LDRB     r4,[r0,#0x2a]         ;970
000034  e7fa              B        |L7.44|
                  |L7.54|
000036  2500              MOVS     r5,#0                 ;975
                  |L7.56|
000038  4819              LDR      r0,|L7.160|
00003a  f8500024          LDR      r0,[r0,r4,LSL #2]     ;977
00003e  b168              CBZ      r0,|L7.92|
000040  2801              CMP      r0,#1                 ;982
000042  d010              BEQ      |L7.102|
000044  f890202c          LDRB     r2,[r0,#0x2c]         ;986
000048  4c16              LDR      r4,|L7.164|
00004a  f890602d          LDRB     r6,[r0,#0x2d]         ;987
00004e  5ca3              LDRB     r3,[r4,r2]            ;987
000050  43f6              MVNS     r6,r6                 ;987
000052  b2f6              UXTB     r6,r6                 ;987
000054  4033              ANDS     r3,r3,r6              ;987
000056  54a3              STRB     r3,[r4,r2]            ;987
000058  d00a              BEQ      |L7.112|
00005a  e010              B        |L7.126|
                  |L7.92|
00005c  4608              MOV      r0,r1                 ;979
00005e  f7fffffe          BL       OS_CPU_SR_Restore
000062  2048              MOVS     r0,#0x48              ;980
000064  bd70              POP      {r4-r6,pc}
                  |L7.102|
000066  4608              MOV      r0,r1                 ;983
000068  f7fffffe          BL       OS_CPU_SR_Restore
00006c  2043              MOVS     r0,#0x43              ;984
00006e  bd70              POP      {r4-r6,pc}
                  |L7.112|
000070  4b0d              LDR      r3,|L7.168|
000072  f890202e          LDRB     r2,[r0,#0x2e]         ;989
000076  781c              LDRB     r4,[r3,#0]            ;989  ; OSRdyGrp
000078  ea240202          BIC      r2,r4,r2              ;989
00007c  701a              STRB     r2,[r3,#0]            ;989
                  |L7.126|
00007e  f8102f28          LDRB     r2,[r0,#0x28]!        ;991
000082  f0420208          ORR      r2,r2,#8              ;991
000086  7002              STRB     r2,[r0,#0]            ;991
000088  4608              MOV      r0,r1                 ;992
00008a  f7fffffe          BL       OS_CPU_SR_Restore
00008e  2d01              CMP      r5,#1                 ;993
000090  d101              BNE      |L7.150|
000092  f7fffffe          BL       OS_Sched
                  |L7.150|
000096  2000              MOVS     r0,#0                 ;996
000098  bd70              POP      {r4-r6,pc}
;;;998    #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L7.156|
                          DCD      OSTCBCur
                  |L7.160|
                          DCD      OSTCBPrioTbl
                  |L7.164|
                          DCD      OSRdyTbl
                  |L7.168|
                          DCD      OSRdyGrp

                          AREA ||i.OS_TaskReturn||, CODE, READONLY, ALIGN=2

                  OS_TaskReturn PROC
;;;1203   
;;;1204   void  OS_TaskReturn (void)
000000  4804              LDR      r0,|L8.20|
;;;1205   {
;;;1206       OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
000002  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000004  f7fffffe          BL       OSTaskReturnHook
;;;1207   
;;;1208   #if OS_TASK_DEL_EN > 0u
;;;1209       (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
;;;1210   #else
;;;1211       for (;;) {
;;;1212           OSTimeDly(OS_TICKS_PER_SEC);
000008  f44f747a          MOV      r4,#0x3e8
                  |L8.12|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       OSTimeDly
000012  e7fb              B        |L8.12|
;;;1213       }
;;;1214   #endif
;;;1215   }
;;;1216   
                          ENDP

                  |L8.20|
                          DCD      OSTCBCur

                          AREA ||i.OS_TaskStkClr||, CODE, READONLY, ALIGN=1

                  OS_TaskStkClr PROC
;;;1240   #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;1241   void  OS_TaskStkClr (OS_STK  *pbos,
000000  07d3              LSLS     r3,r2,#31
;;;1242                        INT32U   size,
;;;1243                        INT16U   opt)
;;;1244   {
;;;1245       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
000002  d007              BEQ      |L9.20|
;;;1246           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
000004  0792              LSLS     r2,r2,#30
000006  d505              BPL      |L9.20|
;;;1247   #if OS_STK_GROWTH == 1u
;;;1248               while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
;;;1249                   size--;
;;;1250                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000008  2200              MOVS     r2,#0
                  |L9.10|
00000a  2900              CMP      r1,#0                 ;1248
00000c  d002              BEQ      |L9.20|
00000e  c004              STM      r0!,{r2}
000010  1e49              SUBS     r1,r1,#1              ;1249
000012  e7fa              B        |L9.10|
                  |L9.20|
;;;1251               }
;;;1252   #else
;;;1253               while (size > 0u) {                        /* Stack grows from LOW to HIGH memory          */
;;;1254                   size--;
;;;1255                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1256               }
;;;1257   #endif
;;;1258           }
;;;1259       }
;;;1260   }
000014  4770              BX       lr
;;;1261   
                          ENDP

