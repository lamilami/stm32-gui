; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\mma8452q.o --depend=.\ouput\mma8452q.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\mma8452q.crf Source\gui_app\MMA8452Q.c]
                          THUMB

                          AREA ||i.Data_Sim||, CODE, READONLY, ALIGN=2

                  Data_Sim PROC
;;;735    
;;;736    void Data_Sim(unsigned lenth)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;737     {
000004  4680              MOV      r8,r0
;;;738    	static short temp;
;;;739    	int i;
;;;740    	char z_buf[2];
;;;741    	char x_buf[2];
;;;742    	char y_buf[2];
;;;743    	static int z_data_cnt =0;
;;;744    
;;;745    	for(i=0;i<lenth;i++)
000006  2700              MOVS     r7,#0
;;;746    	{
;;;747    		z_buf[0] = rand();
;;;748    		z_buf[1] = rand();
;;;749    		z_buf[1] = z_buf[1]&0x0fc;
;;;750    
;;;751    		temp  = ((z_buf[0]<<8) | z_buf[1]) ;
;;;752    
;;;753    		resutl_caculate(temp,3);
;;;754    
;;;755    		if(Z_acc.got_acc_num-Z_acc.used_acc_num >= MMA845X_Z_ACC_BUF)
000008  f8dfb0fc          LDR      r11,|L1.264|
00000c  f44f6a80          MOV      r10,#0x400
000010  f8df90f8          LDR      r9,|L1.268|
000014  e023              B        |L1.94|
                  |L1.22|
000016  f7fffffe          BL       rand
00001a  f3600407          BFI      r4,r0,#0,#8           ;747
00001e  f7fffffe          BL       rand
000022  f00000fc          AND      r0,r0,#0xfc           ;749
000026  f360240f          BFI      r4,r0,#8,#8           ;749
00002a  b2a0              UXTH     r0,r4                 ;749
00002c  ba40              REV16    r0,r0                 ;751
00002e  b200              SXTH     r0,r0                 ;751
000030  f8a90006          STRH     r0,[r9,#6]            ;751
000034  2103              MOVS     r1,#3                 ;753
000036  f7fffffe          BL       resutl_caculate
00003a  e9db0200          LDRD     r0,r2,[r11,#0]
00003e  1a82              SUBS     r2,r0,r2
000040  4659              MOV      r1,r11
000042  4552              CMP      r2,r10
000044  d20d              BCS      |L1.98|
;;;756    		{
;;;757    		break;
;;;758    		}
;;;759    		Z_acc.acc_buf[Z_acc.got_acc_num & (MMA845X_Z_ACC_BUF-1)] =  temp;	
000046  f3c00009          UBFX     r0,r0,#0,#10
00004a  eb010040          ADD      r0,r1,r0,LSL #1
00004e  f8b92006          LDRH     r2,[r9,#6]  ; temp
000052  8102              STRH     r2,[r0,#8]
;;;760    	
;;;761    		Z_acc.got_acc_num++;
000054  6808              LDR      r0,[r1,#0]  ; Z_acc
000056  1c40              ADDS     r0,r0,#1
000058  1c7f              ADDS     r7,r7,#1              ;745
00005a  f8cb0000          STR      r0,[r11,#0]           ;745  ; Z_acc
                  |L1.94|
00005e  4547              CMP      r7,r8                 ;745
000060  d3d9              BCC      |L1.22|
                  |L1.98|
;;;762    	}
;;;763    	
;;;764    
;;;765    	for(i=0;i<lenth;i++)
000062  2400              MOVS     r4,#0
;;;766    	{
;;;767    	x_buf[0] = rand();
;;;768    	x_buf[1] = rand();
;;;769    	x_buf[1] = x_buf[1]&0x0fc;
;;;770    
;;;771    	temp  = ((x_buf[0]<<8) | x_buf[1]) ;
;;;772    
;;;773    	resutl_caculate(temp,1);
;;;774    
;;;775    	if(X_acc.got_acc_num-X_acc.used_acc_num >= MMA845X_X_ACC_BUF)
000064  f8dfb0a8          LDR      r11,|L1.272|
000068  e023              B        |L1.178|
                  |L1.106|
00006a  f7fffffe          BL       rand
00006e  f3600507          BFI      r5,r0,#0,#8           ;767
000072  f7fffffe          BL       rand
000076  f00000fc          AND      r0,r0,#0xfc           ;769
00007a  f360250f          BFI      r5,r0,#8,#8           ;769
00007e  b2a8              UXTH     r0,r5                 ;769
000080  ba40              REV16    r0,r0                 ;771
000082  b200              SXTH     r0,r0                 ;771
000084  464f              MOV      r7,r9                 ;771
000086  f8a90006          STRH     r0,[r9,#6]            ;771
00008a  2101              MOVS     r1,#1                 ;773
00008c  f7fffffe          BL       resutl_caculate
000090  e9db0200          LDRD     r0,r2,[r11,#0]
000094  1a82              SUBS     r2,r0,r2
000096  4659              MOV      r1,r11
000098  4552              CMP      r2,r10
00009a  d20c              BCS      |L1.182|
;;;776    	{
;;;777    		break;
;;;778    	}
;;;779    	X_acc.acc_buf[X_acc.got_acc_num & (MMA845X_X_ACC_BUF-1)] =  temp;	
00009c  f3c00009          UBFX     r0,r0,#0,#10
0000a0  eb010040          ADD      r0,r1,r0,LSL #1
0000a4  88fa              LDRH     r2,[r7,#6]  ; temp
0000a6  8102              STRH     r2,[r0,#8]
;;;780    	
;;;781    	X_acc.got_acc_num++;
0000a8  6808              LDR      r0,[r1,#0]  ; X_acc
0000aa  1c40              ADDS     r0,r0,#1
0000ac  1c64              ADDS     r4,r4,#1              ;765
0000ae  f8cb0000          STR      r0,[r11,#0]           ;765  ; X_acc
                  |L1.178|
0000b2  4544              CMP      r4,r8                 ;765
0000b4  d3d9              BCC      |L1.106|
                  |L1.182|
;;;782    	}
;;;783    
;;;784    	for(i=0;i<lenth;i++)
0000b6  2400              MOVS     r4,#0
;;;785    	{
;;;786    	y_buf[0] = rand();
;;;787    	y_buf[1] = rand();
;;;788    	y_buf[1] = y_buf[1]&0x0fc;
;;;789    
;;;790    
;;;791    	temp  = ((y_buf[0]<<8) | y_buf[1]); 
;;;792    
;;;793    	resutl_caculate(temp,2);
;;;794    
;;;795    	if(Y_acc.got_acc_num-Y_acc.used_acc_num >= MMA845X_Y_ACC_BUF)
0000b8  4f16              LDR      r7,|L1.276|
0000ba  e021              B        |L1.256|
                  |L1.188|
0000bc  f7fffffe          BL       rand
0000c0  f3600607          BFI      r6,r0,#0,#8           ;786
0000c4  f7fffffe          BL       rand
0000c8  f00000fc          AND      r0,r0,#0xfc           ;788
0000cc  f360260f          BFI      r6,r0,#8,#8           ;788
0000d0  b2b0              UXTH     r0,r6                 ;788
0000d2  ba40              REV16    r0,r0                 ;791
0000d4  b200              SXTH     r0,r0                 ;791
0000d6  464d              MOV      r5,r9                 ;791
0000d8  f8a90006          STRH     r0,[r9,#6]            ;791
0000dc  2102              MOVS     r1,#2                 ;793
0000de  f7fffffe          BL       resutl_caculate
0000e2  e9d70100          LDRD     r0,r1,[r7,#0]         ;793
0000e6  1a41              SUBS     r1,r0,r1
0000e8  4551              CMP      r1,r10
0000ea  d20b              BCS      |L1.260|
;;;796    	{
;;;797    		break;
;;;798    	}
;;;799    	Y_acc.acc_buf[Y_acc.got_acc_num & (MMA845X_Y_ACC_BUF-1)] =  temp;	
0000ec  f3c00009          UBFX     r0,r0,#0,#10
0000f0  eb070040          ADD      r0,r7,r0,LSL #1
0000f4  88e9              LDRH     r1,[r5,#6]  ; temp
0000f6  8101              STRH     r1,[r0,#8]
;;;800    	
;;;801    	Y_acc.got_acc_num++;
0000f8  6838              LDR      r0,[r7,#0]  ; Y_acc
0000fa  1c40              ADDS     r0,r0,#1
0000fc  1c64              ADDS     r4,r4,#1              ;784
0000fe  6038              STR      r0,[r7,#0]            ;784  ; Y_acc
                  |L1.256|
000100  4544              CMP      r4,r8                 ;784
000102  d3db              BCC      |L1.188|
                  |L1.260|
;;;802    	}
;;;803    
;;;804    }
000104  e8bd9ff0          POP      {r4-r12,pc}
;;;805    
                          ENDP

                  |L1.264|
                          DCD      ||area_number.23||
                  |L1.268|
                          DCD      ||.data||
                  |L1.272|
                          DCD      ||area_number.23||+0x828
                  |L1.276|
                          DCD      ||area_number.23||+0x1050

                          AREA ||i.IIC_ReadByte||, CODE, READONLY, ALIGN=2

                  IIC_ReadByte PROC
;;;321    *****************************************************************************/
;;;322    u8 IIC_ReadByte (etI2cAck ack)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;323    {
;;;324    	u8 mask,rxByte=0;
;;;325    	IIC_SDA=HIGH; 
000004  4e18              LDR      r6,|L2.104|
000006  2500              MOVS     r5,#0                 ;324
000008  2701              MOVS     r7,#1
00000a  4681              MOV      r9,r0                 ;323
00000c  f8c6719c          STR      r7,[r6,#0x19c]
;;;326    	delay_asm1(6);
000010  2006              MOVS     r0,#6
000012  f7fffffe          BL       delay_asm1
;;;327    	for (mask=0x80; mask>0; mask>>=1) 
000016  2480              MOVS     r4,#0x80
000018  f04f0800          MOV      r8,#0                 ;324
                  |L2.28|
;;;328    	{ 
;;;329    	    IIC_SCL=HIGH; //start clock on SCL-line
00001c  f8c67198          STR      r7,[r6,#0x198]
;;;330    		delay_asm1(6*3);
000020  2012              MOVS     r0,#0x12
000022  f7fffffe          BL       delay_asm1
;;;331    		if(READ_SDA==1) rxByte=(rxByte | mask); 
000026  f8d6011c          LDR      r0,[r6,#0x11c]
00002a  2801              CMP      r0,#1
00002c  d100              BNE      |L2.48|
00002e  4325              ORRS     r5,r5,r4
                  |L2.48|
;;;332    		IIC_SCL=LOW;
000030  f8c68198          STR      r8,[r6,#0x198]
;;;333    		delay_asm1(6*3);
000034  2012              MOVS     r0,#0x12
000036  f7fffffe          BL       delay_asm1
00003a  0864              LSRS     r4,r4,#1              ;327
00003c  d1ee              BNE      |L2.28|
00003e  f50676cc          ADD      r6,r6,#0x198          ;327
;;;334    	}
;;;335    	IIC_SDA=ack; 
000042  f8c69004          STR      r9,[r6,#4]
;;;336    	delay_asm1(6);
000046  f04f0006          MOV      r0,#6
00004a  f7fffffe          BL       delay_asm1
;;;337    	IIC_SCL=HIGH; //clk #9 for ack
00004e  6037              STR      r7,[r6,#0]
;;;338    	delay_asm1(6*3);
000050  2012              MOVS     r0,#0x12
000052  f7fffffe          BL       delay_asm1
;;;339    	IIC_SCL=LOW;
000056  f8c68000          STR      r8,[r6,#0]
;;;340    	IIC_SDA=HIGH;
00005a  6077              STR      r7,[r6,#4]
;;;341    	delay_asm1(6*3);
00005c  2012              MOVS     r0,#0x12
00005e  f7fffffe          BL       delay_asm1
;;;342    	return rxByte; 
000062  4628              MOV      r0,r5
;;;343    }
000064  e8bd87f0          POP      {r4-r10,pc}
;;;344    
                          ENDP

                  |L2.104|
                          DCD      0x42218000

                          AREA ||i.IIC_RegRead||, CODE, READONLY, ALIGN=1

                  IIC_RegRead PROC
;;;385    *****************************************************************************/
;;;386    u8 IIC_RegRead(u8 reg)
000000  b510              PUSH     {r4,lr}
;;;387    {
000002  4604              MOV      r4,r0
;;;388      u8 b;
;;;389      IIC_Start();                                  
000004  f7fffffe          BL       IIC_Start
;;;390      IIC_WriteByte(MMA845X_ADD);                 
000008  2038              MOVS     r0,#0x38
00000a  f7fffffe          BL       IIC_WriteByte
;;;391      IIC_WriteByte(reg);                        
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       IIC_WriteByte
;;;392      IIC_Start();                           
000014  f7fffffe          BL       IIC_Start
;;;393      IIC_WriteByte(MMA845X_ADD+1);                    
000018  2039              MOVS     r0,#0x39
00001a  f7fffffe          BL       IIC_WriteByte
;;;394      b = IIC_ReadByte(NO_ACK);                                                
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       IIC_ReadByte
000024  4604              MOV      r4,r0
;;;395      IIC_Stop();                                 
000026  f7fffffe          BL       IIC_Stop
;;;396      return b;
00002a  4620              MOV      r0,r4
;;;397    }
00002c  bd10              POP      {r4,pc}
;;;398    
                          ENDP


                          AREA ||i.IIC_RegReadN||, CODE, READONLY, ALIGN=1

                  IIC_RegReadN PROC
;;;448    *****************************************************************************/
;;;449    void IIC_RegReadN(u8 reg1, u8 N, u8 *array)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;451      u8 b;
;;;452      IIC_Start();                                  
000008  f7fffffe          BL       IIC_Start
;;;453      IIC_WriteByte(MMA845X_ADD);                      
00000c  2038              MOVS     r0,#0x38
00000e  f7fffffe          BL       IIC_WriteByte
;;;454      IIC_WriteByte(reg1);                        
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       IIC_WriteByte
;;;455      IIC_Start();                           
000018  f7fffffe          BL       IIC_Start
;;;456      IIC_WriteByte(MMA845X_ADD+1);                    
00001c  2039              MOVS     r0,#0x39
00001e  f7fffffe          BL       IIC_WriteByte
;;;457      //b = IIC_ReadByte(ACK);                        
;;;458      while (N>1)                                   
000022  e006              B        |L4.50|
                  |L4.36|
;;;459      {
;;;460        b = IIC_ReadByte(ACK);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       IIC_ReadByte
;;;461        *array = b;
;;;462        array++;
;;;463        N--;
00002a  1e6d              SUBS     r5,r5,#1
00002c  f8040b01          STRB     r0,[r4],#1            ;461
000030  b2ed              UXTB     r5,r5
                  |L4.50|
000032  2d01              CMP      r5,#1                 ;458
000034  d8f6              BHI      |L4.36|
;;;464      }
;;;465      b = IIC_ReadByte(NO_ACK);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       IIC_ReadByte
;;;466      *array = b;                                   
00003c  7020              STRB     r0,[r4,#0]
;;;467      IIC_Stop();                                
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      IIC_Stop
;;;468    }
;;;469    
                          ENDP


                          AREA ||i.IIC_RegReadXYZ_and||, CODE, READONLY, ALIGN=1

                  IIC_RegReadXYZ_and PROC
;;;633    *****************************************************************************/
;;;634    bool IIC_RegReadXYZ_and(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;635    {
000002  4604              MOV      r4,r0
;;;636    	unsigned int xyz_status;
;;;637    	xyz_status = IIC_RegRead(STATUS_00_REG);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       IIC_RegRead
;;;638    
;;;639        if(xyz_status & ZYXDR_MASK)
00000a  0700              LSLS     r0,r0,#28
00000c  d506              BPL      |L5.28|
;;;640    	{
;;;641    		IIC_RegReadN(OUT_X_MSB_REG,6, buf);
00000e  4622              MOV      r2,r4
000010  2106              MOVS     r1,#6
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       IIC_RegReadN
;;;642    		return true;
000018  2001              MOVS     r0,#1
;;;643    	}
;;;644    	else
;;;645    	{
;;;646    		return false;	
;;;647    	}
;;;648    }
00001a  bd10              POP      {r4,pc}
                  |L5.28|
00001c  2000              MOVS     r0,#0                 ;646
00001e  bd10              POP      {r4,pc}
;;;649    
                          ENDP


                          AREA ||i.IIC_RegReadXYZ_or||, CODE, READONLY, ALIGN=1

                  IIC_RegReadXYZ_or PROC
;;;584    *****************************************************************************/
;;;585    int IIC_RegReadXYZ_or(uint32_t Out_xyz_msb_Reg,uint8_t *buf)
000000  b570              PUSH     {r4-r6,lr}
;;;586    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;587        int xyz_status;
;;;588    	xyz_status = IIC_RegRead(STATUS_00_REG);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       IIC_RegRead
;;;589    
;;;590    	if(Out_xyz_msb_Reg == OUT_Z_MSB_REG)
00000c  2c05              CMP      r4,#5
00000e  d005              BEQ      |L6.28|
;;;591    	{
;;;592    		xyz_status &= ZDR_MASK;	
;;;593    	}
;;;594    	else if (Out_xyz_msb_Reg == OUT_Y_MSB_REG)
000010  2c03              CMP      r4,#3
000012  d006              BEQ      |L6.34|
;;;595    	{
;;;596    		xyz_status &= YDR_MASK;
;;;597    	}
;;;598    	else if (Out_xyz_msb_Reg == OUT_X_MSB_REG)
000014  2c01              CMP      r4,#1
000016  d007              BEQ      |L6.40|
;;;599    	{
;;;600    		xyz_status &= XDR_MASK;
;;;601    	}
;;;602    	else
;;;603    	{
;;;604    		  return false;
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;605    	}
;;;606    
;;;607        if(xyz_status)
;;;608    	{
;;;609    		IIC_RegReadN(Out_xyz_msb_Reg, 2, buf);
;;;610    		return true;
;;;611    	}
;;;612    	else
;;;613    	{
;;;614    		return false;
;;;615    	}
;;;616    
;;;617    }
00001a  bd70              POP      {r4-r6,pc}
                  |L6.28|
00001c  f0000004          AND      r0,r0,#4              ;592
000020  e004              B        |L6.44|
                  |L6.34|
000022  f0000002          AND      r0,r0,#2              ;596
000026  e001              B        |L6.44|
                  |L6.40|
000028  f0000001          AND      r0,r0,#1              ;600
                  |L6.44|
00002c  2800              CMP      r0,#0                 ;607
00002e  d0f4              BEQ      |L6.26|
000030  462a              MOV      r2,r5                 ;609
000032  2102              MOVS     r1,#2                 ;609
000034  b2e0              UXTB     r0,r4                 ;609
000036  f7fffffe          BL       IIC_RegReadN
00003a  2001              MOVS     r0,#1                 ;610
00003c  bd70              POP      {r4-r6,pc}
;;;618    /*****************************************************************************
                          ENDP


                          AREA ||i.IIC_RegReadZ||, CODE, READONLY, ALIGN=1

                  IIC_RegReadZ PROC
;;;548    
;;;549    int IIC_RegReadZ(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;550    {
000002  4604              MOV      r4,r0
;;;551        int xyz_status;
;;;552    	xyz_status = IIC_RegRead(STATUS_00_REG);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       IIC_RegRead
;;;553    
;;;554        if(xyz_status & ZDR_MASK)
00000a  0740              LSLS     r0,r0,#29
00000c  d506              BPL      |L7.28|
;;;555    	{
;;;556    		IIC_RegReadN(OUT_Z_MSB_REG, 2, buf);
00000e  4622              MOV      r2,r4
000010  2102              MOVS     r1,#2
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       IIC_RegReadN
;;;557    		return true;
000018  2001              MOVS     r0,#1
;;;558    	}
;;;559    /*	else if	 (xyz_status & ZOW_MASK)
;;;560    	{
;;;561    	    
;;;562    		return false;
;;;563    	} */
;;;564    	else 
;;;565    	{
;;;566    		return false;
;;;567    	}
;;;568    }
00001a  bd10              POP      {r4,pc}
                  |L7.28|
00001c  2000              MOVS     r0,#0                 ;566
00001e  bd10              POP      {r4,pc}
;;;569    /*****************************************************************************
                          ENDP


                          AREA ||i.IIC_RegWrite||, CODE, READONLY, ALIGN=1

                  IIC_RegWrite PROC
;;;361    *****************************************************************************/
;;;362    void IIC_RegWrite(u8 reg,u8 val)
000000  b570              PUSH     {r4-r6,lr}
;;;363    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;364      IIC_Start();                                  
000006  f7fffffe          BL       IIC_Start
;;;365      IIC_WriteByte(MMA845X_ADD);                      
00000a  2038              MOVS     r0,#0x38
00000c  f7fffffe          BL       IIC_WriteByte
;;;366      IIC_WriteByte(reg);                         
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       IIC_WriteByte
;;;367      IIC_WriteByte(val);                         
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IIC_WriteByte
;;;368      IIC_Stop();                               
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      IIC_Stop
;;;369    }
;;;370    
                          ENDP


                          AREA ||i.IIC_RegWriteN||, CODE, READONLY, ALIGN=1

                  IIC_RegWriteN PROC
;;;416    *****************************************************************************/
;;;417    void IIC_RegWriteN(u8 reg1,u8 N,u8 *array)
000000  b570              PUSH     {r4-r6,lr}
;;;418    {                              
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;419      IIC_Start();                                 
000008  f7fffffe          BL       IIC_Start
;;;420      IIC_WriteByte(MMA845X_ADD);                      
00000c  2038              MOVS     r0,#0x38
00000e  f7fffffe          BL       IIC_WriteByte
;;;421      IIC_WriteByte(reg1);                     
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       IIC_WriteByte
;;;422      while (N>0)                               
000018  e005              B        |L9.38|
                  |L9.26|
;;;423      {
;;;424        IIC_WriteByte(*array);
00001a  7828              LDRB     r0,[r5,#0]
00001c  f7fffffe          BL       IIC_WriteByte
;;;425        array++;
000020  1c6d              ADDS     r5,r5,#1
;;;426        N--;
000022  1e64              SUBS     r4,r4,#1
000024  b2e4              UXTB     r4,r4
                  |L9.38|
000026  2c00              CMP      r4,#0                 ;422
000028  d1f7              BNE      |L9.26|
;;;427      }
;;;428      IIC_Stop();                                
00002a  e8bd4070          POP      {r4-r6,lr}
00002e  f7ffbffe          B.W      IIC_Stop
;;;429    }
;;;430    
                          ENDP


                          AREA ||i.IIC_Start||, CODE, READONLY, ALIGN=2

                  IIC_Start PROC
;;;232    *****************************************************************************/
;;;233    void IIC_Start (void)
000000  b570              PUSH     {r4-r6,lr}
;;;234    {
;;;235    	IIC_SDA=HIGH;
000002  4c09              LDR      r4,|L10.40|
000004  2001              MOVS     r0,#1
000006  6060              STR      r0,[r4,#4]
;;;236    	IIC_SCL=HIGH;
000008  6020              STR      r0,[r4,#0]
;;;237    	delay_asm1(6*2);
00000a  f04f000c          MOV      r0,#0xc
00000e  f7fffffe          BL       delay_asm1
;;;238    	IIC_SDA=LOW;
000012  2500              MOVS     r5,#0
000014  6065              STR      r5,[r4,#4]
;;;239    	delay_asm1(6*2);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       delay_asm1
;;;240    	IIC_SCL=LOW;
00001c  6025              STR      r5,[r4,#0]
;;;241    	delay_asm1(6);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  2006              MOVS     r0,#6
000024  f7ffbffe          B.W      delay_asm1
;;;242    	
;;;243    }
;;;244    /*****************************************************************************
                          ENDP

                  |L10.40|
                          DCD      0x42218198

                          AREA ||i.IIC_Stop||, CODE, READONLY, ALIGN=2

                  IIC_Stop PROC
;;;258    *****************************************************************************/
;;;259    void IIC_Stop (void)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
;;;261    	IIC_SDA=LOW;
000002  4c09              LDR      r4,|L11.40|
000004  2000              MOVS     r0,#0
000006  6060              STR      r0,[r4,#4]
;;;262    	IIC_SCL=LOW;
000008  6020              STR      r0,[r4,#0]
;;;263    	delay_asm1(6*2);
00000a  f04f000c          MOV      r0,#0xc
00000e  f7fffffe          BL       delay_asm1
;;;264    	IIC_SCL=HIGH;
000012  2501              MOVS     r5,#1
000014  6025              STR      r5,[r4,#0]
;;;265    	delay_asm1(6*2);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       delay_asm1
;;;266    	IIC_SDA=HIGH;
00001c  6065              STR      r5,[r4,#4]
;;;267    	delay_asm1(6*4);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  2018              MOVS     r0,#0x18
000024  f7ffbffe          B.W      delay_asm1
;;;268    }
;;;269    
                          ENDP

                  |L11.40|
                          DCD      0x42218198

                          AREA ||i.IIC_WriteByte||, CODE, READONLY, ALIGN=2

                  IIC_WriteByte PROC
;;;284    *****************************************************************************/
;;;285    u8 IIC_WriteByte (u8 txByte)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;286    {
;;;287        u8 mask,erro=0;
000004  f04f0800          MOV      r8,#0
;;;288        for (mask=0x80; mask>0; mask>>=1) 
000008  2480              MOVS     r4,#0x80
;;;289        { 
;;;290    	    if ((mask & txByte) == 0) IIC_SDA=LOW;
00000a  4d18              LDR      r5,|L12.108|
00000c  4681              MOV      r9,r0                 ;286
00000e  4647              MOV      r7,r8                 ;287
;;;291    		else IIC_SDA=HIGH;
000010  2601              MOVS     r6,#1
                  |L12.18|
000012  ea140f09          TST      r4,r9                 ;290
000016  d01c              BEQ      |L12.82|
000018  f8c5619c          STR      r6,[r5,#0x19c]
                  |L12.28|
;;;292    		delay_asm1(6);
00001c  2006              MOVS     r0,#6
00001e  f7fffffe          BL       delay_asm1
;;;293    		IIC_SCL=HIGH; 
000022  f8c56198          STR      r6,[r5,#0x198]
;;;294    		delay_asm1(6*3);
000026  2012              MOVS     r0,#0x12
000028  f7fffffe          BL       delay_asm1
;;;295    		IIC_SCL=LOW;
00002c  f8c57198          STR      r7,[r5,#0x198]
;;;296    		delay_asm1(6*3);
000030  2012              MOVS     r0,#0x12
000032  f7fffffe          BL       delay_asm1
000036  0864              LSRS     r4,r4,#1              ;288
000038  d1eb              BNE      |L12.18|
;;;297        }
;;;298        IIC_SDA=HIGH; //release SDA-line
00003a  f8c5619c          STR      r6,[r5,#0x19c]
;;;299        IIC_SCL=HIGH; //clk #9 for ack
00003e  f8c56198          STR      r6,[r5,#0x198]
;;;300        delay_asm1(6*3);
000042  2012              MOVS     r0,#0x12
000044  f7fffffe          BL       delay_asm1
;;;301    	if(READ_SDA==HIGH) erro=ACK_ERROR;
000048  f8d5011c          LDR      r0,[r5,#0x11c]
00004c  2801              CMP      r0,#1
00004e  d003              BEQ      |L12.88|
000050  e004              B        |L12.92|
                  |L12.82|
000052  f8c5719c          STR      r7,[r5,#0x19c]        ;290
000056  e7e1              B        |L12.28|
                  |L12.88|
000058  f04f0801          MOV      r8,#1
                  |L12.92|
;;;302        IIC_SCL=LOW;
00005c  f8c57198          STR      r7,[r5,#0x198]
;;;303    	delay_asm1(6*3);
000060  2012              MOVS     r0,#0x12
000062  f7fffffe          BL       delay_asm1
;;;304        return erro; //return error code
000066  4640              MOV      r0,r8
;;;305    }
000068  e8bd87f0          POP      {r4-r10,pc}
;;;306    
                          ENDP

                  |L12.108|
                          DCD      0x42218000

                          AREA ||i.MMA845x_Active||, CODE, READONLY, ALIGN=1

                  MMA845x_Active PROC
;;;485    *****************************************************************************/
;;;486    void MMA845x_Active ()
000000  b510              PUSH     {r4,lr}
;;;487    {
;;;488      IIC_RegWrite(CTRL_REG1, (IIC_RegRead(CTRL_REG1) | ACTIVE_MASK));
000002  202a              MOVS     r0,#0x2a
000004  f7fffffe          BL       IIC_RegRead
000008  f0400101          ORR      r1,r0,#1
00000c  e8bd4010          POP      {r4,lr}
000010  202a              MOVS     r0,#0x2a
000012  f7ffbffe          B.W      IIC_RegWrite
;;;489    }
;;;490    
                          ENDP


                          AREA ||i.MMA845x_Init||, CODE, READONLY, ALIGN=1

                  MMA845x_Init PROC
;;;531    *****************************************************************************/
;;;532    void MMA845x_Init (void)
000000  b510              PUSH     {r4,lr}
;;;533    {
;;;534    
;;;535    	MMA845x_Standby();
000002  f7fffffe          BL       MMA845x_Standby
;;;536    	 /*
;;;537    	**  Configure sensor for:
;;;538    	**    - Sleep Mode Poll Rate of 50Hz (20ms)
;;;539    	**    - System Output Data Rate of 200Hz (5ms)
;;;540    	**    - Full Scale of +/-2g
;;;541    	*/
;;;542    	IIC_RegWrite(CTRL_REG1, ASLP_RATE_20MS+DATA_RATE);
000006  2100              MOVS     r1,#0
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       IIC_RegWrite
;;;543    	IIC_RegWrite(XYZ_DATA_CFG_REG, FULL_SCALE);
00000e  2100              MOVS     r1,#0
000010  200e              MOVS     r0,#0xe
000012  f7fffffe          BL       IIC_RegWrite
;;;544    
;;;545    	MMA845x_Active ();  
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      MMA845x_Active
;;;546    }
;;;547    
                          ENDP


                          AREA ||i.MMA845x_Standby||, CODE, READONLY, ALIGN=1

                  MMA845x_Standby PROC
;;;506    *****************************************************************************/
;;;507    void MMA845x_Standby (void)
000000  b510              PUSH     {r4,lr}
;;;508    {
;;;509    	uint32_t n;
;;;510    	n= IIC_RegRead(WHO_AM_I_REG);
000002  200d              MOVS     r0,#0xd
000004  f7fffffe          BL       IIC_RegRead
;;;511    	n = IIC_RegRead(CTRL_REG1);
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       IIC_RegRead
;;;512     	IIC_RegWrite(CTRL_REG1, n & ~ACTIVE_MASK);
00000e  f0200101          BIC      r1,r0,#1
000012  e8bd4010          POP      {r4,lr}
000016  202a              MOVS     r0,#0x2a
000018  f7ffbffe          B.W      IIC_RegWrite
;;;513        
;;;514    }
;;;515    
                          ENDP


                          AREA ||i.MMA845x_interrupt||, CODE, READONLY, ALIGN=2

                  MMA845x_interrupt PROC
;;;130    *****************************************************************************/
;;;131    void MMA845x_interrupt(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;132    {   
;;;133    	static short z_temp,x_temp,y_temp;
;;;134    	static start_stop;
;;;135    	int i;
;;;136    	unsigned char z_buf[2];
;;;137    	unsigned char x_buf[2];
;;;138    	unsigned char y_buf[2];
;;;139    	
;;;140    	static int z_data_cnt =0;
;;;141    	IIC_RegReadN(OUT_Z_MSB_REG, 2, z_buf);	
000002  466a              MOV      r2,sp
000004  2102              MOVS     r1,#2
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       IIC_RegReadN
;;;142    	IIC_RegReadN(OUT_X_MSB_REG, 2, x_buf);
00000c  aa01              ADD      r2,sp,#4
00000e  2102              MOVS     r1,#2
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       IIC_RegReadN
;;;143    	IIC_RegReadN(OUT_Y_MSB_REG, 2, y_buf);
000016  aa02              ADD      r2,sp,#8
000018  2102              MOVS     r1,#2
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       IIC_RegReadN
;;;144    
;;;145    //	temp  = ((z_buf[0]<<8) | z_buf[1]) >> 2; 
;;;146    	z_temp  = ((z_buf[0]<<8) | z_buf[1]);
000020  f8bd0000          LDRH     r0,[sp,#0]
000024  4d3d              LDR      r5,|L16.284|
000026  ba40              REV16    r0,r0
000028  b204              SXTH     r4,r0
00002a  802c              STRH     r4,[r5,#0]
;;;147    	x_temp  = ((x_buf[0]<<8) | x_buf[1]); 
00002c  f8bd0004          LDRH     r0,[sp,#4]
000030  ba40              REV16    r0,r0
000032  8068              STRH     r0,[r5,#2]
;;;148    	y_temp  = ((y_buf[0]<<8) | y_buf[1]);
000034  f8bd0008          LDRH     r0,[sp,#8]
000038  ba40              REV16    r0,r0
00003a  80a8              STRH     r0,[r5,#4]
;;;149    
;;;150    
;;;151    	if(xyz_pars.auto_sel == 1)
00003c  4838              LDR      r0,|L16.288|
00003e  6881              LDR      r1,[r0,#8]  ; xyz_pars
000040  2901              CMP      r1,#1
000042  d03a              BEQ      |L16.186|
;;;152    	{
;;;153    	 if(!start_stop)
;;;154    	 {
;;;155    	 if(((z_temp&0x8000)|((z_temp&0x7fff)>>2))< xyz_pars.auto_start_za*0.9);
;;;156    	 start_stop = 1;
;;;157    	 return;
;;;158    	 }else{
;;;159    	 if(((z_temp&0x8000)|((z_temp&0x7fff)>>2))< xyz_pars.auto_stop_za*0.9);
;;;160    	 return;
;;;161    	 }	
;;;162    	}
;;;163    
;;;164    	if(Z_acc.got_acc_num-Z_acc.used_acc_num >= MMA845X_Z_ACC_BUF)
000044  4937              LDR      r1,|L16.292|
000046  f44f6680          MOV      r6,#0x400
00004a  e9d10200          LDRD     r0,r2,[r1,#0]
00004e  1a82              SUBS     r2,r0,r2
000050  42b2              CMP      r2,r6
000052  d231              BCS      |L16.184|
;;;165    	{
;;;166    		return;
;;;167    	}else{
;;;168    		Z_acc.acc_buf[Z_acc.got_acc_num & (MMA845X_Z_ACC_BUF-1)] = z_temp;
000054  f3c00009          UBFX     r0,r0,#0,#10
000058  eb010040          ADD      r0,r1,r0,LSL #1
00005c  8104              STRH     r4,[r0,#8]
;;;169    		Z_acc.got_acc_num++;
00005e  6808              LDR      r0,[r1,#0]  ; Z_acc
000060  1c40              ADDS     r0,r0,#1
;;;170    	}
;;;171    	resutl_caculate(z_temp,3);
000062  6008              STR      r0,[r1,#0]  ; Z_acc
000064  2103              MOVS     r1,#3
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       resutl_caculate
;;;172    
;;;173    
;;;174    	if(X_acc.got_acc_num-X_acc.used_acc_num >= MMA845X_X_ACC_BUF)
00006c  4a2e              LDR      r2,|L16.296|
00006e  e9d21000          LDRD     r1,r0,[r2,#0]
000072  1a08              SUBS     r0,r1,r0
000074  42b0              CMP      r0,r6
000076  d21f              BCS      |L16.184|
;;;175    	{
;;;176    		return;
;;;177    	}else{
;;;178    	X_acc.acc_buf[X_acc.got_acc_num & (MMA845X_X_ACC_BUF-1)] = x_temp;
000078  f3c10109          UBFX     r1,r1,#0,#10
00007c  eb020141          ADD      r1,r2,r1,LSL #1
000080  f9b50002          LDRSH    r0,[r5,#2]  ; x_temp
000084  8108              STRH     r0,[r1,#8]
;;;179    	X_acc.got_acc_num++;
000086  6811              LDR      r1,[r2,#0]  ; X_acc
000088  1c49              ADDS     r1,r1,#1
;;;180    	}
;;;181    	resutl_caculate(x_temp,1);
00008a  6011              STR      r1,[r2,#0]  ; X_acc
00008c  2101              MOVS     r1,#1
00008e  f7fffffe          BL       resutl_caculate
;;;182    
;;;183    
;;;184    	if(Y_acc.got_acc_num-Y_acc.used_acc_num >= MMA845X_Y_ACC_BUF)
000092  4a26              LDR      r2,|L16.300|
000094  e9d21000          LDRD     r1,r0,[r2,#0]
000098  1a08              SUBS     r0,r1,r0
00009a  42b0              CMP      r0,r6
00009c  d20c              BCS      |L16.184|
;;;185    	{
;;;186    		return;
;;;187    	}else{
;;;188    		Y_acc.acc_buf[Y_acc.got_acc_num & (MMA845X_Y_ACC_BUF-1)] = y_temp;
00009e  f3c10109          UBFX     r1,r1,#0,#10
0000a2  eb020141          ADD      r1,r2,r1,LSL #1
0000a6  f9b50004          LDRSH    r0,[r5,#4]  ; y_temp
0000aa  8108              STRH     r0,[r1,#8]
;;;189    		Y_acc.got_acc_num++;
0000ac  6811              LDR      r1,[r2,#0]  ; Y_acc
0000ae  1c49              ADDS     r1,r1,#1
;;;190    	}
;;;191    	resutl_caculate(y_temp,2);
0000b0  6011              STR      r1,[r2,#0]  ; Y_acc
0000b2  2102              MOVS     r1,#2
0000b4  f7fffffe          BL       resutl_caculate
                  |L16.184|
;;;192    	
;;;193    }
0000b8  bdfe              POP      {r1-r7,pc}
                  |L16.186|
0000ba  4e1d              LDR      r6,|L16.304|
0000bc  4f1d              LDR      r7,|L16.308|
0000be  68e9              LDR      r1,[r5,#0xc]          ;153  ; start_stop
0000c0  b1a1              CBZ      r1,|L16.236|
0000c2  6900              LDR      r0,[r0,#0x10]         ;159  ; xyz_pars
0000c4  f7fffffe          BL       __aeabi_f2d
0000c8  4632              MOV      r2,r6                 ;159
0000ca  463b              MOV      r3,r7                 ;159
0000cc  f7fffffe          BL       __aeabi_dmul
0000d0  4605              MOV      r5,r0                 ;159
0000d2  460e              MOV      r6,r1                 ;159
0000d4  f4044000          AND      r0,r4,#0x8000         ;159
0000d8  f3c4018c          UBFX     r1,r4,#2,#13          ;159
0000dc  4308              ORRS     r0,r0,r1              ;159
0000de  f7fffffe          BL       __aeabi_ui2d
0000e2  462a              MOV      r2,r5                 ;159
0000e4  4633              MOV      r3,r6                 ;159
0000e6  f7fffffe          BL       __aeabi_cdcmple
0000ea  bdfe              POP      {r1-r7,pc}
                  |L16.236|
0000ec  68c0              LDR      r0,[r0,#0xc]          ;155  ; xyz_pars
0000ee  f7fffffe          BL       __aeabi_f2d
0000f2  4632              MOV      r2,r6                 ;155
0000f4  463b              MOV      r3,r7                 ;155
0000f6  f7fffffe          BL       __aeabi_dmul
0000fa  4606              MOV      r6,r0                 ;155
0000fc  460f              MOV      r7,r1                 ;155
0000fe  f4044000          AND      r0,r4,#0x8000         ;155
000102  f3c4018c          UBFX     r1,r4,#2,#13          ;155
000106  4308              ORRS     r0,r0,r1              ;155
000108  f7fffffe          BL       __aeabi_ui2d
00010c  463b              MOV      r3,r7                 ;155
00010e  4632              MOV      r2,r6                 ;155
000110  f7fffffe          BL       __aeabi_cdcmple
000114  f04f0001          MOV      r0,#1                 ;156
000118  60e8              STR      r0,[r5,#0xc]          ;156  ; start_stop
00011a  bdfe              POP      {r1-r7,pc}
;;;194    
                          ENDP

                  |L16.284|
                          DCD      ||.data||
                  |L16.288|
                          DCD      xyz_pars
                  |L16.292|
                          DCD      ||area_number.23||
                  |L16.296|
                          DCD      ||area_number.23||+0x828
                  |L16.300|
                          DCD      ||area_number.23||+0x1050
                  |L16.304|
                          DCD      0xcccccccd
                  |L16.308|
                          DCD      0x3feccccc

                          AREA ||i.get_from_fifo||, CODE, READONLY, ALIGN=1

                  get_from_fifo PROC
;;;9      
;;;10     char get_from_fifo(	short* fifo_buf,short* out_buf,int lenth)
000000  4770              BX       lr
;;;11     {
;;;12     // get_za_data(out_buf, lenth);
;;;13     }
;;;14     
                          ENDP


                          AREA ||i.put_head||, CODE, READONLY, ALIGN=1

                  put_head PROC
;;;26     
;;;27     char put_head(short* in_buf, short* base_buf)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;29     	memcpy(base_buf,base_buf+(BASE_SIZE/2)+1,BASE_SIZE/2);
000006  221f              MOVS     r2,#0x1f
000008  3140              ADDS     r1,r1,#0x40
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_memcpy
;;;30     	memcpy(base_buf+(BASE_SIZE/2),in_buf,BASE_SIZE+1);
000010  4629              MOV      r1,r5
000012  f104003e          ADD      r0,r4,#0x3e
000016  e8bd4070          POP      {r4-r6,lr}
00001a  2240              MOVS     r2,#0x40
00001c  f7ffbffe          B.W      __aeabi_memcpy
;;;31     }
;;;32     
                          ENDP


                          AREA ||i.resutl_caculate||, CODE, READONLY, ALIGN=2

                  resutl_caculate PROC
;;;653    // x - 1 y - 2 z - 3
;;;654    void resutl_caculate(signed short data,int xyz)
000000  b570              PUSH     {r4-r6,lr}
;;;655    {
;;;656    	unsigned short abs_data;
;;;657    	float get_acc;
;;;658    	float v_z;
;;;659    
;;;660    	unsigned short in;
;;;661    
;;;662    	WM_MESSAGE * pMsg;
;;;663    
;;;664    	static long current_count;
;;;665    
;;;666    	abs_data = abs(data);
000002  1e02              SUBS     r2,r0,#0
000004  da00              BGE      |L19.8|
000006  4242              RSBS     r2,r0,#0
                  |L19.8|
000008  b292              UXTH     r2,r2
;;;667    
;;;668    	if(xyz == 3)
00000a  2903              CMP      r1,#3
00000c  d00b              BEQ      |L19.38|
;;;669    	{
;;;670    	   if(data >= 0)
;;;671    	   {
;;;672    			if(data > Z_acc.acc_max)
;;;673    			{
;;;674    		    Z_acc.acc_max = data;
;;;675    	        Z_acc.acc_ave_add += data;
;;;676    		    Z_acc.acc_time++;
;;;677    			}
;;;678    	   }else{
;;;679    			if(data < Z_acc.dec_max)
;;;680    			{
;;;681    			Z_acc.dec_max = data;
;;;682    			Z_acc.dec_ave_add += data;
;;;683    			Z_acc.dec_time++;
;;;684    			}
;;;685    	   }
;;;686    	   if(abs_data > Z_acc.acc_dec_abs_max)
;;;687    	   {
;;;688    			Z_acc.acc_dec_abs_max = abs_data;
;;;689    	   }
;;;690    
;;;691    	if(xyz_pars.auto_sel)
;;;692    	{
;;;693    	   get_acc = GET_ACC(Z_acc.acc_ave_add + Z_acc.dec_ave_add);
;;;694    
;;;695    	   v_z = get_acc*(Z_acc.acc_time + Z_acc.dec_time -1);// >>2 
;;;696    
;;;697    	   if(v_z > Z_acc.v_max)
;;;698    	   {
;;;699    		   Z_acc.v_max = v_z;
;;;700    	   }else{
;;;701    		   if(v_z <= (Z_acc.v_max/2)&&(( Z_acc.dec_time + Z_acc.acc_time)> 50))
;;;702    		   {
;;;703    				if(v_z <= STOP_START_SPEED_END)
;;;704    				{
;;;705    					if(current_count == 0)
;;;706    					{
;;;707    						current_count = Z_acc.acc_time + Z_acc.dec_time - 1;
;;;708    					}
;;;709    					if((Z_acc.acc_time + Z_acc.dec_time - 1 - current_count)>= STOP_GET_TIMES)
;;;710    					{
;;;711    						OnButtonStopClicked(pMsg);
;;;712    					}
;;;713    				}
;;;714    		   }
;;;715    	   }
;;;716    	}
;;;717    
;;;718    	}else if(xyz == 2){
00000e  2902              CMP      r1,#2
000010  d07e              BEQ      |L19.272|
;;;719    	   if(abs_data > Y_acc.acc_dec_abs_max)
;;;720    	   {
;;;721    			Y_acc.acc_dec_abs_max = abs_data;
;;;722    	   }
;;;723    	}else if(xyz == 1){
000012  2901              CMP      r1,#1
000014  d106              BNE      |L19.36|
;;;724    	   if(abs_data > X_acc.acc_dec_abs_max)
000016  4844              LDR      r0,|L19.296|
                  |L19.24|
000018  f8d01818          LDR      r1,[r0,#0x818]        ;719  ; Y_acc
00001c  4291              CMP      r1,r2                 ;719
00001e  d201              BCS      |L19.36|
000020  f8c02818          STR      r2,[r0,#0x818]        ;721  ; Y_acc
                  |L19.36|
;;;725    	   {
;;;726    			X_acc.acc_dec_abs_max = abs_data;
;;;727    	   }
;;;728    	}
;;;729    
;;;730    
;;;731    }
000024  bd70              POP      {r4-r6,pc}
                  |L19.38|
000026  4c41              LDR      r4,|L19.300|
000028  2800              CMP      r0,#0                 ;670
00002a  db10              BLT      |L19.78|
00002c  f9b41808          LDRSH    r1,[r4,#0x808]        ;672  ; Z_acc
000030  4281              CMP      r1,r0                 ;672
000032  da1c              BGE      |L19.110|
000034  f6040408          ADD      r4,r4,#0x808          ;672
000038  8020              STRH     r0,[r4,#0]            ;674
00003a  8861              LDRH     r1,[r4,#2]            ;675  ; Z_acc
00003c  4408              ADD      r0,r0,r1              ;675
00003e  8060              STRH     r0,[r4,#2]            ;675
000040  6860              LDR      r0,[r4,#4]            ;676  ; Z_acc
000042  f1000001          ADD      r0,r0,#1              ;676
000046  6060              STR      r0,[r4,#4]            ;676  ; Z_acc
000048  f6a40408          SUB      r4,r4,#0x808          ;676
00004c  e00f              B        |L19.110|
                  |L19.78|
00004e  f9b41810          LDRSH    r1,[r4,#0x810]        ;679  ; Z_acc
000052  4281              CMP      r1,r0                 ;679
000054  dd0b              BLE      |L19.110|
000056  f5046401          ADD      r4,r4,#0x810          ;679
00005a  8020              STRH     r0,[r4,#0]            ;681
00005c  8861              LDRH     r1,[r4,#2]            ;682  ; Z_acc
00005e  4408              ADD      r0,r0,r1              ;682
000060  8060              STRH     r0,[r4,#2]            ;682
000062  6860              LDR      r0,[r4,#4]            ;683  ; Z_acc
000064  f1000001          ADD      r0,r0,#1              ;683
000068  6060              STR      r0,[r4,#4]            ;683  ; Z_acc
00006a  f5a46401          SUB      r4,r4,#0x810          ;683
                  |L19.110|
00006e  f8d40818          LDR      r0,[r4,#0x818]        ;686  ; Z_acc
000072  4290              CMP      r0,r2                 ;686
000074  d201              BCS      |L19.122|
000076  f8c42818          STR      r2,[r4,#0x818]        ;688  ; Z_acc
                  |L19.122|
00007a  482d              LDR      r0,|L19.304|
00007c  6880              LDR      r0,[r0,#8]            ;691  ; xyz_pars
00007e  2800              CMP      r0,#0                 ;691
000080  d0d0              BEQ      |L19.36|
000082  f9b40812          LDRSH    r0,[r4,#0x812]        ;693  ; Z_acc
000086  f7fffffe          BL       __aeabi_i2d
00008a  4605              MOV      r5,r0                 ;693
00008c  460e              MOV      r6,r1                 ;693
00008e  f9b4080a          LDRSH    r0,[r4,#0x80a]        ;693  ; Z_acc
000092  f7fffffe          BL       __aeabi_i2d
000096  4a27              LDR      r2,|L19.308|
000098  4b27              LDR      r3,|L19.312|
00009a  f7fffffe          BL       __aeabi_dmul
00009e  462a              MOV      r2,r5                 ;693
0000a0  4633              MOV      r3,r6                 ;693
0000a2  f7fffffe          BL       __aeabi_dadd
0000a6  f7fffffe          BL       __aeabi_d2f
0000aa  4605              MOV      r5,r0                 ;693
0000ac  f8d41814          LDR      r1,[r4,#0x814]        ;695  ; Z_acc
0000b0  f8d4080c          LDR      r0,[r4,#0x80c]        ;695  ; Z_acc
0000b4  4408              ADD      r0,r0,r1              ;695
0000b6  1e40              SUBS     r0,r0,#1              ;695
0000b8  f7fffffe          BL       __aeabi_ui2f
0000bc  4629              MOV      r1,r5                 ;695
0000be  f7fffffe          BL       __aeabi_fmul
0000c2  4605              MOV      r5,r0                 ;695
0000c4  f8d41824          LDR      r1,[r4,#0x824]        ;697  ; Z_acc
0000c8  f7fffffe          BL       __aeabi_cfrcmple
0000cc  d202              BCS      |L19.212|
0000ce  f8c45824          STR      r5,[r4,#0x824]        ;699  ; Z_acc
                  |L19.210|
0000d2  bd70              POP      {r4-r6,pc}
                  |L19.212|
0000d4  f04f31ff          MOV      r1,#0xffffffff        ;701
0000d8  f8d40824          LDR      r0,[r4,#0x824]        ;701  ; Z_acc
0000dc  f7fffffe          BL       __ARM_scalbnf
0000e0  4629              MOV      r1,r5                 ;701
0000e2  f7fffffe          BL       __aeabi_cfrcmple
0000e6  d8f4              BHI      |L19.210|
0000e8  f8d4180c          LDR      r1,[r4,#0x80c]        ;701  ; Z_acc
0000ec  f8d40814          LDR      r0,[r4,#0x814]        ;701  ; Z_acc
0000f0  1842              ADDS     r2,r0,r1              ;701
0000f2  2a32              CMP      r2,#0x32              ;701
0000f4  d9ed              BLS      |L19.210|
0000f6  4a11              LDR      r2,|L19.316|
0000f8  4295              CMP      r5,r2                 ;703
0000fa  dcea              BGT      |L19.210|
0000fc  4a10              LDR      r2,|L19.320|
0000fe  6913              LDR      r3,[r2,#0x10]         ;705  ; current_count
000100  b913              CBNZ     r3,|L19.264|
000102  180b              ADDS     r3,r1,r0              ;707
000104  1e5b              SUBS     r3,r3,#1              ;707
000106  6113              STR      r3,[r2,#0x10]         ;707  ; current_count
                  |L19.264|
000108  4408              ADD      r0,r0,r1              ;709
00010a  1ac0              SUBS     r0,r0,r3              ;709
00010c  1e40              SUBS     r0,r0,#1              ;709
00010e  e000              B        |L19.274|
                  |L19.272|
000110  e007              B        |L19.290|
                  |L19.274|
000112  f5b06fc8          CMP      r0,#0x640             ;709
000116  d3dc              BCC      |L19.210|
000118  e8bd4070          POP      {r4-r6,lr}            ;711
00011c  4638              MOV      r0,r7                 ;711
00011e  f7ffbffe          B.W      OnButtonStopClicked
                  |L19.290|
000122  4808              LDR      r0,|L19.324|
000124  e778              B        |L19.24|
;;;732    
                          ENDP

000126  0000              DCW      0x0000
                  |L19.296|
                          DCD      ||area_number.23||+0x828
                  |L19.300|
                          DCD      ||area_number.23||
                  |L19.304|
                          DCD      xyz_pars
                  |L19.308|
                          DCD      0x92a73711
                  |L19.312|
                          DCD      0x3fcea001
                  |L19.316|
                          DCD      0x47ea6000
                  |L19.320|
                          DCD      ||.data||
                  |L19.324|
                          DCD      ||area_number.23||+0x1050

                          AREA ||i.test_resutl_caculate||, CODE, READONLY, ALIGN=2

                  test_resutl_caculate PROC
;;;806    
;;;807    void test_resutl_caculate()
000000  4a07              LDR      r2,|L20.32|
;;;808    {
;;;809    	static signed short i;
;;;810    
;;;811    	i++;
000002  8910              LDRH     r0,[r2,#8]  ; i
000004  1c40              ADDS     r0,r0,#1
000006  b200              SXTH     r0,r0
;;;812    	if(i == 5000)
000008  f5a05198          SUB      r1,r0,#0x1300
00000c  8110              STRH     r0,[r2,#8]            ;811
00000e  3988              SUBS     r1,r1,#0x88
000010  d101              BNE      |L20.22|
;;;813    	i = 0;
000012  2000              MOVS     r0,#0
000014  8110              STRH     r0,[r2,#8]
                  |L20.22|
;;;814    
;;;815    	resutl_caculate(i,3);
000016  2103              MOVS     r1,#3
000018  f9b20008          LDRSH    r0,[r2,#8]  ; i
00001c  f7ffbffe          B.W      resutl_caculate
;;;816    
;;;817    }
;;;818    
                          ENDP

                  |L20.32|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  base_buf
                          %        126

                          AREA ||area_number.23||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.bss||
                  Z_acc
                          %        2088
                  X_acc
                          %        2088
                  Y_acc
                          %        2088

                          AREA ||.data||, DATA, ALIGN=2

                  z_temp
000000  0000              DCB      0x00,0x00
                  x_temp
000002  0000              DCB      0x00,0x00
                  y_temp
000004  0000              DCB      0x00,0x00
                  temp
000006  0000              DCB      0x00,0x00
                  i
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  start_stop
                          DCD      0x00000000
                  current_count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\gui_app\\MMA8452Q.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_MMA8452Q_c_cfdb83e1____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_MMA8452Q_c_cfdb83e1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_MMA8452Q_c_cfdb83e1____REVSH|
#line 128
|__asm___10_MMA8452Q_c_cfdb83e1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |delay_asm1|
#line 211 "Source\\gui_app\\MMA8452Q.c"
|delay_asm1| PROC
#line 212

 subs r0, #1 
 bne delay_asm1
 bx lr
	ENDP

;*** End   embedded assembler ***
