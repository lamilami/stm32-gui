; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\ctpm.o --depend=.\ouput\ctpm.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\ctpm.crf Source\BSP\CTPM.c]
                          THUMB

                          AREA ||i.IIC_CTPM_ReadByte||, CODE, READONLY, ALIGN=2

                  IIC_CTPM_ReadByte PROC
;;;52     
;;;53     u8 IIC_CTPM_ReadByte (etI2cAck ack){
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;54     
;;;55        	u8 mask,rxByte=0;
;;;56     	IIC_CTPM_SDA=HIGH; 
000004  4e18              LDR      r6,|L1.104|
000006  2500              MOVS     r5,#0                 ;55
000008  2701              MOVS     r7,#1
00000a  4681              MOV      r9,r0                 ;53
00000c  f8c6719c          STR      r7,[r6,#0x19c]
;;;57     	delay_asm1(6);
000010  2006              MOVS     r0,#6
000012  f7fffffe          BL       delay_asm1
;;;58     	for (mask=0x80; mask>0; mask>>=1) 
000016  2480              MOVS     r4,#0x80
000018  f04f0800          MOV      r8,#0                 ;55
                  |L1.28|
;;;59     	{ 
;;;60     	    IIC_CTPM_SCL=HIGH; //start clock on SCL-line
00001c  f8c67198          STR      r7,[r6,#0x198]
;;;61     		delay_asm1(6*3);
000020  2012              MOVS     r0,#0x12
000022  f7fffffe          BL       delay_asm1
;;;62     		if(READ_CTPM_SDA==1) rxByte=(rxByte | mask); 
000026  f8d6011c          LDR      r0,[r6,#0x11c]
00002a  2801              CMP      r0,#1
00002c  d100              BNE      |L1.48|
00002e  4325              ORRS     r5,r5,r4
                  |L1.48|
;;;63     		IIC_CTPM_SCL=LOW;
000030  f8c68198          STR      r8,[r6,#0x198]
;;;64     		delay_asm1(6*3);
000034  2012              MOVS     r0,#0x12
000036  f7fffffe          BL       delay_asm1
00003a  0864              LSRS     r4,r4,#1              ;58
00003c  d1ee              BNE      |L1.28|
00003e  f50676cc          ADD      r6,r6,#0x198          ;58
;;;65     	}
;;;66     	IIC_CTPM_SDA=ack; 
000042  f8c69004          STR      r9,[r6,#4]
;;;67     	delay_asm1(6);
000046  f04f0006          MOV      r0,#6
00004a  f7fffffe          BL       delay_asm1
;;;68     	IIC_CTPM_SCL=HIGH; //clk #9 for ack
00004e  6037              STR      r7,[r6,#0]
;;;69     	delay_asm1(6*3);
000050  2012              MOVS     r0,#0x12
000052  f7fffffe          BL       delay_asm1
;;;70     	IIC_CTPM_SCL=LOW;
000056  f8c68000          STR      r8,[r6,#0]
;;;71     	IIC_CTPM_SDA=HIGH;
00005a  6077              STR      r7,[r6,#4]
;;;72     	delay_asm1(6*3);
00005c  2012              MOVS     r0,#0x12
00005e  f7fffffe          BL       delay_asm1
;;;73     	return rxByte; 
000062  4628              MOV      r0,r5
;;;74     }
000064  e8bd87f0          POP      {r4-r10,pc}
;;;75     
                          ENDP

                  |L1.104|
                          DCD      0x42218000

                          AREA ||i.IIC_CTPM_RegRead||, CODE, READONLY, ALIGN=1

                  IIC_CTPM_RegRead PROC
;;;85     
;;;86     u8 IIC_CTPM_RegRead(u8 reg){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;87     
;;;88       u8 b;
;;;89       IIC_CTPM_Start();                                  
000004  f7fffffe          BL       IIC_CTPM_Start
;;;90       IIC_CTPM_WriteByte(DEVICE_ADD);                 
000008  2070              MOVS     r0,#0x70
00000a  f7fffffe          BL       IIC_CTPM_WriteByte
;;;91       IIC_CTPM_WriteByte(reg);                        
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       IIC_CTPM_WriteByte
;;;92       IIC_CTPM_Start();                                               
000014  f7fffffe          BL       IIC_CTPM_Start
;;;93       b = IIC_CTPM_ReadByte(NO_ACK);                                                
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       IIC_CTPM_ReadByte
00001e  4604              MOV      r4,r0
;;;94       IIC_CTPM_Stop();                                 
000020  f7fffffe          BL       IIC_CTPM_Stop
;;;95       return b;
000024  4620              MOV      r0,r4
;;;96     
;;;97     }
000026  bd10              POP      {r4,pc}
;;;98     
                          ENDP


                          AREA ||i.IIC_CTPM_RegWrite||, CODE, READONLY, ALIGN=1

                  IIC_CTPM_RegWrite PROC
;;;75     
;;;76     void IIC_CTPM_RegWrite(u8 reg,u8 val)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;78       IIC_CTPM_Start();                                  
000006  f7fffffe          BL       IIC_CTPM_Start
;;;79       IIC_CTPM_WriteByte(DEVICE_ADD);                      
00000a  2070              MOVS     r0,#0x70
00000c  f7fffffe          BL       IIC_CTPM_WriteByte
;;;80       IIC_CTPM_WriteByte(reg);                         
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       IIC_CTPM_WriteByte
;;;81       IIC_CTPM_WriteByte(val);                         
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IIC_CTPM_WriteByte
;;;82       IIC_CTPM_Stop(); 
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      IIC_CTPM_Stop
;;;83     }
;;;84     
                          ENDP


                          AREA ||i.IIC_CTPM_Start||, CODE, READONLY, ALIGN=2

                  IIC_CTPM_Start PROC
;;;4      
;;;5      void IIC_CTPM_Start (void)
000000  b570              PUSH     {r4-r6,lr}
;;;6      {
;;;7      	IIC_CTPM_SDA=HIGH;
000002  4c09              LDR      r4,|L4.40|
000004  2001              MOVS     r0,#1
000006  6060              STR      r0,[r4,#4]
;;;8      	IIC_CTPM_SCL=HIGH;
000008  6020              STR      r0,[r4,#0]
;;;9      	delay_asm1(6*2);
00000a  f04f000c          MOV      r0,#0xc
00000e  f7fffffe          BL       delay_asm1
;;;10     	IIC_CTPM_SDA=LOW;
000012  2500              MOVS     r5,#0
000014  6065              STR      r5,[r4,#4]
;;;11     	delay_asm1(6*2);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       delay_asm1
;;;12     	IIC_CTPM_SCL=LOW;
00001c  6025              STR      r5,[r4,#0]
;;;13     	delay_asm1(6);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  2006              MOVS     r0,#6
000024  f7ffbffe          B.W      delay_asm1
;;;14     }
;;;15     
                          ENDP

                  |L4.40|
                          DCD      0x42218198

                          AREA ||i.IIC_CTPM_Stop||, CODE, READONLY, ALIGN=2

                  IIC_CTPM_Stop PROC
;;;16     
;;;17     void IIC_CTPM_Stop(void){
000000  b570              PUSH     {r4-r6,lr}
;;;18     
;;;19       	IIC_CTPM_SDA=LOW;
000002  4c09              LDR      r4,|L5.40|
000004  2000              MOVS     r0,#0
000006  6060              STR      r0,[r4,#4]
;;;20     	IIC_CTPM_SCL=LOW;
000008  6020              STR      r0,[r4,#0]
;;;21     	delay_asm1(6*2);
00000a  f04f000c          MOV      r0,#0xc
00000e  f7fffffe          BL       delay_asm1
;;;22     	IIC_CTPM_SCL=HIGH;
000012  2501              MOVS     r5,#1
000014  6025              STR      r5,[r4,#0]
;;;23     	delay_asm1(6*2);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       delay_asm1
;;;24     	IIC_CTPM_SDA=HIGH;
00001c  6065              STR      r5,[r4,#4]
;;;25     	delay_asm1(6*4);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  2018              MOVS     r0,#0x18
000024  f7ffbffe          B.W      delay_asm1
;;;26     
;;;27     }
;;;28     
                          ENDP

                  |L5.40|
                          DCD      0x42218198

                          AREA ||i.IIC_CTPM_WriteByte||, CODE, READONLY, ALIGN=2

                  IIC_CTPM_WriteByte PROC
;;;29     
;;;30     u8 IIC_CTPM_WriteByte (u8 txByte){
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;31     
;;;32     	    u8 mask,erro=0;
000004  f04f0800          MOV      r8,#0
;;;33         for (mask=0x80; mask>0; mask>>=1) 
000008  2480              MOVS     r4,#0x80
;;;34         { 
;;;35     	    if ((mask & txByte) == 0) IIC_CTPM_SDA=LOW;
00000a  4d18              LDR      r5,|L6.108|
00000c  4681              MOV      r9,r0                 ;30
00000e  4647              MOV      r7,r8                 ;32
;;;36     		else IIC_CTPM_SDA=HIGH;
000010  2601              MOVS     r6,#1
                  |L6.18|
000012  ea140f09          TST      r4,r9                 ;35
000016  d01c              BEQ      |L6.82|
000018  f8c5619c          STR      r6,[r5,#0x19c]
                  |L6.28|
;;;37     		delay_asm1(6);
00001c  2006              MOVS     r0,#6
00001e  f7fffffe          BL       delay_asm1
;;;38     		IIC_CTPM_SCL=HIGH; 
000022  f8c56198          STR      r6,[r5,#0x198]
;;;39     		delay_asm1(6*3);
000026  2012              MOVS     r0,#0x12
000028  f7fffffe          BL       delay_asm1
;;;40     		IIC_CTPM_SCL=LOW;
00002c  f8c57198          STR      r7,[r5,#0x198]
;;;41     		delay_asm1(6*3);
000030  2012              MOVS     r0,#0x12
000032  f7fffffe          BL       delay_asm1
000036  0864              LSRS     r4,r4,#1              ;33
000038  d1eb              BNE      |L6.18|
;;;42         }
;;;43         IIC_CTPM_SDA=HIGH; //release SDA-line
00003a  f8c5619c          STR      r6,[r5,#0x19c]
;;;44         IIC_CTPM_SCL=HIGH; //clk #9 for ack
00003e  f8c56198          STR      r6,[r5,#0x198]
;;;45         delay_asm1(6*3);
000042  2012              MOVS     r0,#0x12
000044  f7fffffe          BL       delay_asm1
;;;46     	if(READ_CTPM_SDA==HIGH) erro=ACK_ERROR;
000048  f8d5011c          LDR      r0,[r5,#0x11c]
00004c  2801              CMP      r0,#1
00004e  d003              BEQ      |L6.88|
000050  e004              B        |L6.92|
                  |L6.82|
000052  f8c5719c          STR      r7,[r5,#0x19c]        ;35
000056  e7e1              B        |L6.28|
                  |L6.88|
000058  f04f0801          MOV      r8,#1
                  |L6.92|
;;;47         IIC_CTPM_SCL=LOW;
00005c  f8c57198          STR      r7,[r5,#0x198]
;;;48     	delay_asm1(6*3);
000060  2012              MOVS     r0,#0x12
000062  f7fffffe          BL       delay_asm1
;;;49         return erro; //return error code
000066  4640              MOV      r0,r8
;;;50     }
000068  e8bd87f0          POP      {r4-r10,pc}
;;;51     
                          ENDP

                  |L6.108|
                          DCD      0x42218000

;*** Start embedded assembler ***

#line 1 "Source\\BSP\\CTPM.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_CTPM_c_e77cdac5____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_CTPM_c_e77cdac5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_CTPM_c_e77cdac5____REVSH|
#line 128
|__asm___6_CTPM_c_e77cdac5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
