; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\rdprint.o --depend=.\ouput\rdprint.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\rdprint.crf Source\BSP\rdprint.c]
                          THUMB

                          AREA ||i.print_ch||, CODE, READONLY, ALIGN=1

                  print_ch PROC
;;;19     
;;;20     void print_ch(int loc, char* str_ch)
000000  b570              PUSH     {r4-r6,lr}
;;;21     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;22       int i,j;
;;;23       COMM_CHINESE(0);
000006  201b              MOVS     r0,#0x1b
000008  f7fffffe          BL       rdprint
00000c  2038              MOVS     r0,#0x38
00000e  f7fffffe          BL       rdprint
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       rdprint
;;;24       if(loc > -1)
000018  2c00              CMP      r4,#0
00001a  db0b              BLT      |L1.52|
;;;25       {
;;;26       COMM_F(0,loc);
00001c  201b              MOVS     r0,#0x1b
00001e  f7fffffe          BL       rdprint
000022  2066              MOVS     r0,#0x66
000024  f7fffffe          BL       rdprint
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       rdprint
00002e  b2e0              UXTB     r0,r4
000030  f7fffffe          BL       rdprint
                  |L1.52|
;;;27       }
;;;28       j = strlen(str_ch);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       strlen
00003a  4605              MOV      r5,r0
;;;29       for(i=0;i<j;i++)
00003c  2400              MOVS     r4,#0
00003e  e003              B        |L1.72|
                  |L1.64|
;;;30       {
;;;31        rdprint(str_ch[i]);
000040  5d30              LDRB     r0,[r6,r4]
000042  f7fffffe          BL       rdprint
000046  1c64              ADDS     r4,r4,#1              ;29
                  |L1.72|
000048  42ac              CMP      r4,r5                 ;29
00004a  dbf9              BLT      |L1.64|
;;;32       }
;;;33     }
00004c  bd70              POP      {r4-r6,pc}
;;;34     
                          ENDP


                          AREA ||i.print_custormer||, CODE, READONLY, ALIGN=2

                  print_custormer PROC
;;;65     
;;;66     void print_custormer()
000000  b500              PUSH     {lr}
;;;67     {
;;;68     	char cus[]={"客户信息:"};
000002  a22f              ADR      r2,|L2.192|
000004  b091              SUB      sp,sp,#0x44           ;67
000006  ca07              LDM      r2,{r0-r2}
000008  ab08              ADD      r3,sp,#0x20
;;;69     	char eser[]={"电梯序列号:"};
;;;70     	char epro[]={"电梯制造商:"};
;;;71     	char lmpro[]={"限速器制造商:"};
;;;72     	char lmser[]={"限速器序列号:"};
00000a  f10d0c10          ADD      r12,sp,#0x10
00000e  c307              STM      r3!,{r0-r2}           ;68
000010  a02e              ADR      r0,|L2.204|
000012  e9d01200          LDRD     r1,r2,[r0,#0]         ;69
000016  6880              LDR      r0,[r0,#8]            ;69
000018  910b              STR      r1,[sp,#0x2c]         ;69
00001a  e9cd200c          STRD     r2,r0,[sp,#0x30]      ;69
00001e  a02e              ADR      r0,|L2.216|
000020  e9d01200          LDRD     r1,r2,[r0,#0]         ;70
000024  6880              LDR      r0,[r0,#8]            ;70
000026  910e              STR      r1,[sp,#0x38]         ;70
000028  e9cd200f          STRD     r2,r0,[sp,#0x3c]      ;70
00002c  a02d              ADR      r0,|L2.228|
00002e  e890000e          LDM      r0,{r1-r3}            ;71
000032  68c0              LDR      r0,[r0,#0xc]          ;71
000034  e9cd1200          STRD     r1,r2,[sp,#0]
000038  e9cd3002          STRD     r3,r0,[sp,#8]         ;71
00003c  a02d              ADR      r0,|L2.244|
00003e  e890000e          LDM      r0,{r1-r3}
000042  68c0              LDR      r0,[r0,#0xc]
000044  9007              STR      r0,[sp,#0x1c]
000046  e8ac000e          STM      r12!,{r1-r3}
;;;73     
;;;74      
;;;75     	print_ch(0,cus);
00004a  a908              ADD      r1,sp,#0x20
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       print_ch
;;;76     	print_ch(0,custormer.custorm);
000052  492c              LDR      r1,|L2.260|
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       print_ch
;;;77     	COMM_LF;
00005a  200a              MOVS     r0,#0xa
00005c  f7fffffe          BL       rdprint
;;;78     
;;;79     	
;;;80     	print_ch(0,eser);
000060  a90b              ADD      r1,sp,#0x2c
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       print_ch
;;;81     	print_ch(0,custormer.series_no);
000068  4926              LDR      r1,|L2.260|
00006a  2000              MOVS     r0,#0
00006c  311e              ADDS     r1,r1,#0x1e
00006e  f7fffffe          BL       print_ch
;;;82     	COMM_LF;
000072  200a              MOVS     r0,#0xa
000074  f7fffffe          BL       rdprint
;;;83     
;;;84     	
;;;85     	print_ch(0,epro);
000078  a90e              ADD      r1,sp,#0x38
00007a  2000              MOVS     r0,#0
00007c  f7fffffe          BL       print_ch
;;;86     	print_ch(0,custormer.elevator_productor);
000080  4920              LDR      r1,|L2.260|
000082  2000              MOVS     r0,#0
000084  312d              ADDS     r1,r1,#0x2d
000086  f7fffffe          BL       print_ch
;;;87     	COMM_LF;
00008a  200a              MOVS     r0,#0xa
00008c  f7fffffe          BL       rdprint
;;;88     
;;;89     
;;;90     	print_ch(0,lmpro);
000090  4669              MOV      r1,sp
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       print_ch
;;;91     	print_ch(0,custormer.limitor_productor);
000098  491a              LDR      r1,|L2.260|
00009a  2000              MOVS     r0,#0
00009c  314b              ADDS     r1,r1,#0x4b
00009e  f7fffffe          BL       print_ch
;;;92     	COMM_LF;
0000a2  200a              MOVS     r0,#0xa
0000a4  f7fffffe          BL       rdprint
;;;93     
;;;94     	
;;;95     	print_ch(0,lmser);
0000a8  a904              ADD      r1,sp,#0x10
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       print_ch
;;;96     	print_ch(0,custormer.limitor_series);
0000b0  4914              LDR      r1,|L2.260|
0000b2  2000              MOVS     r0,#0
0000b4  3169              ADDS     r1,r1,#0x69
0000b6  f7fffffe          BL       print_ch
;;;97     }
0000ba  b011              ADD      sp,sp,#0x44
0000bc  bd00              POP      {pc}
;;;98     
                          ENDP

0000be  0000              DCW      0x0000
                  |L2.192|
0000c0  bfcdbba7          DCB      191,205,187,167,208,197,207,162,":",0
0000c4  d0c5cfa2
0000c8  3a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L2.204|
0000cc  b5e7ccdd          DCB      181,231,204,221,208,242,193,208,186,197,":",0
0000d0  d0f2c1d0
0000d4  bac53a00
                  |L2.216|
0000d8  b5e7ccdd          DCB      181,231,204,221,214,198,212,236,201,204,":",0
0000dc  d6c6d4ec
0000e0  c9cc3a00
                  |L2.228|
0000e4  cfdecbd9          DCB      207,222,203,217,198,247,214,198,212,236,201,204,":",0
0000e8  c6f7d6c6
0000ec  d4ecc9cc
0000f0  3a00    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L2.244|
0000f4  cfdecbd9          DCB      207,222,203,217,198,247,208,242,193,208,186,197,":",0
0000f8  c6f7d0f2
0000fc  c1d0bac5
000100  3a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L2.260|
                          DCD      custormer

                          AREA ||i.print_data_time||, CODE, READONLY, ALIGN=2

                  print_data_time PROC
;;;54     
;;;55     void print_data_time(void)
000000  b500              PUSH     {lr}
;;;56     {
000002  b08d              SUB      sp,sp,#0x34
;;;57     	char buf[50];
;;;58     #ifndef WIN_SIM
;;;59       	RTC_Get_Time(&Tim);
000004  4807              LDR      r0,|L3.36|
000006  f7fffffe          BL       RTC_Get_Time
;;;60     	RTC_time_to_string(buf ,Tim);
00000a  4806              LDR      r0,|L3.36|
00000c  6801              LDR      r1,[r0,#0]  ; Tim
00000e  6842              LDR      r2,[r0,#4]  ; Tim
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       RTC_time_to_string
;;;61     	print_ch(0,buf);	
000016  4669              MOV      r1,sp
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       print_ch
;;;62     #endif
;;;63     
;;;64     }
00001e  b00d              ADD      sp,sp,#0x34
000020  bd00              POP      {pc}
;;;65     
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      Tim

                          AREA ||i.print_en||, CODE, READONLY, ALIGN=1

                  print_en PROC
;;;34     
;;;35     void print_en(int loc, char* str_en,int print_lenth)
000000  b570              PUSH     {r4-r6,lr}
;;;36     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;37        int i,j;
;;;38        COMM_CHINESE(7);
000008  201b              MOVS     r0,#0x1b
00000a  f7fffffe          BL       rdprint
00000e  2038              MOVS     r0,#0x38
000010  f7fffffe          BL       rdprint
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       rdprint
;;;39        if(loc > -1)
00001a  2c00              CMP      r4,#0
00001c  db0b              BLT      |L4.54|
;;;40        {
;;;41        COMM_F(0,loc);
00001e  201b              MOVS     r0,#0x1b
000020  f7fffffe          BL       rdprint
000024  2066              MOVS     r0,#0x66
000026  f7fffffe          BL       rdprint
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       rdprint
000030  b2e0              UXTB     r0,r4
000032  f7fffffe          BL       rdprint
                  |L4.54|
;;;42        }
;;;43        if(print_lenth < 0)
000036  2d00              CMP      r5,#0
000038  da03              BGE      |L4.66|
;;;44        {
;;;45        j = strlen(str_en);
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       strlen
000040  4605              MOV      r5,r0
                  |L4.66|
;;;46        }else{
;;;47        	j = print_lenth;
;;;48        }
;;;49        for(i=0;i<j;i++)
000042  2400              MOVS     r4,#0
000044  e003              B        |L4.78|
                  |L4.70|
;;;50        {
;;;51         rdprint(str_en[i]);
000046  5d30              LDRB     r0,[r6,r4]
000048  f7fffffe          BL       rdprint
00004c  1c64              ADDS     r4,r4,#1              ;49
                  |L4.78|
00004e  42ac              CMP      r4,r5                 ;49
000050  dbf9              BLT      |L4.70|
;;;52        }
;;;53     }
000052  bd70              POP      {r4-r6,pc}
;;;54     
                          ENDP


                          AREA ||i.rdprint||, CODE, READONLY, ALIGN=2

                  rdprint PROC
;;;4      
;;;5      void rdprint(char data)
000000  b510              PUSH     {r4,lr}
;;;6      {
;;;7      #ifndef WIN_SIM
;;;8        USART_SendData(USART1,data);
000002  4c0c              LDR      r4,|L5.52|
000004  4601              MOV      r1,r0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       USART_SendData
                  |L5.12|
;;;9        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
00000c  2180              MOVS     r1,#0x80
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L5.12|
000018  e005              B        |L5.38|
                  |L5.26|
;;;10       {
;;;11       }
;;;12       while(USART_ReceiveData(USART1) == PRINT_BUSY)
;;;13       {
;;;14       	OSTimeDlyHMSM(0,0,0,10);
00001a  2200              MOVS     r2,#0
00001c  230a              MOVS     r3,#0xa
00001e  4611              MOV      r1,r2
000020  4610              MOV      r0,r2
000022  f7fffffe          BL       OSTimeDlyHMSM
                  |L5.38|
000026  4620              MOV      r0,r4                 ;12
000028  f7fffffe          BL       USART_ReceiveData
00002c  2813              CMP      r0,#0x13              ;12
00002e  d0f4              BEQ      |L5.26|
;;;15       }
;;;16     #endif
;;;17     
;;;18     }
000030  bd10              POP      {r4,pc}
;;;19     
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x40013800

;*** Start embedded assembler ***

#line 1 "Source\\BSP\\rdprint.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_rdprint_c_rdprint____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_rdprint_c_rdprint____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_rdprint_c_rdprint____REVSH|
#line 128
|__asm___9_rdprint_c_rdprint____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
