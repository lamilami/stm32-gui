; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\gui_x_ucos.o --depend=.\ouput\gui_x_ucos.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\gui_x_ucos.crf Source\uCGUI\GUI_X_uCOS.c]
                          THUMB

                          AREA ||i.CheckInit||, CODE, READONLY, ALIGN=2

                  CheckInit PROC
;;;151    
;;;152    static void CheckInit(void)
000000  4804              LDR      r0,|L1.20|
;;;153    {
;;;154      if(KeyIsInited==DEF_FALSE)
000002  7801              LDRB     r1,[r0,#0]  ; KeyIsInited
000004  2900              CMP      r1,#0
000006  d103              BNE      |L1.16|
;;;155        {
;;;156          KeyIsInited = DEF_TRUE;
000008  2101              MOVS     r1,#1
00000a  7001              STRB     r1,[r0,#0]
;;;157          GUI_X_Init();
00000c  f7ffbffe          B.W      GUI_X_Init
                  |L1.16|
;;;158        }
;;;159    }
000010  4770              BX       lr
;;;160    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Delay||, CODE, READONLY, ALIGN=1

                  GUI_X_Delay PROC
;;;62     
;;;63     void GUI_X_Delay(int period)
000000  f44f717a          MOV      r1,#0x3e8
;;;64     {
;;;65       INT32U  ticks;
;;;66       ticks=(period*1000)/OS_TICKS_PER_SEC;
000004  4348              MULS     r0,r1,r0
000006  fbb0f0f1          UDIV     r0,r0,r1
;;;67       OSTimeDly((INT16U)ticks);
00000a  b280              UXTH     r0,r0
00000c  f7ffbffe          B.W      OSTimeDly
;;;68     }
;;;69     
                          ENDP


                          AREA ||i.GUI_X_ErrorOut||, CODE, READONLY, ALIGN=1

                  GUI_X_ErrorOut PROC
;;;209    
;;;210    void GUI_X_ErrorOut(const char *s)
000000  4770              BX       lr
;;;211    { 
;;;212    GUI_USE_PARA(s); 
;;;213    }
                          ENDP


                          AREA ||i.GUI_X_ExecIdle||, CODE, READONLY, ALIGN=1

                  GUI_X_ExecIdle PROC
;;;76     /*WM空闲时调用*/
;;;77     void GUI_X_ExecIdle(void) 
000000  2032              MOVS     r0,#0x32
;;;78     {
;;;79       //OS_X_Delay(1);
;;;80       OSTimeDly(50);
000002  f7ffbffe          B.W      OSTimeDly
;;;81     }
;;;82     
                          ENDP


                          AREA ||i.GUI_X_GetKey||, CODE, READONLY, ALIGN=2

                  GUI_X_GetKey PROC
;;;168    
;;;169    int GUI_X_GetKey(void)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
;;;171        int r;
;;;172        r = KeyPressed;
000002  4d04              LDR      r5,|L5.20|
;;;173        CheckInit();
000004  692c              LDR      r4,[r5,#0x10]  ; KeyPressed
000006  f7fffffe          BL       CheckInit
;;;174        KeyPressed = 0;
00000a  2000              MOVS     r0,#0
;;;175        return (r);
00000c  6128              STR      r0,[r5,#0x10]  ; KeyPressed
00000e  4620              MOV      r0,r4
;;;176    }
000010  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ||.data||

                          AREA ||i.GUI_X_GetTaskId||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTaskId PROC
;;;113    
;;;114    U32 GUI_X_GetTaskId(void)
000000  4802              LDR      r0,|L6.12|
;;;115    { 
;;;116      return ((U32)(OSTCBCur->OSTCBPrio));
000002  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000004  f890002a          LDRB     r0,[r0,#0x2a]
;;;117    }
000008  4770              BX       lr
;;;118    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      OSTCBCur

                          AREA ||i.GUI_X_GetTime||, CODE, READONLY, ALIGN=1

                  GUI_X_GetTime PROC
;;;57     
;;;58     int GUI_X_GetTime(void)
000000  f7ffbffe          B.W      OSTimeGet
;;;59     {
;;;60        return ((int)OSTimeGet());
;;;61     }
;;;62     
                          ENDP


                          AREA ||i.GUI_X_Init||, CODE, READONLY, ALIGN=2

                  GUI_X_Init PROC
;;;162    /*被GUI_Init()调用,用来初始化一些GUI运行之前需要用的硬件,如键盘或者鼠标之类的.如果不需要的话,可以为空*/
;;;163    void GUI_X_Init(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165      KeySem = OSSemCreate(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       OSSemCreate
000008  4901              LDR      r1,|L8.16|
00000a  60c8              STR      r0,[r1,#0xc]  ; KeySem
;;;166    }
00000c  bd10              POP      {r4,pc}
;;;167    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      ||.data||

                          AREA ||i.GUI_X_InitOS||, CODE, READONLY, ALIGN=2

                  GUI_X_InitOS PROC
;;;93     
;;;94     void GUI_X_InitOS (void)
000000  b510              PUSH     {r4,lr}
;;;95     { 
;;;96         DispSem = OSSemCreate(1);           //建立一个互斥型信号量
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       OSSemCreate
000008  4c03              LDR      r4,|L9.24|
;;;97       EventMbox = OSMboxCreate((void *)0);	//建立一个邮箱
00000a  6060              STR      r0,[r4,#4]  ; DispSem
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       OSMboxCreate
000012  60a0              STR      r0,[r4,#8]  ; EventMbox
;;;98     }
000014  bd10              POP      {r4,pc}
;;;99     
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Lock||, CODE, READONLY, ALIGN=2

                  GUI_X_Lock PROC
;;;100    
;;;101    void GUI_X_Lock(void)
000000  b508              PUSH     {r3,lr}
;;;102    { 
;;;103      INT8U err;
;;;104      OSSemPend(DispSem,0,&err);
000002  4803              LDR      r0,|L10.16|
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  6840              LDR      r0,[r0,#4]  ; DispSem
00000a  f7fffffe          BL       OSSemPend
;;;105    }
00000e  bd08              POP      {r3,pc}
;;;106    
                          ENDP

                  |L10.16|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Log||, CODE, READONLY, ALIGN=1

                  GUI_X_Log PROC
;;;199    
;;;200    void GUI_X_Log(const char *s) 
000000  4770              BX       lr
;;;201    { 
;;;202     GUI_USE_PARA(s); 
;;;203    }
;;;204    
                          ENDP


                          AREA ||i.GUI_X_SignalEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_SignalEvent PROC
;;;133    
;;;134    void GUI_X_SignalEvent(void)
000000  4802              LDR      r0,|L12.12|
;;;135    {
;;;136      (void)OSMboxPost(EventMbox,(void *)1);
000002  2101              MOVS     r1,#1
000004  6880              LDR      r0,[r0,#8]  ; EventMbox
000006  f7ffbffe          B.W      OSMboxPost
;;;137    }
;;;138    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      ||.data||

                          AREA ||i.GUI_X_StoreKey||, CODE, READONLY, ALIGN=2

                  GUI_X_StoreKey PROC
;;;193    
;;;194    void GUI_X_StoreKey(int k)
000000  4902              LDR      r1,|L13.12|
;;;195    {
;;;196        KeyPressed = k;
;;;197        OSSemPost(KeySem); //释放信号量
000002  6108              STR      r0,[r1,#0x10]  ; KeyPressed
000004  68c8              LDR      r0,[r1,#0xc]  ; KeySem
000006  f7ffbffe          B.W      OSSemPost
;;;198    }
;;;199    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Unlock||, CODE, READONLY, ALIGN=2

                  GUI_X_Unlock PROC
;;;107    
;;;108    void GUI_X_Unlock(void)
000000  4801              LDR      r0,|L14.8|
;;;109    { 
;;;110      OSSemPost(DispSem);
000002  6840              LDR      r0,[r0,#4]  ; DispSem
000004  f7ffbffe          B.W      OSSemPost
;;;111    }
;;;112    
                          ENDP

                  |L14.8|
                          DCD      ||.data||

                          AREA ||i.GUI_X_WaitEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitEvent PROC
;;;126    
;;;127    void GUI_X_WaitEvent(void)
000000  b508              PUSH     {r3,lr}
;;;128    {
;;;129       INT8U err;
;;;130       (void)OSMboxPend(EventMbox,0,&err);
000002  4803              LDR      r0,|L15.16|
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  6880              LDR      r0,[r0,#8]  ; EventMbox
00000a  f7fffffe          BL       OSMboxPend
;;;131    }
00000e  bd08              POP      {r3,pc}
;;;132    
                          ENDP

                  |L15.16|
                          DCD      ||.data||

                          AREA ||i.GUI_X_WaitKey||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitKey PROC
;;;178    
;;;179    int GUI_X_WaitKey(void)
000000  b538              PUSH     {r3-r5,lr}
;;;180    {
;;;181        int  r;
;;;182        INT8U  err;
;;;183        CheckInit();
000002  f7fffffe          BL       CheckInit
;;;184        if(KeyPressed==0)
000006  4c06              LDR      r4,|L16.32|
000008  6920              LDR      r0,[r4,#0x10]  ; KeyPressed
00000a  b920              CBNZ     r0,|L16.22|
;;;185          {
;;;186            OSSemPend(KeySem,0,&err); //等待信号量
00000c  466a              MOV      r2,sp
00000e  2100              MOVS     r1,#0
000010  68e0              LDR      r0,[r4,#0xc]  ; KeySem
000012  f7fffffe          BL       OSSemPend
                  |L16.22|
;;;187          }
;;;188        r= KeyPressed;
;;;189        KeyPressed = 0;
000016  2100              MOVS     r1,#0
000018  6920              LDR      r0,[r4,#0x10]  ; KeyPressed
00001a  6121              STR      r1,[r4,#0x10]  ; KeyPressed
;;;190        return (r);
;;;191    }
00001c  bd38              POP      {r3-r5,pc}
;;;192    
                          ENDP

00001e  0000              DCW      0x0000
                  |L16.32|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Warn||, CODE, READONLY, ALIGN=1

                  GUI_X_Warn PROC
;;;204    
;;;205    void GUI_X_Warn(const char *s) 
000000  4770              BX       lr
;;;206    {
;;;207     GUI_USE_PARA(s); 
;;;208    }
;;;209    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  KeyIsInited
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  DispSem
                          DCD      0x00000000
                  EventMbox
                          DCD      0x00000000
                  KeySem
                          DCD      0x00000000
                  KeyPressed
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\uCGUI\\GUI_X_uCOS.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_GUI_X_uCOS_c_f0e17fb0____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_GUI_X_uCOS_c_f0e17fb0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_GUI_X_uCOS_c_f0e17fb0____REVSH|
#line 128
|__asm___12_GUI_X_uCOS_c_f0e17fb0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
