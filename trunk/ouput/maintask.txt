; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\maintask.o --depend=.\ouput\maintask.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\maintask.crf Source\gui_app\MainTask.c]
                          THUMB

                          AREA ||i.MainTask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  MainTask PROC
;;;66     
;;;67     void MainTask(void) 
000000  b09a              SUB      sp,sp,#0x68
;;;68     {
;;;69     	unsigned int speed_start;
;;;70         float ratex,ratey;
;;;71     	WM_MESSAGE * pMsg;
;;;72     	WM_MESSAGE  Msg;
;;;73         char* str_state;
;;;74     	TSEPoint tsepoint;
;;;75         unsigned char sec,min,prec,i,k;
;;;76         unsigned int div;
;;;77     	char buf_exp[30] = {'2','0','1','2','-','1','2','-','1','2','-','1','2','-','3','0',':','2','4'};
000002  2220              MOVS     r2,#0x20
000004  49a5              LDR      r1,|L1.668|
000006  a80f              ADD      r0,sp,#0x3c
000008  f7fffffe          BL       __aeabi_memcpy4
;;;78     	char buf[50]="12-30";
00000c  49a3              LDR      r1,|L1.668|
00000e  2234              MOVS     r2,#0x34
000010  3120              ADDS     r1,r1,#0x20
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       __aeabi_memcpy4
;;;79     	char buf_c[7];
;;;80     	float j;
;;;81     
;;;82     	unsigned int speed;
;;;83     	float last_frequence,get_the_frequence;
;;;84         EMotWorkState mot_state;
;;;85     	WM_HWIN  hGraph = 0;
;;;86     	static int y,x;
;;;87     
;;;88     	div = 0;
;;;89     
;;;90     	disp_mult = 0;
000018  48a1              LDR      r0,|L1.672|
00001a  2400              MOVS     r4,#0
00001c  7004              STRB     r4,[r0,#0]
;;;91     	i = 0;
;;;92     
;;;93     	mot_t_cal.cal_flag  = 0;
00001e  48a1              LDR      r0,|L1.676|
000020  7004              STRB     r4,[r0,#0]
;;;94     
;;;95     
;;;96     
;;;97     #ifndef WIN_SIM
;;;98         sd_init();
000022  f7fffffe          BL       sd_init
;;;99     #endif
;;;100    
;;;101    	GUI_Init();
000026  f7fffffe          BL       GUI_Init
;;;102    //	GUI_CURSOR_Show();
;;;103    	h_home= NULL;
00002a  489f              LDR      r0,|L1.680|
;;;104    	h_pars = NULL;
;;;105    	h_cus =NULL;
;;;106    	flag_paint =0;
00002c  f8df8284          LDR      r8,|L1.692|
000030  8004              STRH     r4,[r0,#0]            ;103
000032  489e              LDR      r0,|L1.684|
000034  8004              STRH     r4,[r0,#0]            ;104
000036  489e              LDR      r0,|L1.688|
000038  8004              STRH     r4,[r0,#0]            ;105
;;;107    
;;;108    // 
;;;109    #if 0
;;;110      while(1)
;;;111      {
;;;112    #ifndef WIN_SIM
;;;113    	FT5x06_GetData(&x,&y);
;;;114    	OSTimeDlyHMSM(0,0,0,100);
;;;115    #endif
;;;116      }
;;;117    #endif
;;;118    
;;;119    
;;;120    
;;;121    //use dir data test EXP
;;;122    #if 0
;;;123    	{
;;;124    #ifndef WIN_SIM
;;;125    	print_data_time();
;;;126    	OSTimeDlyHMSM(0,0,2,0);
;;;127    #endif
;;;128    	}
;;;129    	while(1);
;;;130    #endif
;;;131    
;;;132    
;;;133    #if 0
;;;134     // LCD test 
;;;135     AD54XX_init();
;;;136     while(1)
;;;137     {
;;;138       set_data(20);
;;;139       OSTimeDlyHMSM(0,0,0,2);
;;;140       i++;
;;;141       if(i >= 21)
;;;142       i = 0;
;;;143     }
;;;144    #endif 
;;;145    
;;;146    
;;;147    
;;;148    #if 0
;;;149        while(1)
;;;150    	{
;;;151    	   GPIO_WriteBit(GPIOB, GPIO_Pin_7,1);
;;;152    	   GPIO_WriteBit(GPIOB, GPIO_Pin_6,1);
;;;153    	   OSTimeDlyHMSM(0,0,0,10);
;;;154    
;;;155    	   GPIO_WriteBit(GPIOB, GPIO_Pin_7,0);
;;;156    	   GPIO_WriteBit(GPIOB, GPIO_Pin_6,0);
;;;157      	   OSTimeDlyHMSM(0,0,0,10);
;;;158    	}
;;;159    #endif 
;;;160    
;;;161    #if 0
;;;162    	ratex = LCD_XSIZE/abs(GUI_TOUCH_AD_LEFT - GUI_TOUCH_AD_RIGHT);
;;;163    	ratey = LCD_YSIZE/abs(GUI_TOUCH_AD_TOP - GUI_TOUCH_AD_BOTTOM)
;;;164    	while(1)
;;;165    	{
;;;166    	GUI_DrawCircle(GUI_TOUCH_X_MeasureX()*ratex,GUI_TOUCH_X_MeasureY()*ratey,10);	
;;;167    	}
;;;168    #endif	
;;;169    	
;;;170       // motor_int();
;;;171    	
;;;172    #ifndef WIN_SIM
;;;173    //	run_cal();
;;;174    //	_ExecCalibration();
;;;175    //	GUI_TOUCH_SetDefaultCalibration();
;;;176    #endif
;;;177    
;;;178       	read_custormer();
00003a  f8c84000          STR      r4,[r8,#0]  ; flag_paint
00003e  f7fffffe          BL       read_custormer
;;;179    	read_parameters();
000042  f7fffffe          BL       read_parameters
;;;180    	get_data_form_file("speedt.lt", (TTPars*)&ttpars,sizeof(TGetRecord),sizeof(TTPars));
000046  2358              MOVS     r3,#0x58
000048  f2403226          MOV      r2,#0x326
00004c  499a              LDR      r1,|L1.696|
00004e  a09b              ADR      r0,|L1.700|
000050  f7fffffe          BL       get_data_form_file
;;;181    						   
;;;182    
;;;183        gui_app_init(); 
000054  f7fffffe          BL       gui_app_init
;;;184    	motor_int();
000058  f7fffffe          BL       motor_int
;;;185    
;;;186    //	caculate_pars(&mot_t_cal);
;;;187    
;;;188    #if 0
;;;189      	Draw(&Msg);
;;;190    #endif
;;;191    
;;;192    #if 0
;;;193    	for(i=0;i<sizeof(ch);i++)
;;;194    		*(custormer.custorm+i)= ch[i];
;;;195    
;;;196    	pars.ak1=1.1;
;;;197    	pars.ak2=1.2;
;;;198    	pars.ak3=1.3;
;;;199    	pars.dir=1;
;;;200    	pars.limit_current_h=2.1;
;;;201    	pars.limit_current_l=2.2;
;;;202    	pars.limit_speed=2.3;
;;;203    	pars.psh=2.4;
;;;204    	file_init();
;;;205    	
;;;206    	save_custormer();
;;;207    
;;;208    	pars.ak1=3.1;
;;;209    	pars.ak2=3.2;
;;;210    	pars.ak3=1.3;
;;;211    	pars.dir=1;
;;;212    	pars.limit_current_h=2.1;
;;;213    	pars.limit_current_l=2.2;
;;;214    	pars.limit_speed=2.3;
;;;215    	pars.psh=2.4;
;;;216    
;;;217        file_clear();
;;;218    	read_parameters();
;;;219    	read_custormer();
;;;220    	while(1);
;;;221    #endif 
;;;222    
;;;223    
;;;224    
;;;225    #if 0
;;;226        Tim.year = 2012;
;;;227    	Tim.month = 10;
;;;228    	Tim.date = 12;
;;;229    	Tim.hour = 12;
;;;230    	Tim.min = 35;
;;;231    	Tim.sec = 12;
;;;232    #ifndef WIN_SIM
;;;233    	RTC_Set(Tim);
;;;234    	while(1)
;;;235    		{
;;;236    	RTC_Get_Time(&Tim);
;;;237    
;;;238    	OSTimeDlyHMSM(0,0,0,30);
;;;239    	GUI_DispDecAt(Tim.min,80,100,4);
;;;240    	GUI_DispCharAt('-',120,100);
;;;241    	GUI_DispDecAt(Tim.sec,200,100,4);
;;;242    
;;;243    	min = Tim.min;
;;;244    	sec = Tim.sec;
;;;245    		}
;;;246    #endif
;;;247    	
;;;248    #endif
;;;249    
;;;250    #if 0
;;;251    	
;;;252    	while(1)
;;;253    	{
;;;254        for(j=0;j<12;j++)
;;;255    	{
;;;256        for(i=0;i<20;i++)
;;;257        {
;;;258    
;;;259    	motor_dir(1);
;;;260    	motor_speed(320);
;;;261    	GUI_GotoXY(i*40,j*40);
;;;262    
;;;263    	
;;;264    	get_the_frequence  =  get_data.frequence;
;;;265    
;;;266    	{
;;;267    	GUI_DispFloat(get_the_frequence,5);
;;;268    	last_frequence = get_the_frequence; 
;;;269    
;;;270    	}
;;;271    	 //else
;;;272    	{
;;;273    	 
;;;274    	 //i--;
;;;275    	}
;;;276    
;;;277    	GUI_DispDecAt(get_data.times,100,300, 5);
;;;278    
;;;279    	//OSTimeDlyHMSM(0,0,0,100); 
;;;280    	}
;;;281    	}
;;;282    	GUI_Clear();
;;;283    
;;;284    	}
;;;285    #endif
;;;286    
;;;287    #if 0
;;;288    	home(0);
;;;289    	while(1)
;;;290    	{
;;;291    		GUI_Exec();
;;;292    		task_run();
;;;293    #ifndef WIN_SIM	
;;;294    		OSTimeDlyHMSM(0,0,0,10);
;;;295    #endif	
;;;296    	}
;;;297    #endif
;;;298    
;;;299    #if 1
;;;300    
;;;301    	home(0);
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       home
;;;302    
;;;303    	while(1)
;;;304    	{
;;;305    
;;;306    #ifndef WIN_SIM
;;;307    	    RTC_Get_Time(&Tim);
;;;308    		RTC_time_to_string(buf ,Tim);
;;;309    #endif
;;;310    		GUI_DispStringAt(buf,680,12);
;;;311    
;;;312    		GUI_Exec();
;;;313    
;;;314    		get_data.current = 1.23;
;;;315    		
;;;316    		sprintf(buf_c,"%.2fA",get_data.current);
000062  a19c              ADR      r1,|L1.724|
000064  4d98              LDR      r5,|L1.712|
000066  f8d1b004          LDR      r11,[r1,#4]
;;;317    		//TEXT_SetText(WM_GetDialogItem(current_handle,GUI_ID_TEXT_CURRENT),buf_c);
;;;318    		GUI_DispStringAt(buf_c,450,12);
;;;319    		
;;;320    		//TEXT_SetText(WM_GetDialogItem(current_handle,GUI_ID_TEXT_DATE_TIME),buf_exp);
;;;321    		mot_state = get_data.e_work_state;
;;;322    
;;;323    		if(current_interface == PORTABLE_LIMIT_SPEED)
;;;324    		{
;;;325    			if(flag_paint == 0)
;;;326    			{
;;;327    			draw_xy();
;;;328    			flag_paint =1;
;;;329    			}
;;;330    
;;;331    		switch(mot_state)
;;;332    		  {
;;;333    		case START_TEST:
;;;334    			//value_to_graph_lim(get_data.speed);
;;;335    			buf_data_disp(1);
;;;336    			sprintf(buf_c,"%.3f",get_data.speed);
;;;337    			LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT),1,0,buf_c);
00006a  4e98              LDR      r6,|L1.716|
00006c  f8dfa260          LDR      r10,|L1.720|
000070  6809              LDR      r1,[r1,#0]            ;316
000072  2701              MOVS     r7,#1                 ;328
000074  9118              STR      r1,[sp,#0x60]         ;316
                  |L1.118|
000076  4899              LDR      r0,|L1.732|
000078  f7fffffe          BL       RTC_Get_Time
00007c  4897              LDR      r0,|L1.732|
00007e  6801              LDR      r1,[r0,#0]            ;308  ; Tim
000080  6842              LDR      r2,[r0,#4]            ;308  ; Tim
000082  4668              MOV      r0,sp                 ;308
000084  f7fffffe          BL       RTC_time_to_string
000088  220c              MOVS     r2,#0xc               ;310
00008a  f44f712a          MOV      r1,#0x2a8             ;310
00008e  4668              MOV      r0,sp                 ;310
000090  f7fffffe          BL       GUI_DispStringAt
000094  f7fffffe          BL       GUI_Exec
000098  4891              LDR      r0,|L1.736|
00009a  6068              STR      r0,[r5,#4]            ;314  ; get_data
00009c  465b              MOV      r3,r11                ;314
00009e  a191              ADR      r1,|L1.740|
0000a0  a80d              ADD      r0,sp,#0x34           ;316
0000a2  9a18              LDR      r2,[sp,#0x60]         ;316
0000a4  f7fffffe          BL       __2sprintf
0000a8  220c              MOVS     r2,#0xc               ;318
0000aa  f44f71e1          MOV      r1,#0x1c2             ;318
0000ae  a80d              ADD      r0,sp,#0x34           ;318
0000b0  f7fffffe          BL       GUI_DispStringAt
0000b4  f8da0000          LDR      r0,[r10,#0]           ;323  ; current_interface
0000b8  782c              LDRB     r4,[r5,#0]            ;321  ; get_data
0000ba  2866              CMP      r0,#0x66              ;323
0000bc  d171              BNE      |L1.418|
0000be  f8d80000          LDR      r0,[r8,#0]            ;325  ; flag_paint
0000c2  b918              CBNZ     r0,|L1.204|
0000c4  f7fffffe          BL       draw_xy
0000c8  f8c87000          STR      r7,[r8,#0]            ;328  ; flag_paint
                  |L1.204|
0000cc  2c04              CMP      r4,#4                 ;331
0000ce  d259              BCS      |L1.388|
0000d0  e8dff004          TBB      [pc,r4]               ;331
0000d4  5802182e          DCB      0x58,0x02,0x18,0x2e
0000d8  2001              MOVS     r0,#1                 ;335
0000da  f7fffffe          BL       buf_data_disp
0000de  6928              LDR      r0,[r5,#0x10]         ;336  ; get_data
0000e0  f7fffffe          BL       __aeabi_f2d
0000e4  4602              MOV      r2,r0                 ;336
0000e6  460b              MOV      r3,r1                 ;336
0000e8  a180              ADR      r1,|L1.748|
0000ea  a80d              ADD      r0,sp,#0x34           ;336
0000ec  f7fffffe          BL       __2sprintf
0000f0  f6400107          MOV      r1,#0x807
0000f4  f9b60000          LDRSH    r0,[r6,#0]  ; current_handle
0000f8  f7fffffe          BL       WM_GetDialogItem
0000fc  2200              MOVS     r2,#0
0000fe  ab0d              ADD      r3,sp,#0x34
000100  2101              MOVS     r1,#1
;;;338    			break;
000102  e03d              B        |L1.384|
;;;339    			
;;;340    		case GET_V1:
;;;341    			buf_data_disp(1);
000104  2001              MOVS     r0,#1
000106  f7fffffe          BL       buf_data_disp
;;;342    			sprintf(buf_c,"%.3f",get_data.speed);
00010a  6928              LDR      r0,[r5,#0x10]  ; get_data
00010c  f7fffffe          BL       __aeabi_f2d
000110  4602              MOV      r2,r0
000112  460b              MOV      r3,r1
000114  a175              ADR      r1,|L1.748|
000116  a80d              ADD      r0,sp,#0x34
000118  f7fffffe          BL       __2sprintf
;;;343    			LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT),2,0,buf_c);
00011c  f6400107          MOV      r1,#0x807
000120  f9b60000          LDRSH    r0,[r6,#0]  ; current_handle
000124  f7fffffe          BL       WM_GetDialogItem
000128  2200              MOVS     r2,#0
00012a  ab0d              ADD      r3,sp,#0x34
00012c  2102              MOVS     r1,#2
;;;344    			break;
00012e  e027              B        |L1.384|
;;;345    			
;;;346    		case ONE_STOP:
;;;347    			sprintf(buf_c,"%.3f",get_data.speed);
000130  6928              LDR      r0,[r5,#0x10]  ; get_data
000132  f7fffffe          BL       __aeabi_f2d
000136  4602              MOV      r2,r0
000138  460b              MOV      r3,r1
00013a  a16c              ADR      r1,|L1.748|
00013c  a80d              ADD      r0,sp,#0x34
00013e  f7fffffe          BL       __2sprintf
;;;348    			LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT),2,0,buf_c);
000142  f6400907          MOV      r9,#0x807
000146  4649              MOV      r1,r9
000148  f9b60000          LDRSH    r0,[r6,#0]  ; current_handle
00014c  f7fffffe          BL       WM_GetDialogItem
000150  ab0d              ADD      r3,sp,#0x34
000152  2200              MOVS     r2,#0
000154  2102              MOVS     r1,#2
000156  f7fffffe          BL       LISTVIEW_SetItemText
;;;349    
;;;350    			if(record.result[record.test_times])
00015a  4866              LDR      r0,|L1.756|
00015c  7801              LDRB     r1,[r0,#0]  ; record
00015e  f50070b6          ADD      r0,r0,#0x16c
000162  5c08              LDRB     r0,[r1,r0]
;;;351    			LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT),4,0,"P");
;;;352    			else
;;;353    			LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT),4,0,"N");		
000164  4649              MOV      r1,r9
000166  2800              CMP      r0,#0                 ;350
000168  f9b60000          LDRSH    r0,[r6,#0]  ; current_handle
00016c  d003              BEQ      |L1.374|
00016e  f7fffffe          BL       WM_GetDialogItem
000172  a361              ADR      r3,|L1.760|
000174  e002              B        |L1.380|
                  |L1.374|
000176  f7fffffe          BL       WM_GetDialogItem
00017a  a360              ADR      r3,|L1.764|
                  |L1.380|
00017c  2200              MOVS     r2,#0                 ;351
00017e  2104              MOVS     r1,#4                 ;351
                  |L1.384|
000180  f7fffffe          BL       LISTVIEW_SetItemText
                  |L1.388|
;;;354    			break;
;;;355    			
;;;356    		case CURRENT_LIMIT_H:
;;;357    			break;
;;;358    			
;;;359    		case CURRENT_LIMIT_L:
;;;360    			break;
;;;361    
;;;362    		case SPEED_LIMIT:
;;;363    			break;
;;;364    
;;;365    		case ALL_TEST_STOP:
;;;366    			break;
;;;367    			
;;;368    		case HAND_OFF:
;;;369    			break;
;;;370    
;;;371    		case SWI_ERR:
;;;372    			break;
;;;373    
;;;374    		default:
;;;375    			//add_value_graph(record.test_times-1, rand());
;;;376    			break;
;;;377    		  }
;;;378    		LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT),3,0,state_string[mot_state -1]);
000184  f6400107          MOV      r1,#0x807
000188  f9b60000          LDRSH    r0,[r6,#0]  ; current_handle
00018c  f7fffffe          BL       WM_GetDialogItem
000190  495b              LDR      r1,|L1.768|
000192  2200              MOVS     r2,#0
000194  eb010184          ADD      r1,r1,r4,LSL #2
000198  f8513c04          LDR      r3,[r1,#-4]
00019c  2103              MOVS     r1,#3
00019e  f7fffffe          BL       LISTVIEW_SetItemText
                  |L1.418|
;;;379    		}
;;;380    
;;;381    		if(current_interface == XYZ_ACC_HOME)
0001a2  f8da0000          LDR      r0,[r10,#0]  ; current_interface
0001a6  2868              CMP      r0,#0x68
0001a8  d13f              BNE      |L1.554|
;;;382    		{
;;;383    			if(xyz_paint_flag == 0)
0001aa  f8df9158          LDR      r9,|L1.772|
0001ae  f8d90000          LDR      r0,[r9,#0]  ; xyz_paint_flag
0001b2  b9c8              CBNZ     r0,|L1.488|
;;;384    			{
;;;385    			GUI_SetColor(GUI_YELLOW);
0001b4  f64f70ff          MOV      r0,#0xffff
0001b8  f7fffffe          BL       GUI_SetColor
;;;386    			draw_scale_y(SCALE_X_START,SCALE_Y_START,SCALE_Y_END);
0001bc  f2401217          MOV      r2,#0x117
0001c0  2117              MOVS     r1,#0x17
0001c2  2014              MOVS     r0,#0x14
0001c4  f7fffffe          BL       draw_scale_y
;;;387    			GUI_SetColor(GUI_WHITE);
0001c8  f06f407f          MVN      r0,#0xff000000
0001cc  f7fffffe          BL       GUI_SetColor
;;;388    			xyz_paint_flag =1;
;;;389    			disp_titles();
0001d0  f8c97000          STR      r7,[r9,#0]  ; xyz_paint_flag
0001d4  f7fffffe          BL       disp_titles
;;;390    			disp_mode();
0001d8  f7fffffe          BL       disp_mode
;;;391    			draw_cm_s2(4900,900);
0001dc  f44f7161          MOV      r1,#0x384
0001e0  f2413024          MOV      r0,#0x1324
0001e4  f7fffffe          BL       draw_cm_s2
                  |L1.488|
;;;392    			}
;;;393    		  if(sample_status == START)
0001e8  4847              LDR      r0,|L1.776|
0001ea  7800              LDRB     r0,[r0,#0]  ; sample_status
0001ec  2801              CMP      r0,#1
0001ee  d11c              BNE      |L1.554|
;;;394    		  {
;;;395    #ifdef WIN_SIM			
;;;396    			Data_Sim(512);
;;;397    #endif
;;;398    			save_xyz();
0001f0  f7fffffe          BL       save_xyz
;;;399    
;;;400    			if(xyz_pars.e_filter != FILTER_NO)
0001f4  4845              LDR      r0,|L1.780|
0001f6  7800              LDRB     r0,[r0,#0]  ; xyz_pars
0001f8  b120              CBZ      r0,|L1.516|
;;;401    			{
;;;402    			xyz_fir();
0001fa  f7fffffe          BL       xyz_fir
;;;403    			xyz_value_fir_to_graph();
0001fe  f7fffffe          BL       xyz_value_fir_to_graph
000202  e005              B        |L1.528|
                  |L1.516|
;;;404    			}
;;;405    			else
;;;406    			{
;;;407    			xyz_value_dir_to_graph(&Z_acc,GUI_GREEN,Z);
000204  2202              MOVS     r2,#2
000206  f44f417f          MOV      r1,#0xff00
00020a  4841              LDR      r0,|L1.784|
00020c  f7fffffe          BL       xyz_value_dir_to_graph
                  |L1.528|
;;;408    			}
;;;409    			xyz_value_dir_to_graph(&X_acc,GUI_BLUE,X);
000210  2200              MOVS     r2,#0
000212  f44f017f          MOV      r1,#0xff0000
000216  483f              LDR      r0,|L1.788|
000218  f7fffffe          BL       xyz_value_dir_to_graph
;;;410    			xyz_value_dir_to_graph(&Y_acc,GUI_RED,Y);
00021c  2201              MOVS     r2,#1
00021e  21ff              MOVS     r1,#0xff
000220  483d              LDR      r0,|L1.792|
000222  f7fffffe          BL       xyz_value_dir_to_graph
;;;411    			disp_caculate();
000226  f7fffffe          BL       disp_caculate
                  |L1.554|
;;;412    		  }
;;;413    		}
;;;414    		
;;;415    		
;;;416    		if(current_interface == PORTABLE_LIMIT_SPEED_T)
00022a  f8da0000          LDR      r0,[r10,#0]  ; current_interface
00022e  286a              CMP      r0,#0x6a
000230  d122              BNE      |L1.632|
;;;417    		{
;;;418    			if(flag_paint == 0)
000232  f8d80000          LDR      r0,[r8,#0]  ; flag_paint
000236  b918              CBNZ     r0,|L1.576|
;;;419    			{
;;;420    			draw_xy_t();
000238  f7fffffe          BL       draw_xy_t
;;;421    	
;;;422    			flag_paint =1;
00023c  f8c87000          STR      r7,[r8,#0]  ; flag_paint
                  |L1.576|
;;;423    			}
;;;424    			
;;;425    			if(etest_mode == TEST_MODE_COM)
000240  4836              LDR      r0,|L1.796|
000242  7800              LDRB     r0,[r0,#0]  ; etest_mode
000244  2801              CMP      r0,#1
000246  d117              BNE      |L1.632|
;;;426    			{
;;;427    			
;;;428    			switch(mot_state)
000248  2c01              CMP      r4,#1
00024a  d115              BNE      |L1.632|
;;;429    				{
;;;430    			case START_TEST:
;;;431    			//get_data.speed = rand()%200;
;;;432    			/*
;;;433    				for( j =0;j< 456;j++)
;;;434    				{
;;;435    					tspeed_buf.speed_buf[(tspeed_buf.in_loc)&(BUF_SIZE-1)]= j;
;;;436    					tspeed_buf.in_loc++;
;;;437    					tspeed_buf.in_data_size++;
;;;438    				}
;;;439    			*/
;;;440    #if 0
;;;441    				for(;tspeed_buf.in_data_size > 0;tspeed_buf.in_data_size--)
;;;442    				{
;;;443    					value_to_graph_lim(tspeed_buf.speed_buf[(tspeed_buf.out_loc)&(BUF_SIZE-1)]);
;;;444    					tspeed_buf.out_loc++;
;;;445    				}
;;;446    #endif
;;;447    
;;;448    			buf_data_disp(1);
00024c  f7fffffe          BL       buf_data_disp
;;;449    			sprintf(buf_c,"%.3f",get_data.speed);
000250  6928              LDR      r0,[r5,#0x10]  ; get_data
000252  f7fffffe          BL       __aeabi_f2d
000256  4602              MOV      r2,r0
000258  460b              MOV      r3,r1
00025a  a124              ADR      r1,|L1.748|
00025c  a80d              ADD      r0,sp,#0x34
00025e  f7fffffe          BL       __2sprintf
;;;450    			LISTVIEW_SetItemText(WM_GetDialogItem(current_handle,GUI_ID_LISTVIEW_RESULT_T),3,0,buf_c);
000262  f640010b          MOV      r1,#0x80b
000266  f9b60000          LDRSH    r0,[r6,#0]  ; current_handle
00026a  f7fffffe          BL       WM_GetDialogItem
00026e  ab0d              ADD      r3,sp,#0x34
000270  2200              MOVS     r2,#0
000272  2103              MOVS     r1,#3
000274  f7fffffe          BL       LISTVIEW_SetItemText
                  |L1.632|
;;;451    			
;;;452    			break;
;;;453    
;;;454    			default:
;;;455    			break;
;;;456    
;;;457    				}
;;;458    			}
;;;459    		}
;;;460    
;;;461    		if(current_interface == BALANCE)
000278  f8da0000          LDR      r0,[r10,#0]  ; current_interface
00027c  286c              CMP      r0,#0x6c
00027e  d106              BNE      |L1.654|
;;;462    		{
;;;463    			if(flag_paint == 0)
000280  f8d80000          LDR      r0,[r8,#0]  ; flag_paint
000284  4644              MOV      r4,r8
000286  b910              CBNZ     r0,|L1.654|
;;;464    			{
;;;465    			draw_xy_t();
000288  f7fffffe          BL       draw_xy_t
;;;466    			flag_paint =1;
00028c  6027              STR      r7,[r4,#0]  ; flag_paint
                  |L1.654|
;;;467    			}
;;;468    
;;;469    		    //get_result();
;;;470    		}
;;;471    
;;;472    #ifndef WIN_SIM	
;;;473    		OSTimeDlyHMSM(0,0,0,5); 
00028e  2200              MOVS     r2,#0
000290  2305              MOVS     r3,#5
000292  4611              MOV      r1,r2
000294  4610              MOV      r0,r2
000296  f7fffffe          BL       OSTimeDlyHMSM
00029a  e6ec              B        |L1.118|
;;;474    #endif	
;;;475    	} 
;;;476    #endif
;;;477    
;;;478    }
                          ENDP

                  |L1.668|
                          DCD      ||.constdata||
                  |L1.672|
                          DCD      disp_mult
                  |L1.676|
                          DCD      mot_t_cal
                  |L1.680|
                          DCD      h_home
                  |L1.684|
                          DCD      h_pars
                  |L1.688|
                          DCD      h_cus
                  |L1.692|
                          DCD      flag_paint
                  |L1.696|
                          DCD      ttpars
                  |L1.700|
0002bc  73706565          DCB      "speedt.lt",0
0002c0  64742e6c
0002c4  7400    
0002c6  00                DCB      0
0002c7  00                DCB      0
                  |L1.712|
                          DCD      get_data
                  |L1.716|
                          DCD      current_handle
                  |L1.720|
                          DCD      current_interface
                  |L1.724|
0002d4  80000000          DCFD     0x3ff3ae1480000000 ; 1.2300000190734863
0002d8  3ff3ae14
                  |L1.732|
                          DCD      Tim
                  |L1.736|
                          DCD      0x3f9d70a4
                  |L1.740|
0002e4  252e3266          DCB      "%.2fA",0
0002e8  4100    
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L1.748|
0002ec  252e3366          DCB      "%.3f",0
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L1.756|
                          DCD      record
                  |L1.760|
0002f8  5000              DCB      "P",0
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L1.764|
0002fc  4e00              DCB      "N",0
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L1.768|
                          DCD      ||.data||+0x4
                  |L1.772|
                          DCD      xyz_paint_flag
                  |L1.776|
                          DCD      sample_status
                  |L1.780|
                          DCD      xyz_pars
                  |L1.784|
                          DCD      Z_acc
                  |L1.788|
                          DCD      X_acc
                  |L1.792|
                          DCD      Y_acc
                  |L1.796|
                          DCD      etest_mode

                          AREA ||i.buf_data_disp||, CODE, READONLY, ALIGN=2

                  buf_data_disp PROC
;;;32     
;;;33     int buf_data_disp(int pick_rate)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;34     {
;;;35     	static float mid;
;;;36     	int pick_size,i,j,loc;
;;;37     
;;;38     	if(tspeed_buf.in_data_size >= pick_rate)
000004  4e1e              LDR      r6,|L2.128|
000006  4680              MOV      r8,r0                 ;34
;;;39     	{
;;;40     		pick_size = tspeed_buf.in_data_size/pick_rate;
;;;41     
;;;42     		for(i=0;i<pick_size;i++)
;;;43     		{
;;;44     		   loc = tspeed_buf.out_loc&(BUF_SIZE-1);
;;;45     		   mid = tspeed_buf.speed_buf[loc];
000008  4f1e              LDR      r7,|L2.132|
00000a  68b0              LDR      r0,[r6,#8]            ;38  ; tspeed_buf
00000c  4540              CMP      r0,r8                 ;38
00000e  d331              BCC      |L2.116|
000010  fbb0f9f8          UDIV     r9,r0,r8              ;40
000014  2500              MOVS     r5,#0                 ;42
000016  e028              B        |L2.106|
                  |L2.24|
000018  6870              LDR      r0,[r6,#4]            ;44  ; tspeed_buf
;;;46     		   for(j=0;j<pick_rate;j++)
00001a  2400              MOVS     r4,#0
00001c  f3c00008          UBFX     r0,r0,#0,#9           ;44
000020  eb060080          ADD      r0,r6,r0,LSL #2       ;45
000024  68c0              LDR      r0,[r0,#0xc]          ;45
000026  6038              STR      r0,[r7,#0]  ; mid
000028  e019              B        |L2.94|
                  |L2.42|
;;;47     		   {
;;;48     			   if(mid < tspeed_buf.speed_buf[(tspeed_buf.out_loc+1)&(BUF_SIZE-1)])
00002a  6870              LDR      r0,[r6,#4]  ; tspeed_buf
00002c  1c40              ADDS     r0,r0,#1
00002e  f3c00008          UBFX     r0,r0,#0,#9
000032  eb060080          ADD      r0,r6,r0,LSL #2
000036  68c1              LDR      r1,[r0,#0xc]
000038  6838              LDR      r0,[r7,#0]  ; mid
00003a  f7fffffe          BL       __aeabi_cfcmple
00003e  d207              BCS      |L2.80|
;;;49     			   {
;;;50     			      mid = tspeed_buf.speed_buf[(tspeed_buf.out_loc+1)&(BUF_SIZE-1)];
000040  6870              LDR      r0,[r6,#4]  ; tspeed_buf
000042  1c40              ADDS     r0,r0,#1
000044  f3c00008          UBFX     r0,r0,#0,#9
000048  eb060080          ADD      r0,r6,r0,LSL #2
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  6038              STR      r0,[r7,#0]  ; mid
                  |L2.80|
;;;51     			   }
;;;52     			   tspeed_buf.out_loc++;
000050  6870              LDR      r0,[r6,#4]  ; tspeed_buf
000052  1c40              ADDS     r0,r0,#1
;;;53     			   tspeed_buf.in_data_size--;
000054  6070              STR      r0,[r6,#4]  ; tspeed_buf
000056  68b0              LDR      r0,[r6,#8]  ; tspeed_buf
000058  1e40              SUBS     r0,r0,#1
00005a  1c64              ADDS     r4,r4,#1              ;46
00005c  60b0              STR      r0,[r6,#8]            ;46  ; tspeed_buf
                  |L2.94|
00005e  4544              CMP      r4,r8                 ;46
000060  dbe3              BLT      |L2.42|
;;;54     		   }
;;;55     			value_to_graph_lim(mid);
000062  6838              LDR      r0,[r7,#0]  ; mid
000064  f7fffffe          BL       value_to_graph_lim
000068  1c6d              ADDS     r5,r5,#1              ;42
                  |L2.106|
00006a  454d              CMP      r5,r9                 ;42
00006c  dbd4              BLT      |L2.24|
;;;56     		}
;;;57     
;;;58     		return 1;
00006e  2001              MOVS     r0,#1
                  |L2.112|
;;;59     	}else {
;;;60     	value_to_graph_lim(mid);
;;;61     		return -1;
;;;62     	}
;;;63     }
000070  e8bd87f0          POP      {r4-r10,pc}
                  |L2.116|
000074  6838              LDR      r0,[r7,#0]            ;60  ; mid
000076  f7fffffe          BL       value_to_graph_lim
00007a  f04f30ff          MOV      r0,#0xffffffff        ;61
00007e  e7f7              B        |L2.112|
;;;64     
                          ENDP

                  |L2.128|
                          DCD      tspeed_buf
                  |L2.132|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  32303132          DCB      0x32,0x30,0x31,0x32
000004  2d31322d          DCB      0x2d,0x31,0x32,0x2d
000008  31322d31          DCB      0x31,0x32,0x2d,0x31
00000c  322d3330          DCB      0x32,0x2d,0x33,0x30
000010  3a323400          DCB      0x3a,0x32,0x34,0x00
                          %        8
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  31322d33          DCB      0x31,0x32,0x2d,0x33
000024  30000000          DCB      0x30,0x00,0x00,0x00
                          %        40
000050  0000              DCB      0x00,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  53746172          DCB      "Start",0
000004  7400    
000006  47657456          DCB      "GetV1",0
00000a  3100    
00000c  4f6e6553          DCB      "OneStop",0
000010  746f7000
000014  4375724c          DCB      "CurL_H",0
000018  5f4800  
00001b  4375724c          DCB      "CurL_L",0
00001f  5f4c00  
000022  534c00            DCB      "SL",0
000025  414600            DCB      "AF",0
000028  484600            DCB      "HF",0
00002b  496e6974          DCB      "Init",0
00002f  00      
000030  53776963          DCB      "Swich_err",0
000034  685f6572
000038  7200    
00003a  545f4d6f          DCB      "T_Mot_Cal",0
00003e  745f4361
000042  6c00    

                          AREA ||.data||, DATA, ALIGN=2

                  mid
                          DCD      0x00000000
                  state_string
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x6
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x14
                          DCD      ||.conststring||+0x1b
                          DCD      ||.conststring||+0x22
                          DCD      ||.conststring||+0x25
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x2b
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x3a

                          AREA ||area_number.8||, DATA, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.data||
                  reg_get
000000  00                DCB      0x00

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  ||dta||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\gui_app\\MainTask.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_MainTask_c_f61b956f____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_MainTask_c_f61b956f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_MainTask_c_f61b956f____REVSH|
#line 128
|__asm___10_MainTask_c_f61b956f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
