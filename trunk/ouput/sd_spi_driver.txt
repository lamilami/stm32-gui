; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\sd_spi_driver.o --depend=.\ouput\sd_spi_driver.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\sd_spi_driver.crf Source\SDHC\driver\sd_spi_driver.c]
                          THUMB

                          AREA ||i.SD_DisSelect||, CODE, READONLY, ALIGN=2

                  SD_DisSelect PROC
;;;471    *****************************************************************************/
;;;472    void SD_DisSelect(void)
000000  4903              LDR      r1,|L1.16|
;;;473    {
;;;474    	SD_CS=1;
000002  2001              MOVS     r0,#1
000004  6008              STR      r0,[r1,#0]
;;;475     	SD_SPI_ReadWriteByte(0xff);//提供额外的8个时钟
000006  f04f00ff          MOV      r0,#0xff
00000a  f7ffbffe          B.W      SD_SPI_ReadWriteByte
;;;476    }
;;;477    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x422201ac

                          AREA ||i.SD_GetResponse||, CODE, READONLY, ALIGN=1

                  SD_GetResponse PROC
;;;547    *****************************************************************************/
;;;548    u8 SD_GetResponse(u8 Response)
000000  b570              PUSH     {r4-r6,lr}
;;;549    {
000002  4605              MOV      r5,r0
;;;550    	u16 Count=0xFFFF;   						  
000004  f64f74ff          MOV      r4,#0xffff
;;;551    	while ((SD_SPI_ReadWriteByte(0xFF)!=Response)&&Count)
000008  e001              B        |L2.14|
                  |L2.10|
;;;552        {
;;;553            Count--;//等待得到准确的回应  
00000a  1e64              SUBS     r4,r4,#1
00000c  b2a4              UXTH     r4,r4
                  |L2.14|
00000e  20ff              MOVS     r0,#0xff              ;551
000010  f7fffffe          BL       SD_SPI_ReadWriteByte
000014  42a8              CMP      r0,r5                 ;551
000016  d002              BEQ      |L2.30|
000018  2c00              CMP      r4,#0                 ;551
00001a  d1f6              BNE      |L2.10|
00001c  e002              B        |L2.36|
                  |L2.30|
;;;554        }
;;;555    	if (Count==0)
00001e  b10c              CBZ      r4,|L2.36|
;;;556        {
;;;557            return MSD_RESPONSE_FAILURE;//得到回应失败
;;;558        }
;;;559    	else
;;;560        {
;;;561            return MSD_RESPONSE_NO_ERROR;//正确回应
000020  2000              MOVS     r0,#0
;;;562        }
;;;563    }
000022  bd70              POP      {r4-r6,pc}
                  |L2.36|
000024  20ff              MOVS     r0,#0xff              ;557
000026  bd70              POP      {r4-r6,pc}
;;;564    	
                          ENDP


                          AREA ||i.SD_ReadDisk||, CODE, READONLY, ALIGN=2

                  SD_ReadDisk PROC
;;;150    *****************************************************************************/
;;;151    u8 SD_ReadDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;152    {
000004  4606              MOV      r6,r0
;;;153    	u8 r1;
;;;154    	if(SD_Type!=SD_TYPE_V2HC)
000006  4818              LDR      r0,|L3.104|
000008  4615              MOV      r5,r2                 ;152
00000a  7800              LDRB     r0,[r0,#0]  ; SD_Type
00000c  2806              CMP      r0,#6
00000e  d000              BEQ      |L3.18|
;;;155        {
;;;156            sector <<= 9;//转换为字节地址
000010  0249              LSLS     r1,r1,#9
                  |L3.18|
;;;157        }
;;;158    	if(cnt==1)
;;;159    	{
;;;160    		r1=SD_SendCmd(CMD17,sector,0X01);//读命令
;;;161    		if(r1==0)//指令发送成功
;;;162    		{
;;;163    			r1=SD_RecvData(buf,512);//接收512个字节	   
000012  f44f7700          MOV      r7,#0x200
000016  2d01              CMP      r5,#1                 ;158
;;;164    		}
;;;165    	}
;;;166        else
;;;167    	{
;;;168    		r1=SD_SendCmd(CMD18,sector,0X01);//连续读命令
000018  f04f0201          MOV      r2,#1
00001c  d019              BEQ      |L3.82|
00001e  2012              MOVS     r0,#0x12
000020  f7fffffe          BL       SD_SendCmd
                  |L3.36|
;;;169    		do
;;;170    		{
;;;171    			r1=SD_RecvData(buf,512);//接收512个字节	 
000024  4639              MOV      r1,r7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       SD_RecvData
;;;172    			buf+=512;  
;;;173    		}while(--cnt && r1==0); 	
00002c  1e6d              SUBS     r5,r5,#1
00002e  4604              MOV      r4,r0                 ;171
000030  f5067600          ADD      r6,r6,#0x200          ;172
000034  f01505ff          ANDS     r5,r5,#0xff
000038  d001              BEQ      |L3.62|
00003a  2c00              CMP      r4,#0
00003c  d0f2              BEQ      |L3.36|
                  |L3.62|
;;;174    		SD_SendCmd(CMD12,0,0X01);	//发送停止命令
00003e  2201              MOVS     r2,#1
000040  2100              MOVS     r1,#0
000042  200c              MOVS     r0,#0xc
000044  f7fffffe          BL       SD_SendCmd
                  |L3.72|
;;;175    	}   
;;;176    	SD_DisSelect();//取消片选
000048  f7fffffe          BL       SD_DisSelect
;;;177    	return r1;
00004c  4620              MOV      r0,r4
;;;178    }
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L3.82|
000052  2011              MOVS     r0,#0x11              ;160
000054  f7fffffe          BL       SD_SendCmd
000058  0004              MOVS     r4,r0                 ;160
00005a  d1f5              BNE      |L3.72|
00005c  4639              MOV      r1,r7                 ;163
00005e  4630              MOV      r0,r6                 ;163
000060  f7fffffe          BL       SD_RecvData
000064  4604              MOV      r4,r0                 ;163
000066  e7ef              B        |L3.72|
;;;179    
                          ENDP

                  |L3.104|
                          DCD      ||.data||

                          AREA ||i.SD_RecvData||, CODE, READONLY, ALIGN=1

                  SD_RecvData PROC
;;;580    *****************************************************************************/
;;;581    u8 SD_RecvData(u8 *buf,u16 len)
000000  b570              PUSH     {r4-r6,lr}
;;;582    {			  	  
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;583    	if(SD_GetResponse(0xFE))
000006  20fe              MOVS     r0,#0xfe
000008  f7fffffe          BL       SD_GetResponse
00000c  b128              CBZ      r0,|L4.26|
;;;584        {
;;;585            return 1;//等待SD卡发回数据起始令牌0xFE
00000e  2001              MOVS     r0,#1
;;;586        }
;;;587        while(len--)//开始接收数据
;;;588        {
;;;589            *buf=SD_SPI_ReadWriteByte(0xFF);
;;;590            buf++;
;;;591        }
;;;592        //下面是2个伪CRC（dummy CRC）
;;;593        SD_SPI_ReadWriteByte(0xFF);
;;;594        SD_SPI_ReadWriteByte(0xFF);									  					    
;;;595        return 0;//读取成功
;;;596    }
000010  bd70              POP      {r4-r6,pc}
                  |L4.18|
000012  f7fffffe          BL       SD_SPI_ReadWriteByte
000016  f8040b01          STRB     r0,[r4],#1            ;589
                  |L4.26|
00001a  0028              MOVS     r0,r5                 ;587
00001c  f1a50501          SUB      r5,r5,#1              ;587
000020  b2ad              UXTH     r5,r5                 ;587
000022  f04f00ff          MOV      r0,#0xff              ;593
000026  d1f4              BNE      |L4.18|
000028  f7fffffe          BL       SD_SPI_ReadWriteByte
00002c  20ff              MOVS     r0,#0xff              ;594
00002e  f7fffffe          BL       SD_SPI_ReadWriteByte
000032  2000              MOVS     r0,#0                 ;595
000034  bd70              POP      {r4-r6,pc}
;;;597    /*****************************************************************************
                          ENDP


                          AREA ||i.SD_SPI_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SD_SPI_ReadWriteByte PROC
;;;448    *****************************************************************************/
;;;449    u8 SD_SPI_ReadWriteByte(u8 TxData)
000000  b570              PUSH     {r4-r6,lr}
;;;450    {					 	
;;;451    	while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_TXE) == RESET); 		  
000002  4c0b              LDR      r4,|L5.48|
000004  4605              MOV      r5,r0                 ;450
                  |L5.6|
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L5.6|
;;;452    	SPI_I2S_SendData(SD_SPI, TxData); 
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SPI_I2S_SendData
                  |L5.26|
;;;453    	while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_RXNE) == RESET);					    
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L5.26|
;;;454    	return SPI_I2S_ReceiveData(SD_SPI); 				    
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c0              UXTB     r0,r0
;;;455    }
00002e  bd70              POP      {r4-r6,pc}
;;;456    
                          ENDP

                  |L5.48|
                          DCD      0x40003c00

                          AREA ||i.SD_Select||, CODE, READONLY, ALIGN=2

                  SD_Select PROC
;;;492    *****************************************************************************/
;;;493    u8 SD_Select(void)
000000  4905              LDR      r1,|L6.24|
;;;494    {
000002  b510              PUSH     {r4,lr}
;;;495    	SD_CS=0;
000004  2000              MOVS     r0,#0
000006  6008              STR      r0,[r1,#0]
;;;496    	if(SD_WaitReady()==0)
000008  f7fffffe          BL       SD_WaitReady
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L6.22|
;;;497        {
;;;498            return 0;
;;;499        }
;;;500    	SD_DisSelect();
000010  f7fffffe          BL       SD_DisSelect
;;;501    	return 1;
000014  2001              MOVS     r0,#1
                  |L6.22|
;;;502    }
000016  bd10              POP      {r4,pc}
;;;503    
                          ENDP

                  |L6.24|
                          DCD      0x422201ac

                          AREA ||i.SD_SendBlock||, CODE, READONLY, ALIGN=1

                  SD_SendBlock PROC
;;;612    *****************************************************************************/
;;;613    u8 SD_SendBlock(u8*buf,u8 cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;614    {	
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;615    	u16 t;		  	  
;;;616    	if(SD_WaitReady())
000006  f7fffffe          BL       SD_WaitReady
00000a  b108              CBZ      r0,|L7.16|
;;;617        {
;;;618            return 1;//等待准备失效
00000c  2001              MOVS     r0,#1
;;;619        }
;;;620    	SD_SPI_ReadWriteByte(cmd);
;;;621    	if(cmd!=0xFD)//不是结束指令
;;;622    	{
;;;623    		for(t=0; t<512; t++)
;;;624            {
;;;625                SD_SPI_ReadWriteByte(buf[t]);
;;;626             }
;;;627    	    SD_SPI_ReadWriteByte(0xFF);  //忽略crc
;;;628    	    SD_SPI_ReadWriteByte(0xFF);
;;;629    		t=SD_SPI_ReadWriteByte(0xFF);//接收响应
;;;630    		if((t&0x1F)!=0x05)return 2;  //响应错误									  					    
;;;631    	}						 									  					    
;;;632        return 0;//写入成功
;;;633    }
00000e  bd70              POP      {r4-r6,pc}
                  |L7.16|
000010  4620              MOV      r0,r4                 ;620
000012  f7fffffe          BL       SD_SPI_ReadWriteByte
000016  2cfd              CMP      r4,#0xfd              ;621
000018  d018              BEQ      |L7.76|
00001a  2400              MOVS     r4,#0                 ;623
00001c  f44f7600          MOV      r6,#0x200             ;623
                  |L7.32|
000020  5d28              LDRB     r0,[r5,r4]            ;625
000022  f7fffffe          BL       SD_SPI_ReadWriteByte
000026  1c64              ADDS     r4,r4,#1              ;623
000028  b2a4              UXTH     r4,r4                 ;623
00002a  42b4              CMP      r4,r6                 ;623
00002c  d3f8              BCC      |L7.32|
00002e  20ff              MOVS     r0,#0xff              ;627
000030  f7fffffe          BL       SD_SPI_ReadWriteByte
000034  20ff              MOVS     r0,#0xff              ;628
000036  f7fffffe          BL       SD_SPI_ReadWriteByte
00003a  20ff              MOVS     r0,#0xff              ;629
00003c  f7fffffe          BL       SD_SPI_ReadWriteByte
000040  f000001f          AND      r0,r0,#0x1f           ;630
000044  2805              CMP      r0,#5                 ;630
000046  d001              BEQ      |L7.76|
000048  2002              MOVS     r0,#2                 ;630
00004a  bd70              POP      {r4-r6,pc}
                  |L7.76|
00004c  2000              MOVS     r0,#0                 ;632
00004e  bd70              POP      {r4-r6,pc}
;;;634    														  
                          ENDP


                          AREA ||i.SD_SendCmd||, CODE, READONLY, ALIGN=1

                  SD_SendCmd PROC
;;;651    *****************************************************************************/
;;;652    u8 SD_SendCmd(u8 cmd, u32 arg, u8 crc)
000000  b570              PUSH     {r4-r6,lr}
;;;653    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;654        u8 r1;	
;;;655    	u8 Retry=0; 
;;;656    	SD_DisSelect();//取消上次片选
000008  f7fffffe          BL       SD_DisSelect
;;;657    	if(SD_Select())
00000c  f7fffffe          BL       SD_Select
000010  b108              CBZ      r0,|L8.22|
;;;658        {
;;;659            return 0xFF;//片选失效
000012  20ff              MOVS     r0,#0xff
                  |L8.20|
;;;660        }
;;;661    	//发送
;;;662        SD_SPI_ReadWriteByte(cmd | 0x40);//分别写入命令
;;;663        SD_SPI_ReadWriteByte(arg >> 24);
;;;664        SD_SPI_ReadWriteByte(arg >> 16);
;;;665        SD_SPI_ReadWriteByte(arg >> 8);
;;;666        SD_SPI_ReadWriteByte(arg);	  
;;;667        SD_SPI_ReadWriteByte(crc); 
;;;668    	if(cmd==CMD12)
;;;669        {
;;;670            SD_SPI_ReadWriteByte(0xff);//Skip a stuff byte when stop reading
;;;671        }
;;;672        //等待响应，或超时退出
;;;673    	Retry=0x1F;
;;;674    	do
;;;675    	{
;;;676    		r1=SD_SPI_ReadWriteByte(0xFF);
;;;677    	}while((r1&0x80) && Retry--);	 
;;;678    	//返回状态值
;;;679        return r1;
;;;680    }
000014  bd70              POP      {r4-r6,pc}
                  |L8.22|
000016  f0450040          ORR      r0,r5,#0x40           ;662
00001a  f7fffffe          BL       SD_SPI_ReadWriteByte
00001e  0e20              LSRS     r0,r4,#24             ;663
000020  f7fffffe          BL       SD_SPI_ReadWriteByte
000024  f3c44007          UBFX     r0,r4,#16,#8          ;664
000028  f7fffffe          BL       SD_SPI_ReadWriteByte
00002c  f3c42007          UBFX     r0,r4,#8,#8           ;665
000030  f7fffffe          BL       SD_SPI_ReadWriteByte
000034  b2e0              UXTB     r0,r4                 ;666
000036  f7fffffe          BL       SD_SPI_ReadWriteByte
00003a  4630              MOV      r0,r6                 ;667
00003c  f7fffffe          BL       SD_SPI_ReadWriteByte
000040  2d0c              CMP      r5,#0xc               ;668
000042  d102              BNE      |L8.74|
000044  20ff              MOVS     r0,#0xff              ;670
000046  f7fffffe          BL       SD_SPI_ReadWriteByte
                  |L8.74|
00004a  241f              MOVS     r4,#0x1f              ;673
                  |L8.76|
00004c  20ff              MOVS     r0,#0xff              ;676
00004e  f7fffffe          BL       SD_SPI_ReadWriteByte
000052  0601              LSLS     r1,r0,#24             ;677
000054  d5de              BPL      |L8.20|
000056  0021              MOVS     r1,r4                 ;677
000058  f1a40401          SUB      r4,r4,#1              ;677
00005c  b2e4              UXTB     r4,r4                 ;677
00005e  d1f5              BNE      |L8.76|
000060  bd70              POP      {r4-r6,pc}
;;;681    
                          ENDP


                          AREA ||i.SD_WaitReady||, CODE, READONLY, ALIGN=1

                  SD_WaitReady PROC
;;;518    *****************************************************************************/
;;;519    u8 SD_WaitReady(void)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
;;;521    	u32 t=0;
000002  2400              MOVS     r4,#0
;;;522    	do
;;;523    	{
;;;524    		if(SD_SPI_ReadWriteByte(0xFF)==0xFF)
;;;525            {
;;;526                return 0;
;;;527            }
;;;528    		t++;		  	
;;;529    	}while(t<0xFFFFFF);
000004  f06f457f          MVN      r5,#0xff000000
                  |L9.8|
000008  20ff              MOVS     r0,#0xff              ;524
00000a  f7fffffe          BL       SD_SPI_ReadWriteByte
00000e  28ff              CMP      r0,#0xff              ;524
000010  d004              BEQ      |L9.28|
000012  1c64              ADDS     r4,r4,#1              ;528
000014  42ac              CMP      r4,r5
000016  d3f7              BCC      |L9.8|
;;;530    	return 1;
000018  2001              MOVS     r0,#1
;;;531    }
00001a  bd70              POP      {r4-r6,pc}
                  |L9.28|
00001c  2000              MOVS     r0,#0                 ;526
00001e  bd70              POP      {r4-r6,pc}
;;;532    /*****************************************************************************
                          ENDP


                          AREA ||i.SD_WriteDisk||, CODE, READONLY, ALIGN=2

                  SD_WriteDisk PROC
;;;196    *****************************************************************************/
;;;197    u8 SD_WriteDisk(u8*buf,u32 sector,u8 cnt)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
000002  4606              MOV      r6,r0
;;;199    	u8 r1;
;;;200    	if(SD_Type!=SD_TYPE_V2HC)
000004  481d              LDR      r0,|L10.124|
000006  4615              MOV      r5,r2                 ;198
000008  460c              MOV      r4,r1                 ;198
00000a  7800              LDRB     r0,[r0,#0]  ; SD_Type
00000c  2806              CMP      r0,#6
00000e  d000              BEQ      |L10.18|
;;;201        {
;;;202            sector *= 512;//转换为字节地址
000010  024c              LSLS     r4,r1,#9
                  |L10.18|
;;;203        }
;;;204    	if(cnt==1)
000012  2d01              CMP      r5,#1
000014  d013              BEQ      |L10.62|
;;;205    	{
;;;206    		r1=SD_SendCmd(CMD24,sector,0X01);//读命令
;;;207    		if(r1==0)//指令发送成功
;;;208    		{
;;;209    			r1=SD_SendBlock(buf,0xFE);//写512个字节	   
;;;210    		}
;;;211    	}
;;;212        else
;;;213    	{
;;;214    		if(SD_Type!=SD_TYPE_MMC)
000016  2801              CMP      r0,#1
000018  d009              BEQ      |L10.46|
;;;215    		{
;;;216    			SD_SendCmd(CMD55,0,0X01);	
00001a  2201              MOVS     r2,#1
00001c  2100              MOVS     r1,#0
00001e  2037              MOVS     r0,#0x37
000020  f7fffffe          BL       SD_SendCmd
;;;217    			SD_SendCmd(CMD23,cnt,0X01);//发送指令	
000024  2201              MOVS     r2,#1
000026  4629              MOV      r1,r5
000028  2017              MOVS     r0,#0x17
00002a  f7fffffe          BL       SD_SendCmd
                  |L10.46|
;;;218    		}
;;;219     		r1=SD_SendCmd(CMD25,sector,0X01);//连续读命令
00002e  2201              MOVS     r2,#1
000030  4621              MOV      r1,r4
000032  2019              MOVS     r0,#0x19
000034  f7fffffe          BL       SD_SendCmd
000038  0004              MOVS     r4,r0
;;;220    		if(r1==0)
00003a  d00a              BEQ      |L10.82|
00003c  e01a              B        |L10.116|
                  |L10.62|
00003e  2201              MOVS     r2,#1                 ;206
000040  4621              MOV      r1,r4                 ;206
000042  2018              MOVS     r0,#0x18              ;206
000044  f7fffffe          BL       SD_SendCmd
000048  0004              MOVS     r4,r0                 ;206
00004a  d113              BNE      |L10.116|
00004c  21fe              MOVS     r1,#0xfe              ;209
00004e  4630              MOV      r0,r6                 ;209
000050  e00d              B        |L10.110|
                  |L10.82|
;;;221    		{
;;;222    			do
;;;223    			{
;;;224    				r1=SD_SendBlock(buf,0xFC);//接收512个字节	 
000052  21fc              MOVS     r1,#0xfc
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       SD_SendBlock
;;;225    				buf+=512;  
;;;226    			}while(--cnt && r1==0);
00005a  1e6d              SUBS     r5,r5,#1
00005c  f5067600          ADD      r6,r6,#0x200          ;225
000060  f01505ff          ANDS     r5,r5,#0xff
000064  d001              BEQ      |L10.106|
000066  2800              CMP      r0,#0
000068  d0f3              BEQ      |L10.82|
                  |L10.106|
;;;227    			r1=SD_SendBlock(0,0xFD);//接收512个字节 
00006a  21fd              MOVS     r1,#0xfd
00006c  2000              MOVS     r0,#0
                  |L10.110|
00006e  f7fffffe          BL       SD_SendBlock
000072  4604              MOV      r4,r0
                  |L10.116|
;;;228    		}
;;;229    	}   
;;;230    	SD_DisSelect();//取消片选
000074  f7fffffe          BL       SD_DisSelect
;;;231    	return r1;//
000078  4620              MOV      r0,r4
;;;232    }
00007a  bd70              POP      {r4-r6,pc}
;;;233    
                          ENDP

                  |L10.124|
                          DCD      ||.data||

                          AREA ||i.sd_init||, CODE, READONLY, ALIGN=2

                  sd_init PROC
;;;249    *****************************************************************************/
;;;250    u8 sd_init(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;251    {
;;;252        u8 r1;      // 存放SD卡的返回值
;;;253        u16 retry;  // 用来进行超时计数
;;;254        u8 buf[4];  
;;;255    	u16 i;
;;;256    
;;;257    	sd_low_level_Init();		             //初始化IO
000004  f7fffffe          BL       sd_low_level_Init
;;;258     	sd_spi_speed(SD_SPI_SPEED_LOW); //设置到低速模式 
000008  2038              MOVS     r0,#0x38
00000a  f7fffffe          BL       sd_spi_speed
;;;259     	for(i=0; i<10; i++)
00000e  2400              MOVS     r4,#0
                  |L11.16|
;;;260        {
;;;261            SD_SPI_ReadWriteByte(0xFF);//发送最少74个脉冲
000010  20ff              MOVS     r0,#0xff
000012  f7fffffe          BL       SD_SPI_ReadWriteByte
000016  1c64              ADDS     r4,r4,#1              ;259
000018  b2a4              UXTH     r4,r4                 ;259
00001a  2c0a              CMP      r4,#0xa               ;259
00001c  d3f8              BCC      |L11.16|
;;;262        }
;;;263    	retry=20;
00001e  2414              MOVS     r4,#0x14
                  |L11.32|
;;;264    	do
;;;265    	{
;;;266    		r1 = SD_SendCmd(CMD0,0,0x95);//进入IDLE状态
000020  2100              MOVS     r1,#0
000022  2295              MOVS     r2,#0x95
000024  4608              MOV      r0,r1
000026  f7fffffe          BL       SD_SendCmd
00002a  4605              MOV      r5,r0
;;;267    	}while((r1!=0x01) && retry--);
00002c  2801              CMP      r0,#1
00002e  d004              BEQ      |L11.58|
000030  0020              MOVS     r0,r4
000032  f1a40401          SUB      r4,r4,#1
000036  b2a4              UXTH     r4,r4
000038  d1f2              BNE      |L11.32|
                  |L11.58|
;;;268        
;;;269     	SD_Type=0;//默认无卡
00003a  4e4a              LDR      r6,|L11.356|
00003c  2700              MOVS     r7,#0
;;;270     	
;;;271    	if(r1==0x01)
00003e  2d01              CMP      r5,#1
000040  7037              STRB     r7,[r6,#0]            ;269
000042  d168              BNE      |L11.278|
;;;272    	{
;;;273    		if(SD_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
000044  2287              MOVS     r2,#0x87
000046  f44f71d5          MOV      r1,#0x1aa
00004a  2008              MOVS     r0,#8
00004c  f7fffffe          BL       SD_SendCmd
;;;274    		{
;;;275    			for(i=0;i<4;i++)
;;;276                {
;;;277                    buf[i]=SD_SPI_ReadWriteByte(0xFF);  //Get trailing return value of R7 resp
;;;278                }
;;;279    			if(buf[2]==0x01&&buf[3]==0xAA)//卡是否支持2.7~3.6V
;;;280    			{
;;;281    				retry=0xFFFE;
000050  f64f78fe          MOV      r8,#0xfffe
000054  2801              CMP      r0,#1                 ;273
000056  d020              BEQ      |L11.154|
;;;282    				do
;;;283    				{
;;;284    					SD_SendCmd(CMD55,0,0X01);	          //发送CMD55
;;;285    					r1=SD_SendCmd(CMD41,0x40000000,0X01);//发送CMD41
;;;286    				}while(r1&&retry--);
;;;287                    
;;;288    				if(retry&&SD_SendCmd(CMD58,0,0x01)==0)//鉴别SD2.0卡版本开始
;;;289    				{
;;;290    					for(i=0; i<4; i++)
;;;291                        {
;;;292                            buf[i]=SD_SPI_ReadWriteByte(0xFF);//得到OCR值
;;;293                        }
;;;294    					if(buf[0]&0x40)
;;;295                        {
;;;296                            SD_Type=SD_TYPE_V2HC;    //检查CCS
;;;297                        }
;;;298    					else 
;;;299                        {
;;;300                            SD_Type=SD_TYPE_V2;
;;;301                        }
;;;302    				}
;;;303    			}
;;;304    		}
;;;305            else//SD V1.x/ MMC	V3
;;;306    		{
;;;307    			SD_SendCmd(CMD55,0,0X01);		//发送CMD55
000058  2201              MOVS     r2,#1
00005a  2100              MOVS     r1,#0
00005c  2037              MOVS     r0,#0x37
00005e  f7fffffe          BL       SD_SendCmd
;;;308    			r1=SD_SendCmd(CMD41,0,0X01);	//发送CMD41
000062  2201              MOVS     r2,#1
000064  2100              MOVS     r1,#0
000066  2029              MOVS     r0,#0x29
000068  f7fffffe          BL       SD_SendCmd
;;;309    			if(r1<=1)
00006c  2801              CMP      r0,#1
00006e  d853              BHI      |L11.280|
;;;310    			{		
;;;311    				SD_Type=SD_TYPE_V1;
000070  2002              MOVS     r0,#2
000072  7030              STRB     r0,[r6,#0]
;;;312    				retry=0XFFFE;
000074  4644              MOV      r4,r8
                  |L11.118|
;;;313    				do //等待退出IDLE模式
;;;314    				{
;;;315    					SD_SendCmd(CMD55,0,0X01);	//发送CMD55
000076  2201              MOVS     r2,#1
000078  2100              MOVS     r1,#0
00007a  2037              MOVS     r0,#0x37
00007c  f7fffffe          BL       SD_SendCmd
;;;316    					r1=SD_SendCmd(CMD41,0,0X01);//发送CMD41
000080  2201              MOVS     r2,#1
000082  2100              MOVS     r1,#0
000084  2029              MOVS     r0,#0x29
000086  f7fffffe          BL       SD_SendCmd
00008a  0005              MOVS     r5,r0
;;;317    				}while(r1&&retry--);
00008c  d053              BEQ      |L11.310|
00008e  0020              MOVS     r0,r4
000090  f1a40401          SUB      r4,r4,#1
000094  b2a4              UXTH     r4,r4
000096  d1ee              BNE      |L11.118|
000098  e04d              B        |L11.310|
                  |L11.154|
00009a  2400              MOVS     r4,#0                 ;275
00009c  466f              MOV      r7,sp                 ;254
                  |L11.158|
00009e  20ff              MOVS     r0,#0xff              ;277
0000a0  f7fffffe          BL       SD_SPI_ReadWriteByte
0000a4  5538              STRB     r0,[r7,r4]            ;277
0000a6  1c64              ADDS     r4,r4,#1              ;275
0000a8  b2a4              UXTH     r4,r4                 ;275
0000aa  2c04              CMP      r4,#4                 ;275
0000ac  d3f7              BCC      |L11.158|
0000ae  f89d0002          LDRB     r0,[sp,#2]            ;279
0000b2  2801              CMP      r0,#1                 ;279
0000b4  d147              BNE      |L11.326|
0000b6  f89d0003          LDRB     r0,[sp,#3]            ;279
0000ba  28aa              CMP      r0,#0xaa              ;279
0000bc  d143              BNE      |L11.326|
0000be  4644              MOV      r4,r8                 ;281
0000c0  f04f4880          MOV      r8,#0x40000000        ;285
                  |L11.196|
0000c4  2201              MOVS     r2,#1                 ;284
0000c6  2100              MOVS     r1,#0                 ;284
0000c8  2037              MOVS     r0,#0x37              ;284
0000ca  f7fffffe          BL       SD_SendCmd
0000ce  2201              MOVS     r2,#1                 ;285
0000d0  4641              MOV      r1,r8                 ;285
0000d2  2029              MOVS     r0,#0x29              ;285
0000d4  f7fffffe          BL       SD_SendCmd
0000d8  0005              MOVS     r5,r0                 ;285
0000da  d004              BEQ      |L11.230|
0000dc  0020              MOVS     r0,r4                 ;286
0000de  f1a40401          SUB      r4,r4,#1              ;286
0000e2  b2a4              UXTH     r4,r4                 ;286
0000e4  d1ee              BNE      |L11.196|
                  |L11.230|
0000e6  b1b4              CBZ      r4,|L11.278|
0000e8  2201              MOVS     r2,#1                 ;288
0000ea  2100              MOVS     r1,#0                 ;288
0000ec  203a              MOVS     r0,#0x3a              ;288
0000ee  f7fffffe          BL       SD_SendCmd
0000f2  b980              CBNZ     r0,|L11.278|
0000f4  2400              MOVS     r4,#0                 ;290
                  |L11.246|
0000f6  20ff              MOVS     r0,#0xff              ;292
0000f8  f7fffffe          BL       SD_SPI_ReadWriteByte
0000fc  5538              STRB     r0,[r7,r4]            ;292
0000fe  1c64              ADDS     r4,r4,#1              ;290
000100  b2a4              UXTH     r4,r4                 ;290
000102  2c04              CMP      r4,#4                 ;290
000104  d3f7              BCC      |L11.246|
000106  f89d0000          LDRB     r0,[sp,#0]            ;294
00010a  0640              LSLS     r0,r0,#25             ;294
00010c  d501              BPL      |L11.274|
00010e  2006              MOVS     r0,#6                 ;296
000110  e000              B        |L11.276|
                  |L11.274|
000112  2004              MOVS     r0,#4                 ;300
                  |L11.276|
000114  7030              STRB     r0,[r6,#0]            ;300
                  |L11.278|
000116  e016              B        |L11.326|
                  |L11.280|
;;;318    			}
;;;319                else
;;;320    			{
;;;321    				SD_Type=SD_TYPE_MMC;//MMC V3
000118  2001              MOVS     r0,#1
00011a  7030              STRB     r0,[r6,#0]
;;;322    				retry=0XFFFE;
00011c  4644              MOV      r4,r8
                  |L11.286|
;;;323    				do //等待退出IDLE模式
;;;324    				{											    
;;;325    					r1=SD_SendCmd(CMD1,0,0X01);//发送CMD1
00011e  2201              MOVS     r2,#1
000120  2100              MOVS     r1,#0
000122  4610              MOV      r0,r2
000124  f7fffffe          BL       SD_SendCmd
000128  0005              MOVS     r5,r0
;;;326    				}while(r1&&retry--);  
00012a  d004              BEQ      |L11.310|
00012c  0020              MOVS     r0,r4
00012e  f1a40401          SUB      r4,r4,#1
000132  b2a4              UXTH     r4,r4
000134  d1f3              BNE      |L11.286|
                  |L11.310|
;;;327    			}
;;;328    			if(retry==0||SD_SendCmd(CMD16,512,0X01)!=0)
000136  b12c              CBZ      r4,|L11.324|
000138  2201              MOVS     r2,#1
00013a  0251              LSLS     r1,r2,#9
00013c  2010              MOVS     r0,#0x10
00013e  f7fffffe          BL       SD_SendCmd
000142  b100              CBZ      r0,|L11.326|
                  |L11.324|
;;;329                {
;;;330                    SD_Type=SD_TYPE_ERR;//错误的卡
000144  7037              STRB     r7,[r6,#0]
                  |L11.326|
;;;331                }
;;;332    		}
;;;333    	}
;;;334    	SD_DisSelect();//取消片选
000146  f7fffffe          BL       SD_DisSelect
;;;335    	sd_spi_speed(SD_SPI_SPEED_HIGH);//高速
00014a  2008              MOVS     r0,#8
00014c  f7fffffe          BL       sd_spi_speed
;;;336    	if(SD_Type)
000150  7830              LDRB     r0,[r6,#0]  ; SD_Type
000152  b110              CBZ      r0,|L11.346|
;;;337        {
;;;338            return 0;
000154  2000              MOVS     r0,#0
                  |L11.342|
;;;339        }
;;;340    	else if(r1)
;;;341        {
;;;342            return r1; 
;;;343        }
;;;344    	return 0xaa; //其他错误
;;;345    }
000156  e8bd83f8          POP      {r3-r9,pc}
                  |L11.346|
00015a  b10d              CBZ      r5,|L11.352|
00015c  4628              MOV      r0,r5                 ;342
00015e  e7fa              B        |L11.342|
                  |L11.352|
000160  20aa              MOVS     r0,#0xaa              ;344
000162  e7f8              B        |L11.342|
;;;346    /*****************************************************************************
                          ENDP

                  |L11.356|
                          DCD      ||.data||

                          AREA ||i.sd_low_level_Init||, CODE, READONLY, ALIGN=2

                  sd_low_level_Init PROC
;;;360    *****************************************************************************/
;;;361    void sd_low_level_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;362    {
;;;363        GPIO_InitTypeDef  GPIO_InitStructure;
;;;364        SPI_InitTypeDef   SPI_InitStructure;
;;;365    
;;;366        SPI_I2S_DeInit(SD_SPI); 
000002  4d36              LDR      r5,|L12.220|
000004  b086              SUB      sp,sp,#0x18           ;362
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       SPI_I2S_DeInit
;;;367    
;;;368        RCC_APB2PeriphClockCmd(SD_CS_GPIO_CLK | SD_SPI_MOSI_GPIO_CLK | SD_SPI_MISO_GPIO_CLK |SD_SPI_SCK_GPIO_CLK , ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2018              MOVS     r0,#0x18
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;369        
;;;370        RCC_APB1PeriphClockCmd(SD_SPI_CLK, ENABLE); 
000014  2101              MOVS     r1,#1
000016  03c8              LSLS     r0,r1,#15
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;371    
;;;372        GPIO_InitStructure.GPIO_Pin = SD_SPI_SCK_PIN;
00001c  2008              MOVS     r0,#8
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;373        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0002          STRB     r0,[sp,#2]
;;;374        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000028  2018              MOVS     r0,#0x18
;;;375        GPIO_Init(SD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
00002a  4e2d              LDR      r6,|L12.224|
00002c  f88d0003          STRB     r0,[sp,#3]            ;374
000030  4669              MOV      r1,sp
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       GPIO_Init
;;;376    
;;;377        GPIO_InitStructure.GPIO_Pin = SD_SPI_MOSI_PIN;
000038  2020              MOVS     r0,#0x20
00003a  f8ad0000          STRH     r0,[sp,#0]
;;;378        GPIO_Init(SD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
00003e  4669              MOV      r1,sp
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       GPIO_Init
;;;379    
;;;380        GPIO_InitStructure.GPIO_Pin = SD_SPI_MISO_PIN;
000046  2410              MOVS     r4,#0x10
000048  f8ad4000          STRH     r4,[sp,#0]
;;;381        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
00004c  2004              MOVS     r0,#4
00004e  f88d0003          STRB     r0,[sp,#3]
;;;382        GPIO_Init(SD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       GPIO_Init
;;;383    
;;;384        GPIO_InitStructure.GPIO_Pin = SD_CS_PIN;
00005a  01e6              LSLS     r6,r4,#7
00005c  f8ad6000          STRH     r6,[sp,#0]
;;;385        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000060  f88d4003          STRB     r4,[sp,#3]
;;;386        GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStructure);
000064  4c1f              LDR      r4,|L12.228|
000066  4669              MOV      r1,sp
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       GPIO_Init
;;;387        GPIO_SetBits(SD_CS_GPIO_PORT,SD_CS_PIN);
00006e  4631              MOV      r1,r6
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       GPIO_SetBits
;;;388    
;;;389        SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000076  2100              MOVS     r1,#0
000078  f8ad1004          STRH     r1,[sp,#4]
;;;390        SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00007c  f44f7082          MOV      r0,#0x104
000080  f8ad0006          STRH     r0,[sp,#6]
;;;391        SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000084  f8ad1008          STRH     r1,[sp,#8]
;;;392        SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
000088  2002              MOVS     r0,#2
00008a  f8ad000a          STRH     r0,[sp,#0xa]
;;;393        SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
00008e  2401              MOVS     r4,#1
000090  f8ad400c          STRH     r4,[sp,#0xc]
;;;394        SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000094  0200              LSLS     r0,r0,#8
000096  f8ad000e          STRH     r0,[sp,#0xe]
;;;395        SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
00009a  2038              MOVS     r0,#0x38
00009c  f8ad0010          STRH     r0,[sp,#0x10]
;;;396        SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
;;;397        SPI_InitStructure.SPI_CRCPolynomial = 7;
0000a0  2007              MOVS     r0,#7
0000a2  f8ad1012          STRH     r1,[sp,#0x12]         ;396
0000a6  f8ad0014          STRH     r0,[sp,#0x14]
;;;398        SPI_Init(SD_SPI, &SPI_InitStructure);
0000aa  a901              ADD      r1,sp,#4
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       SPI_Init
;;;399      
;;;400        SPI_Cmd(SD_SPI, ENABLE); 
0000b2  2101              MOVS     r1,#1
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       SPI_Cmd
;;;401        
;;;402        SPI_I2S_ReceiveData(SD_SPI);
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       SPI_I2S_ReceiveData
                  |L12.192|
;;;403        while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_TXE) == RESET);
0000c0  2102              MOVS     r1,#2
0000c2  4628              MOV      r0,r5
0000c4  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000c8  2800              CMP      r0,#0
0000ca  d0f9              BEQ      |L12.192|
;;;404        SPI_I2S_ReceiveData(SD_SPI);
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       SPI_I2S_ReceiveData
0000d2  4805              LDR      r0,|L12.232|
;;;405    
;;;406        SD_CS=1;
0000d4  6004              STR      r4,[r0,#0]
;;;407        
;;;408    }
0000d6  b006              ADD      sp,sp,#0x18
0000d8  bd70              POP      {r4-r6,pc}
;;;409    /*****************************************************************************
                          ENDP

0000da  0000              DCW      0x0000
                  |L12.220|
                          DCD      0x40003c00
                  |L12.224|
                          DCD      0x40010c00
                  |L12.228|
                          DCD      0x40011000
                  |L12.232|
                          DCD      0x422201ac

                          AREA ||i.sd_spi_speed||, CODE, READONLY, ALIGN=2

                  sd_spi_speed PROC
;;;426    *****************************************************************************/
;;;427    void sd_spi_speed(u8 SPI_BaudRate)
000000  4906              LDR      r1,|L13.28|
;;;428     {
;;;429        SD_SPI->CR1&=0XFFC7;
000002  880a              LDRH     r2,[r1,#0]
000004  f0220238          BIC      r2,r2,#0x38
000008  800a              STRH     r2,[r1,#0]
;;;430    	SD_SPI->CR1|=SPI_BaudRate;	
00000a  880a              LDRH     r2,[r1,#0]
00000c  ea420200          ORR      r2,r2,r0
000010  800a              STRH     r2,[r1,#0]
;;;431    	SPI_Cmd(SD_SPI,ENABLE); 
000012  f04f0101          MOV      r1,#1
000016  4801              LDR      r0,|L13.28|
000018  f7ffbffe          B.W      SPI_Cmd
;;;432     }
;;;433    
                          ENDP

                  |L13.28|
                          DCD      0x40003c00

                          AREA ||.data||, DATA, ALIGN=0

                  SD_Type
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Source\\SDHC\\driver\\sd_spi_driver.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_sd_spi_driver_c_5cf4141f____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_sd_spi_driver_c_5cf4141f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_sd_spi_driver_c_5cf4141f____REVSH|
#line 128
|__asm___15_sd_spi_driver_c_5cf4141f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
