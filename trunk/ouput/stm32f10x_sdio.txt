; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\stm32f10x_sdio.o --depend=.\ouput\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\stm32f10x_sdio.crf Source\FWLib\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||i.SDIO_CEATAITCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CEATAITCmd PROC
;;;612      */
;;;613    void SDIO_CEATAITCmd(FunctionalState NewState)
000000  2101              MOVS     r1,#1
;;;614    { 
;;;615      /* Check the parameters */
;;;616      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;617      
;;;618      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000002  4381              BICS     r1,r1,r0
000004  4801              LDR      r0,|L1.12|
000006  6001              STR      r1,[r0,#0]
;;;619    }
000008  4770              BX       lr
;;;620    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x423001b4

                          AREA ||i.SDIO_ClearFlag||, CODE, READONLY, ALIGN=2

                  SDIO_ClearFlag PROC
;;;702      */
;;;703    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000000  4901              LDR      r1,|L2.8|
;;;704    { 
;;;705      /* Check the parameters */
;;;706      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;707       
;;;708      SDIO->ICR = SDIO_FLAG;
000002  6388              STR      r0,[r1,#0x38]
;;;709    }
000004  4770              BX       lr
;;;710    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SDIO_ClearITPendingBit PROC
;;;777      */
;;;778    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
000000  4901              LDR      r1,|L3.8|
;;;779    { 
;;;780      /* Check the parameters */
;;;781      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;782       
;;;783      SDIO->ICR = SDIO_IT;
000002  6388              STR      r0,[r1,#0x38]
;;;784    }
000004  4770              BX       lr
;;;785    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClockCmd||, CODE, READONLY, ALIGN=2

                  SDIO_ClockCmd PROC
;;;233      */
;;;234    void SDIO_ClockCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;235    {
;;;236      /* Check the parameters */
;;;237      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;238      
;;;239      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;240    }
000004  4770              BX       lr
;;;241    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x423000a0

                          AREA ||i.SDIO_CmdStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_CmdStructInit PROC
;;;380      */
;;;381    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;382    {
;;;383      /* SDIO_CmdInitStruct members default value */
;;;384      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
;;;385      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;386      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
000004  6041              STR      r1,[r0,#4]
;;;387      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
000006  6081              STR      r1,[r0,#8]
;;;388      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
000008  60c1              STR      r1,[r0,#0xc]
00000a  6101              STR      r1,[r0,#0x10]
;;;389    }
00000c  4770              BX       lr
;;;390    
                          ENDP


                          AREA ||i.SDIO_CommandCompletionCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CommandCompletionCmd PROC
;;;599      */
;;;600    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;601    { 
;;;602      /* Check the parameters */
;;;603      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;604      
;;;605      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;606    }
000004  4770              BX       lr
;;;607    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x423001b0

                          AREA ||i.SDIO_DMACmd||, CODE, READONLY, ALIGN=2

                  SDIO_DMACmd PROC
;;;329      */
;;;330    void SDIO_DMACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;331    {
;;;332      /* Check the parameters */
;;;333      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;334      
;;;335      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;336    }
000004  4770              BX       lr
;;;337    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x4230058c

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=2

                  SDIO_DataConfig PROC
;;;429      */
;;;430    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  b510              PUSH     {r4,lr}
;;;431    {
;;;432      uint32_t tmpreg = 0;
;;;433      
;;;434      /* Check the parameters */
;;;435      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;436      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;437      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;438      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;439      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;440    
;;;441    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;442      /* Set the SDIO Data TimeOut value */
;;;443      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
000002  4909              LDR      r1,|L8.40|
000004  6802              LDR      r2,[r0,#0]
000006  624a              STR      r2,[r1,#0x24]
;;;444    
;;;445    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;446      /* Set the SDIO DataLength value */
;;;447      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
000008  6842              LDR      r2,[r0,#4]
00000a  628a              STR      r2,[r1,#0x28]
;;;448    
;;;449    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;450      /* Get the SDIO DCTRL value */
;;;451      tmpreg = SDIO->DCTRL;
00000c  6aca              LDR      r2,[r1,#0x2c]
;;;452      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;453      tmpreg &= DCTRL_CLEAR_MASK;
00000e  e9d03402          LDRD     r3,r4,[r0,#8]
;;;454      /* Set DEN bit according to SDIO_DPSM value */
;;;455      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;456      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;457      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;458      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
000012  4323              ORRS     r3,r3,r4
000014  e9d04004          LDRD     r4,r0,[r0,#0x10]
000018  4304              ORRS     r4,r4,r0
00001a  f02202f7          BIC      r2,r2,#0xf7           ;453
00001e  4323              ORRS     r3,r3,r4
000020  4313              ORRS     r3,r3,r2
;;;459               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;460    
;;;461      /* Write to SDIO DCTRL */
;;;462      SDIO->DCTRL = tmpreg;
000022  62cb              STR      r3,[r1,#0x2c]
;;;463    }
000024  bd10              POP      {r4,pc}
;;;464    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_DataStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_DataStructInit PROC
;;;470      */
;;;471    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;472    {
;;;473      /* SDIO_DataInitStruct members default value */
;;;474      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
;;;475      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
;;;476      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
000008  6041              STR      r1,[r0,#4]
;;;477      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00000a  6081              STR      r1,[r0,#8]
;;;478      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00000c  60c1              STR      r1,[r0,#0xc]
;;;479      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
00000e  6101              STR      r1,[r0,#0x10]
000010  6141              STR      r1,[r0,#0x14]
;;;480    }
000012  4770              BX       lr
;;;481    
                          ENDP


                          AREA ||i.SDIO_DeInit||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;159      */
;;;160    void SDIO_DeInit(void)
000000  4806              LDR      r0,|L10.28|
;;;161    {
;;;162      SDIO->POWER = 0x00000000;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;163      SDIO->CLKCR = 0x00000000;
000006  6041              STR      r1,[r0,#4]
;;;164      SDIO->ARG = 0x00000000;
000008  6081              STR      r1,[r0,#8]
;;;165      SDIO->CMD = 0x00000000;
00000a  60c1              STR      r1,[r0,#0xc]
;;;166      SDIO->DTIMER = 0x00000000;
00000c  6241              STR      r1,[r0,#0x24]
;;;167      SDIO->DLEN = 0x00000000;
00000e  6281              STR      r1,[r0,#0x28]
;;;168      SDIO->DCTRL = 0x00000000;
000010  62c1              STR      r1,[r0,#0x2c]
;;;169      SDIO->ICR = 0x00C007FF;
000012  4a03              LDR      r2,|L10.32|
000014  6382              STR      r2,[r0,#0x38]
;;;170      SDIO->MASK = 0x00000000;
000016  63c1              STR      r1,[r0,#0x3c]
;;;171    }
000018  4770              BX       lr
;;;172    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40018000
                  |L10.32|
                          DCD      0x00c007ff

                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetCommandResponse PROC
;;;395      */
;;;396    uint8_t SDIO_GetCommandResponse(void)
000000  4801              LDR      r0,|L11.8|
;;;397    {
;;;398      return (uint8_t)(SDIO->RESPCMD);
000002  6900              LDR      r0,[r0,#0x10]
000004  b2c0              UXTB     r0,r0
;;;399    }
000006  4770              BX       lr
;;;400    
                          ENDP

                  |L11.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=2

                  SDIO_GetDataCounter PROC
;;;486      */
;;;487    uint32_t SDIO_GetDataCounter(void)
000000  4801              LDR      r0,|L12.8|
;;;488    { 
;;;489      return SDIO->DCOUNT;
000002  6b00              LDR      r0,[r0,#0x30]
;;;490    }
000004  4770              BX       lr
;;;491    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=2

                  SDIO_GetFIFOCount PROC
;;;516      */
;;;517    uint32_t SDIO_GetFIFOCount(void)
000000  4801              LDR      r0,|L13.8|
;;;518    { 
;;;519      return SDIO->FIFOCNT;
000002  6c80              LDR      r0,[r0,#0x48]
;;;520    }
000004  4770              BX       lr
;;;521    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetFlagStatus PROC
;;;664      */
;;;665    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000000  4a03              LDR      r2,|L14.16|
;;;666    { 
000002  4601              MOV      r1,r0
;;;667      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;668      
;;;669      /* Check the parameters */
;;;670      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;671      
;;;672      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000006  6b52              LDR      r2,[r2,#0x34]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L14.14|
;;;673      {
;;;674        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L14.14|
;;;675      }
;;;676      else
;;;677      {
;;;678        bitstatus = RESET;
;;;679      }
;;;680      return bitstatus;
;;;681    }
00000e  4770              BX       lr
;;;682    
                          ENDP

                  |L14.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetITStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetITStatus PROC
;;;741      */
;;;742    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
000000  4a03              LDR      r2,|L15.16|
;;;743    { 
000002  4601              MOV      r1,r0
;;;744      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;745      
;;;746      /* Check the parameters */
;;;747      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;748      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
000006  6b52              LDR      r2,[r2,#0x34]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L15.14|
;;;749      {
;;;750        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L15.14|
;;;751      }
;;;752      else
;;;753      {
;;;754        bitstatus = RESET;
;;;755      }
;;;756      return bitstatus;
;;;757    }
00000e  4770              BX       lr
;;;758    
                          ENDP

                  |L15.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_GetPowerState PROC
;;;267      */
;;;268    uint32_t SDIO_GetPowerState(void)
000000  4802              LDR      r0,|L16.12|
;;;269    {
;;;270      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000002  6800              LDR      r0,[r0,#0]
000004  f0000003          AND      r0,r0,#3
;;;271    }
000008  4770              BX       lr
;;;272    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetResponse PROC
;;;410      */
;;;411    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
000000  4901              LDR      r1,|L17.8|
;;;412    {
;;;413      __IO uint32_t tmp = 0;
;;;414    
;;;415      /* Check the parameters */
;;;416      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;417    
;;;418      tmp = SDIO_RESP_ADDR + SDIO_RESP;
;;;419      
;;;420      return (*(__IO uint32_t *) tmp); 
000002  5840              LDR      r0,[r0,r1]
;;;421    }
000004  4770              BX       lr
;;;422    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x40018014

                          AREA ||i.SDIO_ITConfig||, CODE, READONLY, ALIGN=2

                  SDIO_ITConfig PROC
;;;305      */
;;;306    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L18.20|
;;;307    {
;;;308      /* Check the parameters */
;;;309      assert_param(IS_SDIO_IT(SDIO_IT));
;;;310      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;311      
;;;312      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;313      {
;;;314        /* Enable the SDIO interrupts */
;;;315        SDIO->MASK |= SDIO_IT;
;;;316      }
;;;317      else
;;;318      {
;;;319        /* Disable the SDIO interrupts */
;;;320        SDIO->MASK &= ~SDIO_IT;
000004  6bd1              LDR      r1,[r2,#0x3c]
000006  d001              BEQ      |L18.12|
000008  4301              ORRS     r1,r1,r0              ;315
00000a  e000              B        |L18.14|
                  |L18.12|
00000c  4381              BICS     r1,r1,r0
                  |L18.14|
00000e  63d1              STR      r1,[r2,#0x3c]         ;315
;;;321      } 
;;;322    }
000010  4770              BX       lr
;;;323    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=2

                  SDIO_Init PROC
;;;179      */
;;;180    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;181    {
;;;182      uint32_t tmpreg = 0;
;;;183        
;;;184      /* Check the parameters */
;;;185      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;186      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;187      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;188      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;189      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;190       
;;;191    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;192      /* Get the SDIO CLKCR value */
;;;193      tmpreg = SDIO->CLKCR;
000002  4b09              LDR      r3,|L19.40|
000004  6859              LDR      r1,[r3,#4]
;;;194      
;;;195      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;196      tmpreg &= CLKCR_CLEAR_MASK;
000006  f64762ff          MOV      r2,#0x7eff
00000a  4391              BICS     r1,r1,r2
;;;197      
;;;198      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;199      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;200      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;201      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;202      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;203      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;204      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
00000c  7d02              LDRB     r2,[r0,#0x14]
00000e  6884              LDR      r4,[r0,#8]
000010  68c5              LDR      r5,[r0,#0xc]
000012  4322              ORRS     r2,r2,r4
000014  6844              LDR      r4,[r0,#4]
000016  432c              ORRS     r4,r4,r5
000018  4322              ORRS     r2,r2,r4
00001a  6804              LDR      r4,[r0,#0]
00001c  6900              LDR      r0,[r0,#0x10]
00001e  4322              ORRS     r2,r2,r4
000020  4302              ORRS     r2,r2,r0
000022  430a              ORRS     r2,r2,r1
;;;205                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;206                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;207      
;;;208      /* Write to SDIO CLKCR */
;;;209      SDIO->CLKCR = tmpreg;
000024  605a              STR      r2,[r3,#4]
;;;210    }
000026  bd30              POP      {r4,r5,pc}
;;;211    
                          ENDP

                  |L19.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_ReadData||, CODE, READONLY, ALIGN=2

                  SDIO_ReadData PROC
;;;496      */
;;;497    uint32_t SDIO_ReadData(void)
000000  4801              LDR      r0,|L20.8|
;;;498    { 
;;;499      return SDIO->FIFO;
000002  6800              LDR      r0,[r0,#0]
;;;500    }
000004  4770              BX       lr
;;;501    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x40018080

                          AREA ||i.SDIO_SendCEATACmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendCEATACmd PROC
;;;625      */
;;;626    void SDIO_SendCEATACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L21.8|
;;;627    { 
;;;628      /* Check the parameters */
;;;629      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;630      
;;;631      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;632    }
000004  4770              BX       lr
;;;633    
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x423001b8

                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=2

                  SDIO_SendCommand PROC
;;;344      */
;;;345    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  b510              PUSH     {r4,lr}
;;;346    {
;;;347      uint32_t tmpreg = 0;
;;;348      
;;;349      /* Check the parameters */
;;;350      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;351      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;352      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;353      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;354      
;;;355    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;356      /* Set the SDIO Argument value */
;;;357      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000002  4908              LDR      r1,|L22.36|
000004  6802              LDR      r2,[r0,#0]
000006  608a              STR      r2,[r1,#8]
;;;358      
;;;359    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;360      /* Get the SDIO CMD value */
;;;361      tmpreg = SDIO->CMD;
000008  68ca              LDR      r2,[r1,#0xc]
;;;362      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;363      tmpreg &= CMD_CLEAR_MASK;
00000a  e9d03401          LDRD     r3,r4,[r0,#4]
;;;364      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;365      /* Set WAITRESP bits according to SDIO_Response value */
;;;366      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;367      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;368      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
00000e  4323              ORRS     r3,r3,r4
000010  e9d04003          LDRD     r4,r0,[r0,#0xc]
000014  4304              ORRS     r4,r4,r0
000016  f36f020a          BFC      r2,#0,#11             ;363
00001a  4323              ORRS     r3,r3,r4
00001c  4313              ORRS     r3,r3,r2
;;;369               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;370      
;;;371      /* Write to SDIO CMD */
;;;372      SDIO->CMD = tmpreg;
00001e  60cb              STR      r3,[r1,#0xc]
;;;373    }
000020  bd10              POP      {r4,pc}
;;;374    
                          ENDP

000022  0000              DCW      0x0000
                  |L22.36|
                          DCD      0x40018000

                          AREA ||i.SDIO_SendSDIOSuspendCmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendSDIOSuspendCmd PROC
;;;585      */
;;;586    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L23.8|
;;;587    { 
;;;588      /* Check the parameters */
;;;589      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;590      
;;;591      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;592    }
000004  4770              BX       lr
;;;593    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x423001ac

                          AREA ||i.SDIO_SetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_SetPowerState PROC
;;;249      */
;;;250    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
000000  4904              LDR      r1,|L24.20|
;;;251    {
;;;252      /* Check the parameters */
;;;253      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;254      
;;;255      SDIO->POWER &= PWR_PWRCTRL_MASK;
000002  680a              LDR      r2,[r1,#0]
000004  f0220203          BIC      r2,r2,#3
000008  600a              STR      r2,[r1,#0]
;;;256      SDIO->POWER |= SDIO_PowerState;
00000a  680a              LDR      r2,[r1,#0]
00000c  4302              ORRS     r2,r2,r0
00000e  600a              STR      r2,[r1,#0]
;;;257    }
000010  4770              BX       lr
;;;258    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_SetSDIOOperation||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOOperation PROC
;;;571      */
;;;572    void SDIO_SetSDIOOperation(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;573    { 
;;;574      /* Check the parameters */
;;;575      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;576      
;;;577      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;578    }
000004  4770              BX       lr
;;;579    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x423005ac

                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;557      */
;;;558    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000000  4901              LDR      r1,|L26.8|
;;;559    {
;;;560      /* Check the parameters */
;;;561      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;562      
;;;563      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  6008              STR      r0,[r1,#0]
;;;564    }
000004  4770              BX       lr
;;;565    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x423005a8

                          AREA ||i.SDIO_StartSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StartSDIOReadWait PROC
;;;527      */
;;;528    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L27.8|
;;;529    { 
;;;530      /* Check the parameters */
;;;531      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;532      
;;;533      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;534    }
000004  4770              BX       lr
;;;535    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      0x423005a0

                          AREA ||i.SDIO_StopSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StopSDIOReadWait PROC
;;;541      */
;;;542    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;543    { 
;;;544      /* Check the parameters */
;;;545      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;546      
;;;547      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;548    }
000004  4770              BX       lr
;;;549    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x423005a4

                          AREA ||i.SDIO_StructInit||, CODE, READONLY, ALIGN=1

                  SDIO_StructInit PROC
;;;217      */
;;;218    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;219    {
;;;220      /* SDIO_InitStruct members default value */
;;;221      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000002  7501              STRB     r1,[r0,#0x14]
;;;222      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;223      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000004  6001              STR      r1,[r0,#0]
;;;224      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000006  6041              STR      r1,[r0,#4]
;;;225      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000008  6081              STR      r1,[r0,#8]
;;;226      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00000a  60c1              STR      r1,[r0,#0xc]
00000c  6101              STR      r1,[r0,#0x10]
;;;227    }
00000e  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.SDIO_WriteData||, CODE, READONLY, ALIGN=2

                  SDIO_WriteData PROC
;;;506      */
;;;507    void SDIO_WriteData(uint32_t Data)
000000  4901              LDR      r1,|L30.8|
;;;508    { 
;;;509      SDIO->FIFO = Data;
000002  6008              STR      r0,[r1,#0]
;;;510    }
000004  4770              BX       lr
;;;511    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      0x40018080

;*** Start embedded assembler ***

#line 1 "Source\\FWLib\\src\\stm32f10x_sdio.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_sdio_c_c8827541____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f10x_sdio_c_c8827541____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_sdio_c_c8827541____REVSH|
#line 128
|__asm___16_stm32f10x_sdio_c_c8827541____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
