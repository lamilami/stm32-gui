; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\stm32f10x_gpio.o --depend=.\ouput\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\stm32f10x_gpio.crf Source\FWLib\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;157      */
;;;158    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  e8bd4010          POP      {r4,lr}
000010  2001              MOVS     r0,#1
000012  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;162    }
;;;163    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;106      */
;;;107    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  4925              LDR      r1,|L2.152|
;;;108    {
000002  b510              PUSH     {r4,lr}
;;;109      /* Check the parameters */
;;;110      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;111      
;;;112      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L2.22|
;;;113      {
;;;114        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2004              MOVS     r0,#4
000014  e03b              B        |L2.142|
                  |L2.22|
;;;116      }
;;;117      else if (GPIOx == GPIOB)
000016  4921              LDR      r1,|L2.156|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L2.42|
;;;118      {
;;;119        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2008              MOVS     r0,#8
000028  e031              B        |L2.142|
                  |L2.42|
;;;121      }
;;;122      else if (GPIOx == GPIOC)
00002a  491d              LDR      r1,|L2.160|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L2.62|
;;;123      {
;;;124        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2010              MOVS     r0,#0x10
00003c  e027              B        |L2.142|
                  |L2.62|
;;;126      }
;;;127      else if (GPIOx == GPIOD)
00003e  4919              LDR      r1,|L2.164|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L2.82|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2020              MOVS     r0,#0x20
000048  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2020              MOVS     r0,#0x20
000050  e01d              B        |L2.142|
                  |L2.82|
;;;131      }    
;;;132      else if (GPIOx == GPIOE)
000052  4915              LDR      r1,|L2.168|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L2.102|
;;;133      {
;;;134        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2040              MOVS     r0,#0x40
000064  e013              B        |L2.142|
                  |L2.102|
;;;136      } 
;;;137      else if (GPIOx == GPIOF)
000066  4911              LDR      r1,|L2.172|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L2.122|
;;;138      {
;;;139        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2080              MOVS     r0,#0x80
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2080              MOVS     r0,#0x80
000078  e009              B        |L2.142|
                  |L2.122|
;;;141      }
;;;142      else
;;;143      {
;;;144        if (GPIOx == GPIOG)
00007a  490d              LDR      r1,|L2.176|
00007c  4288              CMP      r0,r1
00007e  d10a              BNE      |L2.150|
;;;145        {
;;;146          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000080  1584              ASRS     r4,r0,#22
000082  2101              MOVS     r1,#1
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  4620              MOV      r0,r4
                  |L2.142|
00008e  e8bd4010          POP      {r4,lr}
000092  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L2.150|
;;;148        }
;;;149      }
;;;150    }
000096  bd10              POP      {r4,pc}
;;;151    
                          ENDP

                  |L2.152|
                          DCD      0x40010800
                  |L2.156|
                          DCD      0x40010c00
                  |L2.160|
                          DCD      0x40011000
                  |L2.164|
                          DCD      0x40011400
                  |L2.168|
                          DCD      0x40011800
                  |L2.172|
                          DCD      0x40011c00
                  |L2.176|
                          DCD      0x40012000

                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;626      */
;;;627    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  4901              LDR      r1,|L3.8|
;;;628    { 
;;;629      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;630    
;;;631      /* Configure MII_RMII selection bit */ 
;;;632      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000002  6008              STR      r0,[r1,#0]
;;;633    }
000004  4770              BX       lr
;;;634      
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x422000dc

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;605      */
;;;606    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b510              PUSH     {r4,lr}
;;;607    {
;;;608      uint32_t tmp = 0x00;
;;;609      /* Check the parameters */
;;;610      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;611      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;612      
;;;613      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000002  078a              LSLS     r2,r1,#30
;;;614      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000004  f0210403          BIC      r4,r1,#3
000008  4906              LDR      r1,|L4.36|
00000a  0f12              LSRS     r2,r2,#28             ;613
00000c  4421              ADD      r1,r1,r4
00000e  230f              MOVS     r3,#0xf               ;613
000010  688c              LDR      r4,[r1,#8]
000012  4093              LSLS     r3,r3,r2              ;613
000014  439c              BICS     r4,r4,r3
000016  608c              STR      r4,[r1,#8]
;;;615      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000018  688b              LDR      r3,[r1,#8]
00001a  4090              LSLS     r0,r0,r2
00001c  4303              ORRS     r3,r3,r0
00001e  608b              STR      r3,[r1,#8]
;;;616    }
000020  bd10              POP      {r4,pc}
;;;617    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x40010000

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;481      */
;;;482    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;483    {
;;;484      /* Check the parameters */
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      
;;;487      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;488    }
000004  4770              BX       lr
;;;489    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;460      */
;;;461    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  4b05              LDR      r3,|L6.24|
;;;462    {
000002  b510              PUSH     {r4,lr}
;;;463      uint32_t tmpreg = 0x00;
;;;464      /* Check the parameters */
;;;465      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;466      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;467        
;;;468      tmpreg = AFIO->EVCR;
000004  681a              LDR      r2,[r3,#0]
;;;469      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;470      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000006  f64f7480          MOV      r4,#0xff80
00000a  4022              ANDS     r2,r2,r4
;;;471      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea421000          ORR      r0,r2,r0,LSL #4
;;;472      tmpreg |= GPIO_PinSource;
000010  4308              ORRS     r0,r0,r1
;;;473      AFIO->EVCR = tmpreg;
000012  6018              STR      r0,[r3,#0]
;;;474    }
000014  bd10              POP      {r4,pc}
;;;475    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;171      */
;;;172    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;173    {
;;;174      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;175      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;176      /* Check the parameters */
;;;177      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;178      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;179      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;180      
;;;181    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;182      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
000002  78cc              LDRB     r4,[r1,#3]
000004  2200              MOVS     r2,#0                 ;174
000006  f004030f          AND      r3,r4,#0xf
;;;183      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
00000a  06e4              LSLS     r4,r4,#27
00000c  d501              BPL      |L7.18|
;;;184      { 
;;;185        /* Check the parameters */
;;;186        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;187        /* Output mode */
;;;188        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
00000e  788c              LDRB     r4,[r1,#2]
000010  4323              ORRS     r3,r3,r4
                  |L7.18|
;;;189      }
;;;190    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;191      /* Configure the eight low port pins */
;;;192      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000012  880c              LDRH     r4,[r1,#0]
;;;193      {
;;;194        tmpreg = GPIOx->CRL;
;;;195        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;196        {
;;;197          pos = ((uint32_t)0x01) << pinpos;
;;;198          /* Get the port pins position */
;;;199          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;200          if (currentpin == pos)
;;;201          {
;;;202            pos = pinpos << 2;
;;;203            /* Clear the corresponding low control register bits */
;;;204            pinmask = ((uint32_t)0x0F) << pos;
000014  f04f0c0f          MOV      r12,#0xf
000018  f0140fff          TST      r4,#0xff              ;192
00001c  f04f0e01          MOV      lr,#1                 ;197
000020  d01a              BEQ      |L7.88|
000022  6805              LDR      r5,[r0,#0]            ;194
                  |L7.36|
000024  880e              LDRH     r6,[r1,#0]            ;199
000026  fa0ef402          LSL      r4,lr,r2              ;197
00002a  4026              ANDS     r6,r6,r4              ;199
00002c  42a6              CMP      r6,r4                 ;200
00002e  d10f              BNE      |L7.80|
000030  0096              LSLS     r6,r2,#2              ;202
000032  fa0cf706          LSL      r7,r12,r6
;;;205            tmpreg &= ~pinmask;
000036  43bd              BICS     r5,r5,r7
;;;206            /* Write the mode configuration in the corresponding bits */
;;;207            tmpreg |= (currentmode << pos);
000038  fa03f606          LSL      r6,r3,r6
00003c  4335              ORRS     r5,r5,r6
;;;208            /* Reset the corresponding ODR bit */
;;;209            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00003e  78ce              LDRB     r6,[r1,#3]
000040  2e28              CMP      r6,#0x28
000042  d002              BEQ      |L7.74|
;;;210            {
;;;211              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
;;;212            }
;;;213            else
;;;214            {
;;;215              /* Set the corresponding ODR bit */
;;;216              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000044  2e48              CMP      r6,#0x48
000046  d002              BEQ      |L7.78|
000048  e002              B        |L7.80|
                  |L7.74|
00004a  6144              STR      r4,[r0,#0x14]         ;211
00004c  e000              B        |L7.80|
                  |L7.78|
;;;217              {
;;;218                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
00004e  6104              STR      r4,[r0,#0x10]
                  |L7.80|
000050  1c52              ADDS     r2,r2,#1              ;195
000052  2a08              CMP      r2,#8                 ;195
000054  d3e6              BCC      |L7.36|
;;;219              }
;;;220            }
;;;221          }
;;;222        }
;;;223        GPIOx->CRL = tmpreg;
000056  6005              STR      r5,[r0,#0]
                  |L7.88|
;;;224      }
;;;225    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;226      /* Configure the eight high port pins */
;;;227      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000058  880a              LDRH     r2,[r1,#0]
00005a  2aff              CMP      r2,#0xff
00005c  d91d              BLS      |L7.154|
;;;228      {
;;;229        tmpreg = GPIOx->CRH;
00005e  6845              LDR      r5,[r0,#4]
;;;230        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000060  2200              MOVS     r2,#0
                  |L7.98|
;;;231        {
;;;232          pos = (((uint32_t)0x01) << (pinpos + 0x08));
000062  f1020608          ADD      r6,r2,#8
000066  fa0ef406          LSL      r4,lr,r6
;;;233          /* Get the port pins position */
;;;234          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
00006a  880e              LDRH     r6,[r1,#0]
00006c  4026              ANDS     r6,r6,r4
;;;235          if (currentpin == pos)
00006e  42a6              CMP      r6,r4
000070  d10f              BNE      |L7.146|
;;;236          {
;;;237            pos = pinpos << 2;
000072  0096              LSLS     r6,r2,#2
;;;238            /* Clear the corresponding high control register bits */
;;;239            pinmask = ((uint32_t)0x0F) << pos;
000074  fa0cf706          LSL      r7,r12,r6
;;;240            tmpreg &= ~pinmask;
000078  ea250707          BIC      r7,r5,r7
;;;241            /* Write the mode configuration in the corresponding bits */
;;;242            tmpreg |= (currentmode << pos);
00007c  fa03f506          LSL      r5,r3,r6
;;;243            /* Reset the corresponding ODR bit */
;;;244            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000080  78ce              LDRB     r6,[r1,#3]
000082  433d              ORRS     r5,r5,r7              ;242
000084  2e28              CMP      r6,#0x28
000086  d100              BNE      |L7.138|
;;;245            {
;;;246              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
000088  6144              STR      r4,[r0,#0x14]
                  |L7.138|
;;;247            }
;;;248            /* Set the corresponding ODR bit */
;;;249            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00008a  78ce              LDRB     r6,[r1,#3]
00008c  2e48              CMP      r6,#0x48
00008e  d100              BNE      |L7.146|
;;;250            {
;;;251              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
000090  6104              STR      r4,[r0,#0x10]
                  |L7.146|
000092  1c52              ADDS     r2,r2,#1              ;230
000094  2a08              CMP      r2,#8                 ;230
000096  d3e4              BCC      |L7.98|
;;;252            }
;;;253          }
;;;254        }
;;;255        GPIOx->CRH = tmpreg;
000098  6045              STR      r5,[r0,#4]
                  |L7.154|
;;;256      }
;;;257    }
00009a  bdf0              POP      {r4-r7,pc}
;;;258    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;430      */
;;;431    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;432    {
;;;433      uint32_t tmp = 0x00010000;
;;;434      
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438      
;;;439      tmp |= GPIO_Pin;
;;;440      /* Set LCKK bit */
;;;441      GPIOx->LCKR = tmp;
000004  6182              STR      r2,[r0,#0x18]
;;;442      /* Reset LCKK bit */
;;;443      GPIOx->LCKR =  GPIO_Pin;
000006  6181              STR      r1,[r0,#0x18]
;;;444      /* Set LCKK bit */
;;;445      GPIOx->LCKR = tmp;
000008  6182              STR      r2,[r0,#0x18]
;;;446      /* Read LCKK bit*/
;;;447      tmp = GPIOx->LCKR;
00000a  6981              LDR      r1,[r0,#0x18]
;;;448      /* Read LCKK bit*/
;;;449      tmp = GPIOx->LCKR;
00000c  6980              LDR      r0,[r0,#0x18]
;;;450    }
00000e  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;545      */
;;;546    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;547    {
;;;548      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;549    
;;;550      /* Check the parameters */
;;;551      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;552      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;553      
;;;554      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;555      {
;;;556        tmpreg = AFIO->MAPR2;
000002  4c14              LDR      r4,|L9.84|
000004  2800              CMP      r0,#0                 ;554
000006  da01              BGE      |L9.12|
000008  69e3              LDR      r3,[r4,#0x1c]
00000a  e000              B        |L9.14|
                  |L9.12|
;;;557      }
;;;558      else
;;;559      {
;;;560        tmpreg = AFIO->MAPR;
00000c  6863              LDR      r3,[r4,#4]
                  |L9.14|
;;;561      }
;;;562    
;;;563      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;564      tmp = GPIO_Remap & LSB_MASK;
;;;565    
;;;566      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;567      {
;;;568        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;569        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;570      }
;;;571      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;572      {
;;;573        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;574        tmpreg &= ~tmp1;
;;;575        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;576      }
;;;577      else
;;;578      {
;;;579        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00000e  0d42              LSRS     r2,r0,#21
000010  0112              LSLS     r2,r2,#4
000012  b285              UXTH     r5,r0                 ;564
000014  f3c05701          UBFX     r7,r0,#20,#2          ;566
000018  4095              LSLS     r5,r5,r2
00001a  f3c04603          UBFX     r6,r0,#16,#4          ;563
00001e  2f03              CMP      r7,#3                 ;566
000020  d005              BEQ      |L9.46|
000022  02c2              LSLS     r2,r0,#11             ;571
000024  d50a              BPL      |L9.60|
000026  2203              MOVS     r2,#3                 ;573
000028  40b2              LSLS     r2,r2,r6              ;573
00002a  4393              BICS     r3,r3,r2              ;574
00002c  e007              B        |L9.62|
                  |L9.46|
00002e  f0236270          BIC      r2,r3,#0xf000000      ;568
000032  6863              LDR      r3,[r4,#4]            ;569
000034  f0236370          BIC      r3,r3,#0xf000000      ;569
000038  6063              STR      r3,[r4,#4]            ;569
00003a  e002              B        |L9.66|
                  |L9.60|
00003c  43ab              BICS     r3,r3,r5
                  |L9.62|
00003e  f0436270          ORR      r2,r3,#0xf000000      ;575
                  |L9.66|
;;;580        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;581      }
;;;582    
;;;583      if (NewState != DISABLE)
000042  b101              CBZ      r1,|L9.70|
;;;584      {
;;;585        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000044  432a              ORRS     r2,r2,r5
                  |L9.70|
;;;586      }
;;;587    
;;;588      if((GPIO_Remap & 0x80000000) == 0x80000000)
000046  2800              CMP      r0,#0
000048  da01              BGE      |L9.78|
;;;589      {
;;;590        AFIO->MAPR2 = tmpreg;
00004a  61e2              STR      r2,[r4,#0x1c]
;;;591      }
;;;592      else
;;;593      {
;;;594        AFIO->MAPR = tmpreg;
;;;595      }  
;;;596    }
00004c  bdf0              POP      {r4-r7,pc}
                  |L9.78|
00004e  6062              STR      r2,[r4,#4]            ;594
000050  bdf0              POP      {r4-r7,pc}
;;;597    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;303      */
;;;304    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6880              LDR      r0,[r0,#8]
;;;305    {
;;;306      /* Check the parameters */
;;;307      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;308      
;;;309      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;310    }
000004  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;279      */
;;;280    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;281    {
;;;282      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;283      
;;;284      /* Check the parameters */
;;;285      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;286      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;287      
;;;288      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6892              LDR      r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L11.12|
;;;289      {
;;;290        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;291      }
;;;292      else
;;;293      {
;;;294        bitstatus = (uint8_t)Bit_RESET;
;;;295      }
;;;296      return bitstatus;
;;;297    }
00000c  4770              BX       lr
;;;298    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;341      */
;;;342    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  68c0              LDR      r0,[r0,#0xc]
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;346        
;;;347      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;348    }
000004  4770              BX       lr
;;;349    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;318      */
;;;319    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;320    {
;;;321      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;322      /* Check the parameters */
;;;323      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;324      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;325      
;;;326      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d2              LDR      r2,[r2,#0xc]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L13.12|
;;;327      {
;;;328        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;329      }
;;;330      else
;;;331      {
;;;332        bitstatus = (uint8_t)Bit_RESET;
;;;333      }
;;;334      return bitstatus;
;;;335    }
00000c  4770              BX       lr
;;;336    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;372      */
;;;373    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;374    {
;;;375      /* Check the parameters */
;;;376      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;377      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;378      
;;;379      GPIOx->BRR = GPIO_Pin;
;;;380    }
000002  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;356      */
;;;357    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;358    {
;;;359      /* Check the parameters */
;;;360      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;361      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;362      
;;;363      GPIOx->BSRR = GPIO_Pin;
;;;364    }
000002  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;264      */
;;;265    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;266    {
;;;267      /* Reset GPIO init structure parameters values */
;;;268      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;269      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;270      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;271    }
00000e  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;415      */
;;;416    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;417    {
;;;418      /* Check the parameters */
;;;419      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;420      
;;;421      GPIOx->ODR = PortVal;
;;;422    }
000002  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;392      */
;;;393    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L18.6|
;;;394    {
;;;395      /* Check the parameters */
;;;396      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;397      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;398      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;399      
;;;400      if (BitVal != Bit_RESET)
;;;401      {
;;;402        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
;;;403      }
;;;404      else
;;;405      {
;;;406        GPIOx->BRR = GPIO_Pin;
;;;407      }
;;;408    }
000004  4770              BX       lr
                  |L18.6|
000006  6141              STR      r1,[r0,#0x14]         ;406
000008  4770              BX       lr
;;;409    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Source\\FWLib\\src\\stm32f10x_gpio.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f10x_gpio_c_f8e8e39a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f10x_gpio_c_f8e8e39a____REVSH|
#line 128
|__asm___16_stm32f10x_gpio_c_f8e8e39a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
