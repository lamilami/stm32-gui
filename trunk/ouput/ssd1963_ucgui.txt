; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\ssd1963_ucgui.o --depend=.\ouput\ssd1963_ucgui.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\ssd1963_ucgui.crf Source\uCGUI\LCDDriver\ssd1963_ucgui.c]
                          THUMB

                          AREA ||i.DrawBitLine16BPP||, CODE, READONLY, ALIGN=2

                  DrawBitLine16BPP PROC
;;;541    
;;;542    void DrawBitLine16BPP(int x, int y, U16 const*p, int xsize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;543    {
000004  4604              MOV      r4,r0
;;;544      LCD_PIXELINDEX Index;
;;;545      if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS)==0)
000006  4810              LDR      r0,|L1.72|
000008  4615              MOV      r5,r2                 ;543
00000a  461e              MOV      r6,r3                 ;543
00000c  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
;;;546      {
;;;547        for (;xsize > 0; xsize--,x++,p++)
;;;548        {
;;;549          LCD_SetPoint(x, y, *p);
00000e  b28f              UXTH     r7,r1
000010  0780              LSLS     r0,r0,#30             ;545
000012  d508              BPL      |L1.38|
000014  e014              B        |L1.64|
                  |L1.22|
000016  882a              LDRH     r2,[r5,#0]
000018  4639              MOV      r1,r7
00001a  b2a0              UXTH     r0,r4
00001c  f7fffffe          BL       LCD_SetPoint
000020  1e76              SUBS     r6,r6,#1              ;547
000022  1c64              ADDS     r4,r4,#1              ;547
000024  1cad              ADDS     r5,r5,#2              ;547
                  |L1.38|
000026  2e00              CMP      r6,#0                 ;547
000028  dcf5              BGT      |L1.22|
                  |L1.42|
;;;550        }
;;;551      }
;;;552      else
;;;553      {   /* Handle transparent bitmap */
;;;554        for (; xsize > 0; xsize--, x++, p++)
;;;555        {
;;;556          Index = *p;
;;;557          if (Index)
;;;558          {
;;;559            LCD_SetPoint(x+0, y, Index);
;;;560          }
;;;561        }
;;;562      }
;;;563    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.46|
00002e  882a              LDRH     r2,[r5,#0]            ;556
000030  b11a              CBZ      r2,|L1.58|
000032  4639              MOV      r1,r7                 ;557
000034  b2a0              UXTH     r0,r4                 ;559
000036  f7fffffe          BL       LCD_SetPoint
                  |L1.58|
00003a  1e76              SUBS     r6,r6,#1              ;554
00003c  1c64              ADDS     r4,r4,#1              ;554
00003e  1cad              ADDS     r5,r5,#2              ;554
                  |L1.64|
000040  2e00              CMP      r6,#0                 ;554
000042  dcf4              BGT      |L1.46|
000044  e7f1              B        |L1.42|
;;;564    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      GUI_Context

                          AREA ||i.DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  DrawBitLine1BPP PROC
;;;61     
;;;62     void DrawBitLine1BPP(int x, int y, U8 const*p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;63     {
000004  4605              MOV      r5,r0
000006  e9dd400a          LDRD     r4,r0,[sp,#0x28]
00000a  468b              MOV      r11,r1
;;;64       LCD_PIXELINDEX pixels;
;;;65       LCD_PIXELINDEX Index0 = *(pTrans+0);
00000c  f8b09000          LDRH     r9,[r0,#0]
;;;66       LCD_PIXELINDEX Index1 = *(pTrans+1);
000010  f8b08002          LDRH     r8,[r0,#2]
;;;67     /*
;;;68     // Jump to right entry point
;;;69     */
;;;70       pixels = *p;
;;;71       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS|LCD_DRAWMODE_XOR)) {
000014  488f              LDR      r0,|L2.596|
000016  7816              LDRB     r6,[r2,#0]            ;70
000018  4692              MOV      r10,r2                ;63
00001a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
;;;72       case 0:
;;;73         #if defined (SETNEXTPIXEL)   /* Optimization ! */
;;;74           x+=Diff;
;;;75           Set_Dot_Addr_LCD(x,y);
;;;76         #endif
;;;77         switch (Diff&7) {
;;;78         case 0:   
;;;79           goto WriteBit0;
;;;80         case 1:   
;;;81           goto WriteBit1;
;;;82         case 2:
;;;83           goto WriteBit2;
;;;84         case 3:
;;;85           goto WriteBit3;
;;;86         case 4:
;;;87           goto WriteBit4;
;;;88         case 5:   
;;;89           goto WriteBit5;
;;;90         case 6:   
;;;91           goto WriteBit6;
;;;92         case 7:   
;;;93           goto WriteBit7;
;;;94         }
;;;95         break;
;;;96       case LCD_DRAWMODE_TRANS:
;;;97         switch (Diff&7) {
;;;98         case 0:
;;;99           goto WriteTBit0;
;;;100        case 1:
;;;101          goto WriteTBit1;
;;;102        case 2:
;;;103          goto WriteTBit2;
;;;104        case 3:
;;;105          goto WriteTBit3;
;;;106        case 4:
;;;107          goto WriteTBit4;
;;;108        case 5:   
;;;109          goto WriteTBit5;
;;;110        case 6:   
;;;111          goto WriteTBit6;
;;;112        case 7:   
;;;113          goto WriteTBit7;
;;;114        }
;;;115        break;
;;;116      case LCD_DRAWMODE_XOR:
;;;117        switch (Diff&7) {
;;;118        case 0:   
;;;119          goto WriteXBit0;
;;;120        case 1:   
;;;121          goto WriteXBit1;
;;;122        case 2:
;;;123          goto WriteXBit2;
;;;124        case 3:
;;;125          goto WriteXBit3;
;;;126        case 4:
;;;127          goto WriteXBit4;
;;;128        case 5:   
;;;129          goto WriteXBit5;
;;;130        case 6:   
;;;131          goto WriteXBit6;
;;;132        case 7:   
;;;133          goto WriteXBit7;
;;;134        }
;;;135      }
;;;136    /*
;;;137            Write with transparency
;;;138    */
;;;139    
;;;140      WriteTBit0:
;;;141       if (pixels&(1<<7)) LCD_SetPoint(x+0, y, Index1);
00001c  fa1ff78b          UXTH     r7,r11
000020  f0100103          ANDS     r1,r0,#3              ;71
000024  f0030007          AND      r0,r3,#7              ;77
000028  d004              BEQ      |L2.52|
00002a  2901              CMP      r1,#1                 ;71
00002c  d012              BEQ      |L2.84|
00002e  2902              CMP      r1,#2                 ;71
000030  d118              BNE      |L2.100|
000032  e007              B        |L2.68|
                  |L2.52|
000034  2808              CMP      r0,#8                 ;77
000036  d215              BCS      |L2.100|
000038  e8dff000          TBB      [pc,r0]               ;77
00003c  68727d88          DCB      0x68,0x72,0x7d,0x88
000040  93a0abb6          DCB      0x93,0xa0,0xab,0xb6
                  |L2.68|
000044  2808              CMP      r0,#8                 ;97
000046  d20d              BCS      |L2.100|
000048  e8dff000          TBB      [pc,r0]               ;97
00004c  0c151f29          DCB      0x0c,0x15,0x1f,0x29
000050  333d4751          DCB      0x33,0x3d,0x47,0x51
                  |L2.84|
000054  2808              CMP      r0,#8                 ;117
000056  d205              BCS      |L2.100|
000058  e8dff000          TBB      [pc,r0]               ;117
00005c  b6bec6ce          DCB      0xb6,0xbe,0xc6,0xce
000060  d6dee6ee          DCB      0xd6,0xde,0xe6,0xee
                  |L2.100|
000064  0630              LSLS     r0,r6,#24
000066  d504              BPL      |L2.114|
000068  4642              MOV      r2,r8
00006a  4639              MOV      r1,r7
00006c  b2a8              UXTH     r0,r5
00006e  f7fffffe          BL       LCD_SetPoint
                  |L2.114|
;;;142        if (!--xsize)
000072  1e64              SUBS     r4,r4,#1
000074  d07d              BEQ      |L2.370|
;;;143          return;
;;;144      WriteTBit1:
;;;145        if (pixels&(1<<6)) LCD_SetPoint(x+1, y, Index1);
000076  0670              LSLS     r0,r6,#25
000078  d505              BPL      |L2.134|
00007a  1c68              ADDS     r0,r5,#1
00007c  4642              MOV      r2,r8
00007e  4639              MOV      r1,r7
000080  b280              UXTH     r0,r0
000082  f7fffffe          BL       LCD_SetPoint
                  |L2.134|
;;;146        if (!--xsize)
000086  1e64              SUBS     r4,r4,#1
000088  d073              BEQ      |L2.370|
;;;147          return;
;;;148      WriteTBit2:
;;;149        if (pixels&(1<<5)) LCD_SetPoint(x+2, y, Index1);
00008a  06b0              LSLS     r0,r6,#26
00008c  d505              BPL      |L2.154|
00008e  1ca8              ADDS     r0,r5,#2
000090  4642              MOV      r2,r8
000092  4639              MOV      r1,r7
000094  b280              UXTH     r0,r0
000096  f7fffffe          BL       LCD_SetPoint
                  |L2.154|
;;;150        if (!--xsize)
00009a  1e64              SUBS     r4,r4,#1
00009c  d069              BEQ      |L2.370|
;;;151          return;
;;;152      WriteTBit3:
;;;153        if (pixels&(1<<4)) LCD_SetPoint(x+3, y, Index1);
00009e  06f0              LSLS     r0,r6,#27
0000a0  d505              BPL      |L2.174|
0000a2  1ce8              ADDS     r0,r5,#3
0000a4  4642              MOV      r2,r8
0000a6  4639              MOV      r1,r7
0000a8  b280              UXTH     r0,r0
0000aa  f7fffffe          BL       LCD_SetPoint
                  |L2.174|
;;;154        if (!--xsize)
0000ae  1e64              SUBS     r4,r4,#1
0000b0  d05f              BEQ      |L2.370|
;;;155          return;
;;;156      WriteTBit4:
;;;157        if (pixels&(1<<3)) LCD_SetPoint(x+4, y, Index1);
0000b2  0730              LSLS     r0,r6,#28
0000b4  d505              BPL      |L2.194|
0000b6  1d28              ADDS     r0,r5,#4
0000b8  4642              MOV      r2,r8
0000ba  4639              MOV      r1,r7
0000bc  b280              UXTH     r0,r0
0000be  f7fffffe          BL       LCD_SetPoint
                  |L2.194|
;;;158        if (!--xsize)
0000c2  1e64              SUBS     r4,r4,#1
0000c4  d055              BEQ      |L2.370|
;;;159          return;
;;;160      WriteTBit5:
;;;161        if (pixels&(1<<2)) LCD_SetPoint(x+5, y, Index1);
0000c6  0770              LSLS     r0,r6,#29
0000c8  d505              BPL      |L2.214|
0000ca  1d68              ADDS     r0,r5,#5
0000cc  4642              MOV      r2,r8
0000ce  4639              MOV      r1,r7
0000d0  b280              UXTH     r0,r0
0000d2  f7fffffe          BL       LCD_SetPoint
                  |L2.214|
;;;162        if (!--xsize)
0000d6  1e64              SUBS     r4,r4,#1
0000d8  d04b              BEQ      |L2.370|
;;;163          return;
;;;164      WriteTBit6:
;;;165        if (pixels&(1<<1)) LCD_SetPoint(x+6, y, Index1);
0000da  07b0              LSLS     r0,r6,#30
0000dc  d505              BPL      |L2.234|
0000de  1da8              ADDS     r0,r5,#6
0000e0  4642              MOV      r2,r8
0000e2  4639              MOV      r1,r7
0000e4  b280              UXTH     r0,r0
0000e6  f7fffffe          BL       LCD_SetPoint
                  |L2.234|
;;;166        if (!--xsize)
0000ea  1e64              SUBS     r4,r4,#1
0000ec  d041              BEQ      |L2.370|
;;;167          return;
;;;168      WriteTBit7:
;;;169        if (pixels&(1<<0)) LCD_SetPoint(x+7, y, Index1);
0000ee  07f0              LSLS     r0,r6,#31
0000f0  d005              BEQ      |L2.254|
0000f2  1de8              ADDS     r0,r5,#7
0000f4  4642              MOV      r2,r8
0000f6  4639              MOV      r1,r7
0000f8  b280              UXTH     r0,r0
0000fa  f7fffffe          BL       LCD_SetPoint
                  |L2.254|
;;;170        if (!--xsize)
0000fe  1e64              SUBS     r4,r4,#1
000100  d037              BEQ      |L2.370|
;;;171          return;
;;;172        x+=8;
000102  f1050508          ADD      r5,r5,#8
;;;173        pixels = *(++p);
000106  f81a6f01          LDRB     r6,[r10,#1]!
;;;174        goto WriteTBit0;
00010a  e7ab              B        |L2.100|
                  |L2.268|
;;;175    
;;;176    /*
;;;177            Write without transparency
;;;178    */
;;;179    
;;;180      WriteBit0:
;;;181        LCD_SetPoint(x+0, y, (pixels&(1<<7)) ? Index1 : Index0);
00010c  4642              MOV      r2,r8
00010e  0630              LSLS     r0,r6,#24
000110  d400              BMI      |L2.276|
000112  464a              MOV      r2,r9
                  |L2.276|
000114  4639              MOV      r1,r7
000116  b2a8              UXTH     r0,r5
000118  f7fffffe          BL       LCD_SetPoint
;;;182        if (!--xsize)
00011c  1e64              SUBS     r4,r4,#1
00011e  d028              BEQ      |L2.370|
;;;183          return;
;;;184      WriteBit1:
;;;185        LCD_SetPoint(x+1, y, (pixels&(1<<6)) ? Index1 : Index0);
000120  4642              MOV      r2,r8
000122  0670              LSLS     r0,r6,#25
000124  d400              BMI      |L2.296|
000126  464a              MOV      r2,r9
                  |L2.296|
000128  1c68              ADDS     r0,r5,#1
00012a  4639              MOV      r1,r7
00012c  b280              UXTH     r0,r0
00012e  f7fffffe          BL       LCD_SetPoint
;;;186        if (!--xsize)
000132  1e64              SUBS     r4,r4,#1
000134  d01d              BEQ      |L2.370|
;;;187          return;
;;;188      WriteBit2:
;;;189        LCD_SetPoint(x+2, y, (pixels&(1<<5)) ? Index1 : Index0);
000136  4642              MOV      r2,r8
000138  06b0              LSLS     r0,r6,#26
00013a  d400              BMI      |L2.318|
00013c  464a              MOV      r2,r9
                  |L2.318|
00013e  1ca8              ADDS     r0,r5,#2
000140  4639              MOV      r1,r7
000142  b280              UXTH     r0,r0
000144  f7fffffe          BL       LCD_SetPoint
;;;190        if (!--xsize)
000148  1e64              SUBS     r4,r4,#1
00014a  d012              BEQ      |L2.370|
;;;191          return;
;;;192      WriteBit3:
;;;193        LCD_SetPoint(x+3, y, (pixels&(1<<4)) ? Index1 : Index0);
00014c  4642              MOV      r2,r8
00014e  06f0              LSLS     r0,r6,#27
000150  d400              BMI      |L2.340|
000152  464a              MOV      r2,r9
                  |L2.340|
000154  1ce8              ADDS     r0,r5,#3
000156  4639              MOV      r1,r7
000158  b280              UXTH     r0,r0
00015a  f7fffffe          BL       LCD_SetPoint
;;;194        if (!--xsize)
00015e  1e64              SUBS     r4,r4,#1
000160  d076              BEQ      |L2.592|
;;;195          return;
;;;196      WriteBit4:
;;;197        LCD_SetPoint(x+4, y, (pixels&(1<<3)) ? Index1 : Index0);
000162  4642              MOV      r2,r8
000164  0730              LSLS     r0,r6,#28
000166  d400              BMI      |L2.362|
000168  464a              MOV      r2,r9
                  |L2.362|
00016a  1d28              ADDS     r0,r5,#4
00016c  4639              MOV      r1,r7
00016e  b280              UXTH     r0,r0
000170  e000              B        |L2.372|
                  |L2.370|
000172  e06d              B        |L2.592|
                  |L2.372|
000174  f7fffffe          BL       LCD_SetPoint
;;;198        if (!--xsize)
000178  1e64              SUBS     r4,r4,#1
00017a  d069              BEQ      |L2.592|
;;;199          return;
;;;200      WriteBit5:
;;;201        LCD_SetPoint(x+5, y, (pixels&(1<<2)) ? Index1 : Index0);
00017c  4642              MOV      r2,r8
00017e  0770              LSLS     r0,r6,#29
000180  d400              BMI      |L2.388|
000182  464a              MOV      r2,r9
                  |L2.388|
000184  1d68              ADDS     r0,r5,#5
000186  4639              MOV      r1,r7
000188  b280              UXTH     r0,r0
00018a  f7fffffe          BL       LCD_SetPoint
;;;202        if (!--xsize)
00018e  1e64              SUBS     r4,r4,#1
000190  d05e              BEQ      |L2.592|
;;;203          return;
;;;204      WriteBit6:
;;;205        LCD_SetPoint(x+6, y, (pixels&(1<<1)) ? Index1 : Index0);
000192  4642              MOV      r2,r8
000194  07b0              LSLS     r0,r6,#30
000196  d400              BMI      |L2.410|
000198  464a              MOV      r2,r9
                  |L2.410|
00019a  1da8              ADDS     r0,r5,#6
00019c  4639              MOV      r1,r7
00019e  b280              UXTH     r0,r0
0001a0  f7fffffe          BL       LCD_SetPoint
;;;206        if (!--xsize)
0001a4  1e64              SUBS     r4,r4,#1
0001a6  d053              BEQ      |L2.592|
;;;207          return;
;;;208      WriteBit7:
;;;209        LCD_SetPoint(x+7, y, (pixels&(1<<0)) ? Index1 : Index0);
0001a8  4642              MOV      r2,r8
0001aa  07f0              LSLS     r0,r6,#31
0001ac  d100              BNE      |L2.432|
0001ae  464a              MOV      r2,r9
                  |L2.432|
0001b0  1de8              ADDS     r0,r5,#7
0001b2  4639              MOV      r1,r7
0001b4  b280              UXTH     r0,r0
0001b6  f7fffffe          BL       LCD_SetPoint
;;;210        if (!--xsize)
0001ba  1e64              SUBS     r4,r4,#1
0001bc  d048              BEQ      |L2.592|
;;;211          return;
;;;212        x+=8;
0001be  f1050508          ADD      r5,r5,#8
;;;213        pixels = *(++p);
0001c2  f81a6f01          LDRB     r6,[r10,#1]!
;;;214        goto WriteBit0;
0001c6  e7a1              B        |L2.268|
                  |L2.456|
;;;215    
;;;216    /*
;;;217            Write XOR mode
;;;218    */
;;;219    
;;;220      WriteXBit0:
;;;221        if (pixels&(1<<7))
0001c8  0630              LSLS     r0,r6,#24
0001ca  d503              BPL      |L2.468|
;;;222          LCD_L0_XorPixel(x+0, y);
0001cc  4659              MOV      r1,r11
0001ce  4628              MOV      r0,r5
0001d0  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.468|
;;;223        if (!--xsize)
0001d4  1e64              SUBS     r4,r4,#1
0001d6  d03b              BEQ      |L2.592|
;;;224          return;
;;;225      WriteXBit1:
;;;226        if (pixels&(1<<6))
0001d8  0670              LSLS     r0,r6,#25
0001da  d503              BPL      |L2.484|
;;;227          LCD_L0_XorPixel(x+1, y);
0001dc  4659              MOV      r1,r11
0001de  1c68              ADDS     r0,r5,#1
0001e0  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.484|
;;;228        if (!--xsize)
0001e4  1e64              SUBS     r4,r4,#1
0001e6  d033              BEQ      |L2.592|
;;;229          return;
;;;230      WriteXBit2:
;;;231        if (pixels&(1<<5))
0001e8  06b0              LSLS     r0,r6,#26
0001ea  d503              BPL      |L2.500|
;;;232          LCD_L0_XorPixel(x+2, y);
0001ec  4659              MOV      r1,r11
0001ee  1ca8              ADDS     r0,r5,#2
0001f0  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.500|
;;;233        if (!--xsize)
0001f4  1e64              SUBS     r4,r4,#1
0001f6  d02b              BEQ      |L2.592|
;;;234          return;
;;;235      WriteXBit3:
;;;236        if (pixels&(1<<4))
0001f8  06f0              LSLS     r0,r6,#27
0001fa  d503              BPL      |L2.516|
;;;237          LCD_L0_XorPixel(x+3, y);
0001fc  4659              MOV      r1,r11
0001fe  1ce8              ADDS     r0,r5,#3
000200  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.516|
;;;238        if (!--xsize)
000204  1e64              SUBS     r4,r4,#1
000206  d023              BEQ      |L2.592|
;;;239          return;
;;;240      WriteXBit4:
;;;241        if (pixels&(1<<3))
000208  0730              LSLS     r0,r6,#28
00020a  d503              BPL      |L2.532|
;;;242          LCD_L0_XorPixel(x+4, y);
00020c  4659              MOV      r1,r11
00020e  1d28              ADDS     r0,r5,#4
000210  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.532|
;;;243        if (!--xsize)
000214  1e64              SUBS     r4,r4,#1
000216  d01b              BEQ      |L2.592|
;;;244          return;
;;;245      WriteXBit5:
;;;246        if (pixels&(1<<2))
000218  0770              LSLS     r0,r6,#29
00021a  d503              BPL      |L2.548|
;;;247          LCD_L0_XorPixel(x+5, y);
00021c  4659              MOV      r1,r11
00021e  1d68              ADDS     r0,r5,#5
000220  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.548|
;;;248        if (!--xsize)
000224  1e64              SUBS     r4,r4,#1
000226  d013              BEQ      |L2.592|
;;;249          return;
;;;250      WriteXBit6:
;;;251        if (pixels&(1<<1))
000228  07b0              LSLS     r0,r6,#30
00022a  d503              BPL      |L2.564|
;;;252          LCD_L0_XorPixel(x+6, y);
00022c  4659              MOV      r1,r11
00022e  1da8              ADDS     r0,r5,#6
000230  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.564|
;;;253        if (!--xsize)
000234  1e64              SUBS     r4,r4,#1
000236  d00b              BEQ      |L2.592|
;;;254          return;
;;;255      WriteXBit7:
;;;256        if (pixels&(1<<0))
000238  07f0              LSLS     r0,r6,#31
00023a  d003              BEQ      |L2.580|
;;;257          LCD_L0_XorPixel(x+7, y);
00023c  4659              MOV      r1,r11
00023e  1de8              ADDS     r0,r5,#7
000240  f7fffffe          BL       LCD_L0_XorPixel
                  |L2.580|
;;;258        if (!--xsize)
000244  1e64              SUBS     r4,r4,#1
000246  d003              BEQ      |L2.592|
;;;259          return;
;;;260        x+=8;
000248  3508              ADDS     r5,r5,#8
;;;261        pixels = *(++p);
00024a  f81a6f01          LDRB     r6,[r10,#1]!
;;;262        goto WriteXBit0;
00024e  e7bb              B        |L2.456|
                  |L2.592|
;;;263    	
;;;264    }
000250  e8bd9ff0          POP      {r4-r12,pc}
;;;265    
                          ENDP

                  |L2.596|
                          DCD      GUI_Context

                          AREA ||i.DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  DrawBitLine2BPP PROC
;;;265    
;;;266    static void  DrawBitLine2BPP(int x, int y, U8 const*p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
;;;267      LCD_PIXELINDEX pixels;
;;;268    /*
;;;269    // Jump to right entry point
;;;270    */
;;;271      pixels = *p;
;;;272      if (pTrans) {
;;;273        /*
;;;274          with palette
;;;275        */
;;;276        if (GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) switch (Diff&3) {
000006  4878              LDR      r0,|L3.488|
000008  e9dd4908          LDRD     r4,r9,[sp,#0x20]      ;266
00000c  7c00              LDRB     r0,[r0,#0x10]
00000e  7815              LDRB     r5,[r2,#0]            ;271
000010  4690              MOV      r8,r2                 ;266
;;;277        case 0:
;;;278          goto WriteTBit0;
;;;279        case 1:
;;;280          goto WriteTBit1;
;;;281        case 2:
;;;282          goto WriteTBit2;
;;;283        default:
;;;284          goto WriteTBit3;
;;;285        } else switch (Diff&3) {
;;;286        case 0:
;;;287          goto WriteBit0;
;;;288        case 1:
;;;289          goto WriteBit1;
;;;290        case 2:
;;;291          goto WriteBit2;
;;;292        default:
;;;293          goto WriteBit3;
;;;294        }
;;;295      /*
;;;296              Write without transparency
;;;297      */
;;;298      WriteBit0:
;;;299        LCD_SetPoint(x+0, y, *(pTrans+(pixels>>6)));
000012  b28f              UXTH     r7,r1
000014  f1b90f00          CMP      r9,#0                 ;272
;;;300        if (!--xsize)
;;;301          return;
;;;302      WriteBit1:
;;;303        LCD_SetPoint(x+1, y, *(pTrans+(3&(pixels>>4))));
;;;304        if (!--xsize)
;;;305          return;
;;;306      WriteBit2:
;;;307        LCD_SetPoint(x+2, y, *(pTrans+(3&(pixels>>2))));
;;;308        if (!--xsize)
;;;309          return;
;;;310      WriteBit3:
;;;311        LCD_SetPoint(x+3, y, *(pTrans+(3&(pixels))));
;;;312        if (!--xsize)
;;;313          return;
;;;314        pixels = *(++p);
;;;315        x+=4;
;;;316        goto WriteBit0;
;;;317      /*
;;;318              Write with transparency
;;;319      */
;;;320      WriteTBit0:
;;;321        if (pixels&(3<<6))
;;;322          LCD_SetPoint(x+0, y, *(pTrans+(pixels>>6)));
;;;323        if (!--xsize)
;;;324          return;
;;;325      WriteTBit1:
;;;326        if (pixels&(3<<4))
;;;327          LCD_SetPoint(x+1, y, *(pTrans+(3&(pixels>>4))));
;;;328        if (!--xsize)
;;;329          return;
;;;330      WriteTBit2:
;;;331        if (pixels&(3<<2))
;;;332          LCD_SetPoint(x+2, y, *(pTrans+(3&(pixels>>2))));
;;;333        if (!--xsize)
;;;334          return;
;;;335      WriteTBit3:
;;;336        if (pixels&(3<<0))
;;;337          LCD_SetPoint(x+3, y, *(pTrans+(3&(pixels))));
;;;338        if (!--xsize)
;;;339          return;
;;;340        pixels = *(++p);
;;;341        x+=4;
;;;342        goto WriteTBit0;
;;;343      } else { 
;;;344        /* 
;;;345          without palette 
;;;346        */
;;;347        if (GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) switch (Diff&3) {
000018  ea4f7080          LSL      r0,r0,#30
00001c  d078              BEQ      |L3.272|
00001e  2800              CMP      r0,#0                 ;276
000020  f0030003          AND      r0,r3,#3              ;285
000024  da05              BGE      |L3.50|
000026  b3c0              CBZ      r0,|L3.154|
000028  2801              CMP      r0,#1                 ;276
00002a  d043              BEQ      |L3.180|
00002c  2802              CMP      r0,#2                 ;276
00002e  d15d              BNE      |L3.236|
000030  e04e              B        |L3.208|
                  |L3.50|
000032  b120              CBZ      r0,|L3.62|
000034  2801              CMP      r0,#1                 ;285
000036  d00b              BEQ      |L3.80|
000038  2802              CMP      r0,#2                 ;285
00003a  d11f              BNE      |L3.124|
00003c  e013              B        |L3.102|
                  |L3.62|
00003e  09a9              LSRS     r1,r5,#6              ;299
000040  b2b0              UXTH     r0,r6                 ;299
000042  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;299
000046  4639              MOV      r1,r7                 ;299
000048  f7fffffe          BL       LCD_SetPoint
00004c  1e64              SUBS     r4,r4,#1              ;300
00004e  d06f              BEQ      |L3.304|
                  |L3.80|
000050  f3c51101          UBFX     r1,r5,#4,#2           ;303
000054  1c70              ADDS     r0,r6,#1              ;303
000056  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;303
00005a  4639              MOV      r1,r7                 ;303
00005c  b280              UXTH     r0,r0                 ;303
00005e  f7fffffe          BL       LCD_SetPoint
000062  1e64              SUBS     r4,r4,#1              ;304
000064  d064              BEQ      |L3.304|
                  |L3.102|
000066  f3c50181          UBFX     r1,r5,#2,#2           ;307
00006a  1cb0              ADDS     r0,r6,#2              ;307
00006c  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;307
000070  4639              MOV      r1,r7                 ;307
000072  b280              UXTH     r0,r0                 ;307
000074  f7fffffe          BL       LCD_SetPoint
000078  1e64              SUBS     r4,r4,#1              ;308
00007a  d059              BEQ      |L3.304|
                  |L3.124|
00007c  f0050103          AND      r1,r5,#3              ;311
000080  1cf0              ADDS     r0,r6,#3              ;311
000082  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;311
000086  4639              MOV      r1,r7                 ;311
000088  b280              UXTH     r0,r0                 ;311
00008a  f7fffffe          BL       LCD_SetPoint
00008e  1e64              SUBS     r4,r4,#1              ;312
000090  d04e              BEQ      |L3.304|
000092  f8185f01          LDRB     r5,[r8,#1]!           ;314
000096  1d36              ADDS     r6,r6,#4              ;315
000098  e7d1              B        |L3.62|
                  |L3.154|
00009a  e7ff              B        |L3.156|
                  |L3.156|
00009c  f0150fc0          TST      r5,#0xc0              ;321
0000a0  d006              BEQ      |L3.176|
0000a2  09a9              LSRS     r1,r5,#6              ;322
0000a4  b2b0              UXTH     r0,r6                 ;322
0000a6  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;322
0000aa  4639              MOV      r1,r7                 ;322
0000ac  f7fffffe          BL       LCD_SetPoint
                  |L3.176|
0000b0  1e64              SUBS     r4,r4,#1              ;323
0000b2  d03d              BEQ      |L3.304|
                  |L3.180|
0000b4  f0150f30          TST      r5,#0x30              ;326
0000b8  d008              BEQ      |L3.204|
0000ba  f3c51101          UBFX     r1,r5,#4,#2           ;327
0000be  1c70              ADDS     r0,r6,#1              ;327
0000c0  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;327
0000c4  4639              MOV      r1,r7                 ;327
0000c6  b280              UXTH     r0,r0                 ;327
0000c8  f7fffffe          BL       LCD_SetPoint
                  |L3.204|
0000cc  1e64              SUBS     r4,r4,#1              ;328
0000ce  d02f              BEQ      |L3.304|
                  |L3.208|
0000d0  f0150f0c          TST      r5,#0xc               ;331
0000d4  d008              BEQ      |L3.232|
0000d6  f3c50181          UBFX     r1,r5,#2,#2           ;332
0000da  1cb0              ADDS     r0,r6,#2              ;332
0000dc  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;332
0000e0  4639              MOV      r1,r7                 ;332
0000e2  b280              UXTH     r0,r0                 ;332
0000e4  f7fffffe          BL       LCD_SetPoint
                  |L3.232|
0000e8  1e64              SUBS     r4,r4,#1              ;333
0000ea  d07a              BEQ      |L3.482|
                  |L3.236|
0000ec  07a8              LSLS     r0,r5,#30             ;336
0000ee  d008              BEQ      |L3.258|
0000f0  f0050103          AND      r1,r5,#3              ;337
0000f4  1cf0              ADDS     r0,r6,#3              ;337
0000f6  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;337
0000fa  4639              MOV      r1,r7                 ;337
0000fc  b280              UXTH     r0,r0                 ;337
0000fe  f7fffffe          BL       LCD_SetPoint
                  |L3.258|
000102  1e64              SUBS     r4,r4,#1              ;338
000104  d06d              BEQ      |L3.482|
000106  f8185f01          LDRB     r5,[r8,#1]!           ;340
00010a  1d36              ADDS     r6,r6,#4              ;341
00010c  e7c6              B        |L3.156|
00010e  e7ff              B        |L3.272|
                  |L3.272|
000110  2800              CMP      r0,#0
;;;348        case 0:
;;;349          goto WriteDDPTBit0;
;;;350        case 1:
;;;351          goto WriteDDPTBit1;
;;;352        case 2:
;;;353          goto WriteDDPTBit2;
;;;354        default:
;;;355          goto WriteDDPTBit3;
;;;356        } else switch (Diff&3) {
000112  f0030003          AND      r0,r3,#3
000116  da05              BGE      |L3.292|
000118  b388              CBZ      r0,|L3.382|
00011a  2801              CMP      r0,#1                 ;347
00011c  d03a              BEQ      |L3.404|
00011e  2802              CMP      r0,#2                 ;347
000120  d150              BNE      |L3.452|
000122  e043              B        |L3.428|
                  |L3.292|
000124  b128              CBZ      r0,|L3.306|
000126  2801              CMP      r0,#1
000128  d00a              BEQ      |L3.320|
00012a  2802              CMP      r0,#2
00012c  d11a              BNE      |L3.356|
00012e  e010              B        |L3.338|
                  |L3.304|
000130  e057              B        |L3.482|
                  |L3.306|
;;;357        case 0:
;;;358          goto WriteDDPBit0;
;;;359        case 1:
;;;360          goto WriteDDPBit1;
;;;361        case 2:
;;;362          goto WriteDDPBit2;
;;;363        default:
;;;364          goto WriteDDPBit3;
;;;365        }
;;;366      /*
;;;367              Write without transparency
;;;368      */
;;;369      WriteDDPBit0:
;;;370        LCD_SetPoint(x+0, y, (pixels>>6));
000132  09aa              LSRS     r2,r5,#6
000134  4639              MOV      r1,r7
000136  b2b0              UXTH     r0,r6
000138  f7fffffe          BL       LCD_SetPoint
;;;371        if (!--xsize)
00013c  1e64              SUBS     r4,r4,#1
00013e  d050              BEQ      |L3.482|
                  |L3.320|
;;;372          return;
;;;373      WriteDDPBit1:
;;;374        LCD_SetPoint(x+1, y, (3&(pixels>>4)));
000140  1c70              ADDS     r0,r6,#1
000142  f3c51201          UBFX     r2,r5,#4,#2
000146  4639              MOV      r1,r7
000148  b280              UXTH     r0,r0
00014a  f7fffffe          BL       LCD_SetPoint
;;;375        if (!--xsize)
00014e  1e64              SUBS     r4,r4,#1
000150  d047              BEQ      |L3.482|
                  |L3.338|
;;;376          return;
;;;377      WriteDDPBit2:
;;;378        LCD_SetPoint(x+2, y, (3&(pixels>>2)));
000152  1cb0              ADDS     r0,r6,#2
000154  f3c50281          UBFX     r2,r5,#2,#2
000158  4639              MOV      r1,r7
00015a  b280              UXTH     r0,r0
00015c  f7fffffe          BL       LCD_SetPoint
;;;379        if (!--xsize)
000160  1e64              SUBS     r4,r4,#1
000162  d03e              BEQ      |L3.482|
                  |L3.356|
;;;380          return;
;;;381      WriteDDPBit3:
;;;382        LCD_SetPoint(x+3, y, (3&(pixels)));
000164  1cf0              ADDS     r0,r6,#3
000166  f0050203          AND      r2,r5,#3
00016a  4639              MOV      r1,r7
00016c  b280              UXTH     r0,r0
00016e  f7fffffe          BL       LCD_SetPoint
;;;383        if (!--xsize)
000172  1e64              SUBS     r4,r4,#1
000174  d035              BEQ      |L3.482|
;;;384          return;
;;;385        pixels = *(++p);
000176  f8185f01          LDRB     r5,[r8,#1]!
;;;386        x+=4;
00017a  1d36              ADDS     r6,r6,#4
;;;387        goto WriteDDPBit0;
00017c  e7d9              B        |L3.306|
                  |L3.382|
00017e  e7ff              B        |L3.384|
                  |L3.384|
;;;388      /*
;;;389              Write with transparency
;;;390      */
;;;391      WriteDDPTBit0:
;;;392        if (pixels&(3<<6))
000180  f0150fc0          TST      r5,#0xc0
000184  d004              BEQ      |L3.400|
;;;393          LCD_SetPoint(x+0, y, (pixels>>6));
000186  09aa              LSRS     r2,r5,#6
000188  4639              MOV      r1,r7
00018a  b2b0              UXTH     r0,r6
00018c  f7fffffe          BL       LCD_SetPoint
                  |L3.400|
;;;394        if (!--xsize)
000190  1e64              SUBS     r4,r4,#1
000192  d026              BEQ      |L3.482|
                  |L3.404|
;;;395          return;
;;;396      WriteDDPTBit1:
;;;397        if (pixels&(3<<4))
000194  f0150f30          TST      r5,#0x30
000198  d006              BEQ      |L3.424|
;;;398          LCD_SetPoint(x+1, y, (3&(pixels>>4)));
00019a  1c70              ADDS     r0,r6,#1
00019c  f3c51201          UBFX     r2,r5,#4,#2
0001a0  4639              MOV      r1,r7
0001a2  b280              UXTH     r0,r0
0001a4  f7fffffe          BL       LCD_SetPoint
                  |L3.424|
;;;399        if (!--xsize)
0001a8  1e64              SUBS     r4,r4,#1
0001aa  d01a              BEQ      |L3.482|
                  |L3.428|
;;;400          return;
;;;401      WriteDDPTBit2:
;;;402        if (pixels&(3<<2))
0001ac  f0150f0c          TST      r5,#0xc
0001b0  d006              BEQ      |L3.448|
;;;403          LCD_SetPoint(x+2, y, (3&(pixels>>2)));
0001b2  1cb0              ADDS     r0,r6,#2
0001b4  f3c50281          UBFX     r2,r5,#2,#2
0001b8  4639              MOV      r1,r7
0001ba  b280              UXTH     r0,r0
0001bc  f7fffffe          BL       LCD_SetPoint
                  |L3.448|
;;;404        if (!--xsize)
0001c0  1e64              SUBS     r4,r4,#1
0001c2  d00e              BEQ      |L3.482|
                  |L3.452|
;;;405          return;
;;;406      WriteDDPTBit3:
;;;407        if (pixels&(3<<0))
0001c4  07a8              LSLS     r0,r5,#30
0001c6  d006              BEQ      |L3.470|
;;;408          LCD_SetPoint(x+3, y, (3&(pixels)));
0001c8  1cf0              ADDS     r0,r6,#3
0001ca  f0050203          AND      r2,r5,#3
0001ce  4639              MOV      r1,r7
0001d0  b280              UXTH     r0,r0
0001d2  f7fffffe          BL       LCD_SetPoint
                  |L3.470|
;;;409        if (!--xsize)
0001d6  1e64              SUBS     r4,r4,#1
0001d8  d003              BEQ      |L3.482|
;;;410          return;
;;;411        pixels = *(++p);
0001da  f8185f01          LDRB     r5,[r8,#1]!
;;;412        x+=4;
0001de  1d36              ADDS     r6,r6,#4
;;;413        goto WriteDDPTBit0;
0001e0  e7ce              B        |L3.384|
                  |L3.482|
;;;414      }
;;;415    }
0001e2  e8bd87f0          POP      {r4-r10,pc}
;;;416    
                          ENDP

0001e6  0000              DCW      0x0000
                  |L3.488|
                          DCD      GUI_Context

                          AREA ||i.DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  DrawBitLine4BPP PROC
;;;416    
;;;417    static void  DrawBitLine4BPP(int x, int y, U8 const*p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;418    {
000004  4605              MOV      r5,r0
;;;419      LCD_PIXELINDEX pixels;
;;;420    
;;;421      pixels = *p;
;;;422      if (pTrans)
;;;423      {
;;;424        if (GUI_Context.DrawMode & LCD_DRAWMODE_TRANS)
000006  483e              LDR      r0,|L4.256|
000008  e9dd6908          LDRD     r6,r9,[sp,#0x20]      ;418
00000c  7c00              LDRB     r0,[r0,#0x10]
00000e  7814              LDRB     r4,[r2,#0]            ;421
000010  4617              MOV      r7,r2                 ;418
;;;425        {
;;;426          if ((Diff&1) ==0)
;;;427            goto WriteTBit0;
;;;428            goto WriteTBit1;
;;;429        }
;;;430        else
;;;431        {
;;;432          if ((Diff&1) ==0)
;;;433            goto WriteBit0;
;;;434            goto WriteBit1;
;;;435        }
;;;436    
;;;437      WriteBit0:
;;;438        LCD_SetPoint(x+0, y, *(pTrans+(pixels>>4)));
000012  fa1ff881          UXTH     r8,r1
000016  f1b90f00          CMP      r9,#0                 ;422
;;;439        if (!--xsize)
;;;440          return;
;;;441      WriteBit1:
;;;442        LCD_SetPoint(x+1, y, *(pTrans+(pixels&0xf)));
;;;443        if (!--xsize)
;;;444          return;
;;;445        x+=2;
;;;446        pixels = *(++p);
;;;447        goto WriteBit0;
;;;448      /*
;;;449              Write with transparency
;;;450      */
;;;451      WriteTBit0:
;;;452        if (pixels>>4)
;;;453          LCD_SetPoint(x+0, y, *(pTrans+(pixels>>4)));
;;;454        if (!--xsize)
;;;455          return;
;;;456      WriteTBit1:
;;;457        if (pixels&0xf)
;;;458          LCD_SetPoint(x+1, y, *(pTrans+(pixels&0xf)));
;;;459        if (!--xsize)
;;;460          return;
;;;461        x+=2;
;;;462        pixels = *(++p);
;;;463        goto WriteTBit0;
;;;464      } else {
;;;465        /*
;;;466          without palette
;;;467        */
;;;468        if (GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) {
00001a  ea4f7080          LSL      r0,r0,#30
00001e  d03a              BEQ      |L4.150|
000020  2800              CMP      r0,#0                 ;424
000022  ea4f70c3          LSL      r0,r3,#31             ;432
000026  da01              BGE      |L4.44|
000028  b1c8              CBZ      r0,|L4.94|
00002a  e023              B        |L4.116|
                  |L4.44|
00002c  b940              CBNZ     r0,|L4.64|
                  |L4.46|
00002e  0921              LSRS     r1,r4,#4              ;438
000030  b2a8              UXTH     r0,r5                 ;438
000032  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;438
000036  4641              MOV      r1,r8                 ;438
000038  f7fffffe          BL       LCD_SetPoint
00003c  1e76              SUBS     r6,r6,#1              ;439
00003e  d05d              BEQ      |L4.252|
                  |L4.64|
000040  f004010f          AND      r1,r4,#0xf            ;442
000044  1c68              ADDS     r0,r5,#1              ;442
000046  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;442
00004a  4641              MOV      r1,r8                 ;442
00004c  b280              UXTH     r0,r0                 ;442
00004e  f7fffffe          BL       LCD_SetPoint
000052  1e76              SUBS     r6,r6,#1              ;443
000054  d052              BEQ      |L4.252|
000056  1cad              ADDS     r5,r5,#2              ;445
000058  f8174f01          LDRB     r4,[r7,#1]!           ;446
00005c  e7e7              B        |L4.46|
                  |L4.94|
00005e  0920              LSRS     r0,r4,#4              ;452
000060  d006              BEQ      |L4.112|
000062  0921              LSRS     r1,r4,#4              ;453
000064  b2a8              UXTH     r0,r5                 ;453
000066  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;453
00006a  4641              MOV      r1,r8                 ;453
00006c  f7fffffe          BL       LCD_SetPoint
                  |L4.112|
000070  1e76              SUBS     r6,r6,#1              ;454
000072  d043              BEQ      |L4.252|
                  |L4.116|
000074  0720              LSLS     r0,r4,#28             ;457
000076  d008              BEQ      |L4.138|
000078  f004010f          AND      r1,r4,#0xf            ;458
00007c  1c68              ADDS     r0,r5,#1              ;458
00007e  f8392011          LDRH     r2,[r9,r1,LSL #1]     ;458
000082  4641              MOV      r1,r8                 ;458
000084  b280              UXTH     r0,r0                 ;458
000086  f7fffffe          BL       LCD_SetPoint
                  |L4.138|
00008a  1e76              SUBS     r6,r6,#1              ;459
00008c  d036              BEQ      |L4.252|
00008e  1cad              ADDS     r5,r5,#2              ;461
000090  f8174f01          LDRB     r4,[r7,#1]!           ;462
000094  e7e3              B        |L4.94|
                  |L4.150|
000096  2800              CMP      r0,#0
;;;469          if ((Diff&1) ==0)
;;;470            goto WriteDDPTBit0;
;;;471          goto WriteDDPTBit1;
;;;472        } else {
;;;473          if ((Diff&1) ==0)
000098  ea4f70c3          LSL      r0,r3,#31
00009c  da01              BGE      |L4.162|
00009e  b1a8              CBZ      r0,|L4.204|
0000a0  e01d              B        |L4.222|
                  |L4.162|
0000a2  b930              CBNZ     r0,|L4.178|
                  |L4.164|
;;;474            goto WriteDDPBit0;
;;;475          goto WriteDDPBit1;
;;;476        }
;;;477      /*
;;;478              Write without transparency
;;;479      */
;;;480      WriteDDPBit0:
;;;481        LCD_SetPoint(x+0, y, (pixels>>4));
0000a4  0922              LSRS     r2,r4,#4
0000a6  4641              MOV      r1,r8
0000a8  b2a8              UXTH     r0,r5
0000aa  f7fffffe          BL       LCD_SetPoint
;;;482        if (!--xsize)
0000ae  1e76              SUBS     r6,r6,#1
0000b0  d024              BEQ      |L4.252|
                  |L4.178|
;;;483          return;
;;;484      WriteDDPBit1:
;;;485        LCD_SetPoint(x+1, y, (pixels&0xf));
0000b2  1c68              ADDS     r0,r5,#1
0000b4  f004020f          AND      r2,r4,#0xf
0000b8  4641              MOV      r1,r8
0000ba  b280              UXTH     r0,r0
0000bc  f7fffffe          BL       LCD_SetPoint
;;;486        if (!--xsize)
0000c0  1e76              SUBS     r6,r6,#1
0000c2  d01b              BEQ      |L4.252|
;;;487          return;
;;;488        x+=2;
0000c4  1cad              ADDS     r5,r5,#2
;;;489        pixels = *(++p);
0000c6  f8174f01          LDRB     r4,[r7,#1]!
;;;490        goto WriteDDPBit0;
0000ca  e7eb              B        |L4.164|
                  |L4.204|
;;;491      /*
;;;492              Write with transparency
;;;493      */
;;;494      WriteDDPTBit0:
;;;495        if (pixels>>4)
0000cc  0920              LSRS     r0,r4,#4
0000ce  d004              BEQ      |L4.218|
;;;496          LCD_SetPoint(x+0, y, (pixels>>4));
0000d0  0922              LSRS     r2,r4,#4
0000d2  4641              MOV      r1,r8
0000d4  b2a8              UXTH     r0,r5
0000d6  f7fffffe          BL       LCD_SetPoint
                  |L4.218|
;;;497        if (!--xsize)
0000da  1e76              SUBS     r6,r6,#1
0000dc  d00e              BEQ      |L4.252|
                  |L4.222|
;;;498          return;
;;;499      WriteDDPTBit1:
;;;500        if (pixels&0xf)
0000de  0720              LSLS     r0,r4,#28
0000e0  d006              BEQ      |L4.240|
;;;501          LCD_SetPoint(x+1, y, (pixels&0xf));
0000e2  1c68              ADDS     r0,r5,#1
0000e4  f004020f          AND      r2,r4,#0xf
0000e8  4641              MOV      r1,r8
0000ea  b280              UXTH     r0,r0
0000ec  f7fffffe          BL       LCD_SetPoint
                  |L4.240|
;;;502        if (!--xsize)
0000f0  1e76              SUBS     r6,r6,#1
0000f2  d003              BEQ      |L4.252|
;;;503          return;
;;;504        x+=2;
0000f4  1cad              ADDS     r5,r5,#2
;;;505        pixels = *(++p);
0000f6  f8174f01          LDRB     r4,[r7,#1]!
;;;506        goto WriteDDPTBit0;
0000fa  e7e7              B        |L4.204|
                  |L4.252|
;;;507      }
;;;508    }
0000fc  e8bd87f0          POP      {r4-r10,pc}
;;;509    
                          ENDP

                  |L4.256|
                          DCD      GUI_Context

                          AREA ||i.DrawBitLine8BPP||, CODE, READONLY, ALIGN=2

                  DrawBitLine8BPP PROC
;;;509    
;;;510    void DrawBitLine8BPP(int x, int y, U8 const*p, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;511      LCD_PIXELINDEX pixel;
;;;512      if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS)==0) {
000006  4822              LDR      r0,|L5.144|
000008  f8dd8018          LDR      r8,[sp,#0x18]
00000c  4615              MOV      r5,r2                 ;510
00000e  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000010  461e              MOV      r6,r3                 ;510
000012  0780              LSLS     r0,r0,#30
;;;513        if (pTrans) {
;;;514          for (;xsize > 0; xsize--,x++,p++) {
;;;515            pixel = *p;
;;;516            LCD_SetPoint(x, y, *(pTrans+pixel));
000014  b28f              UXTH     r7,r1
000016  d41c              BMI      |L5.82|
000018  f1b80f00          CMP      r8,#0                 ;513
00001c  d10a              BNE      |L5.52|
00001e  e015              B        |L5.76|
                  |L5.32|
000020  7828              LDRB     r0,[r5,#0]            ;515
000022  4639              MOV      r1,r7
000024  f8382010          LDRH     r2,[r8,r0,LSL #1]
000028  b2a0              UXTH     r0,r4
00002a  f7fffffe          BL       LCD_SetPoint
00002e  1e76              SUBS     r6,r6,#1              ;514
000030  1c64              ADDS     r4,r4,#1              ;514
000032  1c6d              ADDS     r5,r5,#1              ;514
                  |L5.52|
000034  2e00              CMP      r6,#0                 ;514
000036  dcf3              BGT      |L5.32|
                  |L5.56|
;;;517          }
;;;518        } else {
;;;519          for (;xsize > 0; xsize--,x++,p++) {
;;;520            LCD_SetPoint(x, y, *p);
;;;521          }
;;;522        }
;;;523      } else {   /* Handle transparent bitmap */
;;;524        if (pTrans) {
;;;525          for (; xsize > 0; xsize--, x++, p++) {
;;;526            pixel = *p;
;;;527            if (pixel) {
;;;528              LCD_SetPoint(x+0, y, *(pTrans+pixel));
;;;529            }
;;;530          }
;;;531        } else {
;;;532          for (; xsize > 0; xsize--, x++, p++) {
;;;533            pixel = *p;
;;;534            if (pixel) {
;;;535              LCD_SetPoint(x+0, y, pixel);
;;;536            }
;;;537          }
;;;538        }
;;;539      }
;;;540    }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L5.60|
00003c  782a              LDRB     r2,[r5,#0]            ;520
00003e  4639              MOV      r1,r7                 ;520
000040  b2a0              UXTH     r0,r4                 ;520
000042  f7fffffe          BL       LCD_SetPoint
000046  1e76              SUBS     r6,r6,#1              ;519
000048  1c64              ADDS     r4,r4,#1              ;519
00004a  1c6d              ADDS     r5,r5,#1              ;519
                  |L5.76|
00004c  2e00              CMP      r6,#0                 ;519
00004e  dcf5              BGT      |L5.60|
000050  e7f2              B        |L5.56|
                  |L5.82|
000052  f1b80f00          CMP      r8,#0                 ;524
000056  d10b              BNE      |L5.112|
000058  e016              B        |L5.136|
                  |L5.90|
00005a  7828              LDRB     r0,[r5,#0]            ;526
00005c  b128              CBZ      r0,|L5.106|
00005e  f8382010          LDRH     r2,[r8,r0,LSL #1]     ;528
000062  4639              MOV      r1,r7                 ;528
000064  b2a0              UXTH     r0,r4                 ;528
000066  f7fffffe          BL       LCD_SetPoint
                  |L5.106|
00006a  1e76              SUBS     r6,r6,#1              ;525
00006c  1c64              ADDS     r4,r4,#1              ;525
00006e  1c6d              ADDS     r5,r5,#1              ;525
                  |L5.112|
000070  2e00              CMP      r6,#0                 ;525
000072  dcf2              BGT      |L5.90|
000074  e7e0              B        |L5.56|
                  |L5.118|
000076  782a              LDRB     r2,[r5,#0]            ;533
000078  b11a              CBZ      r2,|L5.130|
00007a  4639              MOV      r1,r7                 ;534
00007c  b2a0              UXTH     r0,r4                 ;535
00007e  f7fffffe          BL       LCD_SetPoint
                  |L5.130|
000082  1e76              SUBS     r6,r6,#1              ;532
000084  1c64              ADDS     r4,r4,#1              ;532
000086  1c6d              ADDS     r5,r5,#1              ;532
                  |L5.136|
000088  2e00              CMP      r6,#0                 ;532
00008a  dcf4              BGT      |L5.118|
00008c  e7d4              B        |L5.56|
;;;541    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      GUI_Context

                          AREA ||i.LCD_L0_DrawBitmap||, CODE, READONLY, ALIGN=1

                  LCD_L0_DrawBitmap PROC
;;;564    
;;;565    void LCD_L0_DrawBitmap   (int x0, int y0,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;566                           int xsize, int ysize,
;;;567                           int BitsPerPixel, 
;;;568                           int BytesPerLine,
;;;569                           const U8* pData, int Diff,
;;;570                           const LCD_PIXELINDEX* pTrans)
;;;571    {
000004  b083              SUB      sp,sp,#0xc
000006  460d              MOV      r5,r1
000008  a912              ADD      r1,sp,#0x48
00000a  e9dd0710          LDRD     r0,r7,[sp,#0x40]
00000e  e8b10c10          LDM      r1!,{r4,r10,r11}
000012  4691              MOV      r9,r2
000014  461e              MOV      r6,r3
;;;572      int i;
;;;573      switch (BitsPerPixel)
000016  2804              CMP      r0,#4
000018  d030              BEQ      |L6.124|
00001a  dc05              BGT      |L6.40|
00001c  2801              CMP      r0,#1
00001e  d009              BEQ      |L6.52|
000020  2802              CMP      r0,#2
000022  d118              BNE      |L6.86|
;;;574      {
;;;575      case 1:
;;;576        for (i=0; i<ysize; i++)
;;;577        {
;;;578          DrawBitLine1BPP(x0, i+y0, pData, Diff, xsize, pTrans);
;;;579          pData += BytesPerLine;
;;;580        }
;;;581        break;
;;;582      case 2:
;;;583        for (i=0; i<ysize; i++)
000024  2000              MOVS     r0,#0
000026  e025              B        |L6.116|
                  |L6.40|
000028  2808              CMP      r0,#8                 ;573
00002a  d039              BEQ      |L6.160|
00002c  2810              CMP      r0,#0x10              ;573
00002e  d112              BNE      |L6.86|
;;;584        {
;;;585          DrawBitLine2BPP(x0, i+y0, pData, Diff, xsize, pTrans);
;;;586          pData += BytesPerLine;
;;;587        }
;;;588        break;
;;;589      case 4:
;;;590        for (i=0; i<ysize; i++)
;;;591        {
;;;592          DrawBitLine4BPP(x0, i+y0, pData, Diff, xsize, pTrans);
;;;593          pData += BytesPerLine;
;;;594        }
;;;595        break;
;;;596      case 8:
;;;597        for (i=0; i<ysize; i++)
;;;598        {
;;;599          DrawBitLine8BPP(x0, i+y0, pData, xsize, pTrans);
;;;600          pData += BytesPerLine;
;;;601        }
;;;602        break;
;;;603      case 16:
;;;604        for (i=0; i<ysize; i++)
000030  2000              MOVS     r0,#0
000032  e051              B        |L6.216|
                  |L6.52|
000034  2000              MOVS     r0,#0                 ;576
000036  e00b              B        |L6.80|
                  |L6.56|
000038  e9cd9b00          STRD     r9,r11,[sp,#0]        ;578
00003c  eb080105          ADD      r1,r8,r5              ;578
000040  4653              MOV      r3,r10                ;578
000042  4622              MOV      r2,r4                 ;578
000044  9803              LDR      r0,[sp,#0xc]          ;578
000046  f7fffffe          BL       DrawBitLine1BPP
00004a  443c              ADD      r4,r4,r7              ;579
00004c  f1080001          ADD      r0,r8,#1              ;576
                  |L6.80|
000050  4680              MOV      r8,r0                 ;576
000052  42b0              CMP      r0,r6                 ;576
000054  dbf0              BLT      |L6.56|
                  |L6.86|
;;;605        {
;;;606          DrawBitLine16BPP(x0, i+y0, (U16*)pData, xsize);
;;;607          pData += BytesPerLine;
;;;608        }
;;;609        break;
;;;610      }
;;;611    }
000056  b007              ADD      sp,sp,#0x1c
000058  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.92|
00005c  e9cd9b00          STRD     r9,r11,[sp,#0]        ;585
000060  eb080105          ADD      r1,r8,r5              ;585
000064  4653              MOV      r3,r10                ;585
000066  4622              MOV      r2,r4                 ;585
000068  9803              LDR      r0,[sp,#0xc]          ;585
00006a  f7fffffe          BL       DrawBitLine2BPP
00006e  443c              ADD      r4,r4,r7              ;586
000070  f1080001          ADD      r0,r8,#1              ;583
                  |L6.116|
000074  4680              MOV      r8,r0                 ;583
000076  42b0              CMP      r0,r6                 ;583
000078  dbf0              BLT      |L6.92|
00007a  e7ec              B        |L6.86|
                  |L6.124|
00007c  2000              MOVS     r0,#0                 ;590
00007e  e00b              B        |L6.152|
                  |L6.128|
000080  e9cd9b00          STRD     r9,r11,[sp,#0]        ;592
000084  eb080105          ADD      r1,r8,r5              ;592
000088  4653              MOV      r3,r10                ;592
00008a  4622              MOV      r2,r4                 ;592
00008c  9803              LDR      r0,[sp,#0xc]          ;592
00008e  f7fffffe          BL       DrawBitLine4BPP
000092  443c              ADD      r4,r4,r7              ;593
000094  f1080001          ADD      r0,r8,#1              ;590
                  |L6.152|
000098  4680              MOV      r8,r0                 ;590
00009a  42b0              CMP      r0,r6                 ;590
00009c  dbf0              BLT      |L6.128|
00009e  e7da              B        |L6.86|
                  |L6.160|
0000a0  2000              MOVS     r0,#0                 ;597
0000a2  e00b              B        |L6.188|
                  |L6.164|
0000a4  eb080105          ADD      r1,r8,r5              ;599
0000a8  464b              MOV      r3,r9                 ;599
0000aa  4622              MOV      r2,r4                 ;599
0000ac  f8cdb000          STR      r11,[sp,#0]           ;599
0000b0  9803              LDR      r0,[sp,#0xc]          ;599
0000b2  f7fffffe          BL       DrawBitLine8BPP
0000b6  443c              ADD      r4,r4,r7              ;600
0000b8  f1080001          ADD      r0,r8,#1              ;597
                  |L6.188|
0000bc  4680              MOV      r8,r0                 ;597
0000be  42b0              CMP      r0,r6                 ;597
0000c0  dbf0              BLT      |L6.164|
0000c2  e7c8              B        |L6.86|
                  |L6.196|
0000c4  eb080105          ADD      r1,r8,r5              ;606
0000c8  464b              MOV      r3,r9                 ;606
0000ca  4622              MOV      r2,r4                 ;606
0000cc  9803              LDR      r0,[sp,#0xc]          ;606
0000ce  f7fffffe          BL       DrawBitLine16BPP
0000d2  443c              ADD      r4,r4,r7              ;607
0000d4  f1080001          ADD      r0,r8,#1              ;604
                  |L6.216|
0000d8  4680              MOV      r8,r0                 ;604
0000da  42b0              CMP      r0,r6                 ;604
0000dc  dbf2              BLT      |L6.196|
0000de  e7ba              B        |L6.86|
;;;612    
                          ENDP


                          AREA ||i.LCD_L0_DrawHLine||, CODE, READONLY, ALIGN=2

                  LCD_L0_DrawHLine PROC
;;;39     
;;;40     void LCD_L0_DrawHLine  (int x0, int y,  int x1)
000000  b508              PUSH     {r3,lr}
;;;41     {
;;;42       GUI_Line(x0,y,x1,y,LCD_COLORINDEX);
000002  4b05              LDR      r3,|L7.24|
000004  b292              UXTH     r2,r2
000006  b280              UXTH     r0,r0
000008  885b              LDRH     r3,[r3,#2]  ; GUI_Context
00000a  9300              STR      r3,[sp,#0]
00000c  b28b              UXTH     r3,r1
00000e  4619              MOV      r1,r3
000010  f7fffffe          BL       GUI_Line
;;;43     }
000014  bd08              POP      {r3,pc}
;;;44     
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      GUI_Context

                          AREA ||i.LCD_L0_DrawVLine||, CODE, READONLY, ALIGN=2

                  LCD_L0_DrawVLine PROC
;;;44     
;;;45     void LCD_L0_DrawVLine  (int x, int y0,  int y1)
000000  b508              PUSH     {r3,lr}
;;;46     {
;;;47       GUI_Line(x,y0,x,y1,LCD_COLORINDEX);
000002  4b05              LDR      r3,|L8.24|
000004  b289              UXTH     r1,r1
000006  885b              LDRH     r3,[r3,#2]  ; GUI_Context
000008  9300              STR      r3,[sp,#0]
00000a  b293              UXTH     r3,r2
00000c  b282              UXTH     r2,r0
00000e  4610              MOV      r0,r2
000010  f7fffffe          BL       GUI_Line
;;;48     }
000014  bd08              POP      {r3,pc}
;;;49     
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      GUI_Context

                          AREA ||i.LCD_L0_FillRect||, CODE, READONLY, ALIGN=1

                  LCD_L0_FillRect PROC
;;;49     
;;;50     void LCD_L0_FillRect(int x0, int y0, int x1, int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;51     #if !LCD_SWAP_XY
;;;52       for (; y0 <= y1; y0++) {
00000c  e005              B        |L9.26|
                  |L9.14|
;;;53         LCD_L0_DrawHLine(x0,y0, x1);
00000e  463a              MOV      r2,r7
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       LCD_L0_DrawHLine
000018  1c64              ADDS     r4,r4,#1              ;52
                  |L9.26|
00001a  42ac              CMP      r4,r5                 ;52
00001c  ddf7              BLE      |L9.14|
;;;54       }
;;;55     #else
;;;56       for (; x0 <= x1; x0++) {
;;;57         LCD_L0_DrawVLine(x0,y0, y1);
;;;58       }
;;;59     #endif
;;;60     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;61     
                          ENDP


                          AREA ||i.LCD_L0_GetDevFunc||, CODE, READONLY, ALIGN=1

                  LCD_L0_GetDevFunc PROC
;;;614    void LCD_L0_On(void){}
;;;615    void * LCD_L0_GetDevFunc(int Index) {
000000  2000              MOVS     r0,#0
;;;616      GUI_USE_PARA(Index);
;;;617      return 0;
;;;618    }
000002  4770              BX       lr
;;;619    #endif /* (LCD_CONTROLLER == 9320) */
                          ENDP


                          AREA ||i.LCD_L0_GetPixelIndex||, CODE, READONLY, ALIGN=1

                  LCD_L0_GetPixelIndex PROC
;;;23     
;;;24     unsigned int LCD_L0_GetPixelIndex(int x, int y)
000000  f7ffbffe          B.W      LCD_GetPoint
;;;25     {
;;;26       return LCD_GetPoint(x,y);
;;;27     }
;;;28     
                          ENDP


                          AREA ||i.LCD_L0_Init||, CODE, READONLY, ALIGN=1

                  LCD_L0_Init PROC
;;;12     
;;;13     int LCD_L0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;14     {  
;;;15       Lcd_Init();
000002  f7fffffe          BL       Lcd_Init
;;;16       return 0;
000006  2000              MOVS     r0,#0
;;;17     } 
000008  bd10              POP      {r4,pc}
;;;18     
                          ENDP


                          AREA ||i.LCD_L0_On||, CODE, READONLY, ALIGN=1

                  LCD_L0_On PROC
;;;613    void LCD_L0_SetLUTEntry(U8 Pos, LCD_COLOR color){}
;;;614    void LCD_L0_On(void){}
000000  4770              BX       lr
;;;615    void * LCD_L0_GetDevFunc(int Index) {
                          ENDP


                          AREA ||i.LCD_L0_SetLUTEntry||, CODE, READONLY, ALIGN=1

                  LCD_L0_SetLUTEntry PROC
;;;612    
;;;613    void LCD_L0_SetLUTEntry(U8 Pos, LCD_COLOR color){}
000000  4770              BX       lr
;;;614    void LCD_L0_On(void){}
                          ENDP


                          AREA ||i.LCD_L0_SetOrg||, CODE, READONLY, ALIGN=1

                  LCD_L0_SetOrg PROC
;;;28     
;;;29     void LCD_L0_SetOrg(int x,int y)
000000  4770              BX       lr
;;;30     {
;;;31     
;;;32     }
;;;33     
                          ENDP


                          AREA ||i.LCD_L0_SetPixelIndex||, CODE, READONLY, ALIGN=1

                  LCD_L0_SetPixelIndex PROC
;;;18     
;;;19     void LCD_L0_SetPixelIndex(int x, int y, int PixelIndex)
000000  b292              UXTH     r2,r2
;;;20     {
;;;21       LCD_SetPoint(x,y,PixelIndex);
000002  b289              UXTH     r1,r1
000004  b280              UXTH     r0,r0
000006  f7ffbffe          B.W      LCD_SetPoint
;;;22     }
;;;23     
                          ENDP


                          AREA ||i.LCD_L0_XorPixel||, CODE, READONLY, ALIGN=1

                  LCD_L0_XorPixel PROC
;;;33     
;;;34     void LCD_L0_XorPixel(int x, int y)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;36       LCD_PIXELINDEX Index = LCD_GetPoint(x,y);
000006  f7fffffe          BL       LCD_GetPoint
00000a  b282              UXTH     r2,r0
;;;37       LCD_SetPoint(x,y,LCD_NUM_COLORS-1-Index);
00000c  f64f70ff          MOV      r0,#0xffff
000010  1a82              SUBS     r2,r0,r2
000012  b2a9              UXTH     r1,r5
000014  b2a0              UXTH     r0,r4
000016  e8bd4070          POP      {r4-r6,lr}
00001a  f7ffbffe          B.W      LCD_SetPoint
;;;38     }
;;;39     
                          ENDP


;*** Start embedded assembler ***

#line 1 "Source\\uCGUI\\LCDDriver\\ssd1963_ucgui.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_ssd1963_ucgui_c_b7b0e1ea____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_ssd1963_ucgui_c_b7b0e1ea____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_ssd1963_ucgui_c_b7b0e1ea____REVSH|
#line 128
|__asm___15_ssd1963_ucgui_c_b7b0e1ea____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
