; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\os_cpu_c.o --depend=.\ouput\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\os_cpu_c.crf Source\uCOS-II\Ports\os_cpu_c.c]
                          THUMB

                          AREA ||i.OSInitHookBegin||, CODE, READONLY, ALIGN=1

                  OSInitHookBegin PROC
;;;66     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;67     void  OSInitHookBegin (void)
000000  4770              BX       lr
;;;68     {
;;;69     #if OS_TMR_EN > 0
;;;70         OSTmrCtr = 0;
;;;71     #endif
;;;72     }
;;;73     #endif
                          ENDP


                          AREA ||i.OSInitHookEnd||, CODE, READONLY, ALIGN=1

                  OSInitHookEnd PROC
;;;87     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;88     void  OSInitHookEnd (void)
000000  4770              BX       lr
;;;89     {
;;;90     }
;;;91     #endif
                          ENDP


                          AREA ||i.OSTCBInitHook||, CODE, READONLY, ALIGN=1

                  OSTCBInitHook PROC
;;;276    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;277    void  OSTCBInitHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;278    {
;;;279    #if OS_APP_HOOKS_EN > 0
;;;280        App_TCBInitHook(ptcb);
;;;281    #else
;;;282        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;283    #endif
;;;284    }
;;;285    #endif
                          ENDP


                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=1

                  OSTaskCreateHook PROC
;;;104    #if OS_CPU_HOOKS_EN > 0
;;;105    void  OSTaskCreateHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;106    {
;;;107    #if OS_APP_HOOKS_EN > 0
;;;108        App_TaskCreateHook(ptcb);
;;;109    #else
;;;110        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;111    #endif
;;;112    }
;;;113    #endif
                          ENDP


                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=1

                  OSTaskDelHook PROC
;;;127    #if OS_CPU_HOOKS_EN > 0
;;;128    void  OSTaskDelHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;129    {
;;;130    #if OS_APP_HOOKS_EN > 0
;;;131        App_TaskDelHook(ptcb);
;;;132    #else
;;;133        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;134    #endif
;;;135    }
;;;136    #endif
                          ENDP


                          AREA ||i.OSTaskIdleHook||, CODE, READONLY, ALIGN=1

                  OSTaskIdleHook PROC
;;;150    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
;;;151    void  OSTaskIdleHook (void)
000000  4770              BX       lr
;;;152    {
;;;153    
;;;154    
;;;155    #if OS_APP_HOOKS_EN > 0
;;;156        App_TaskIdleHook();
;;;157    #endif
;;;158    }
;;;159    #endif
                          ENDP


                          AREA ||i.OSTaskReturnHook||, CODE, READONLY, ALIGN=1

                  OSTaskReturnHook PROC
;;;316    #if OS_CPU_HOOKS_EN > 0
;;;317    void OSTaskReturnHook(OS_TCB *ptcb)
000000  4770              BX       lr
;;;318    {
;;;319    }
;;;320    #endif
                          ENDP


                          AREA ||i.OSTaskStatHook||, CODE, READONLY, ALIGN=1

                  OSTaskStatHook PROC
;;;172    #if OS_CPU_HOOKS_EN > 0
;;;173    void  OSTaskStatHook (void)
000000  4770              BX       lr
;;;174    {
;;;175    #if OS_APP_HOOKS_EN > 0
;;;176        App_TaskStatHook();
;;;177    #endif
;;;178    }
;;;179    #endif
                          ENDP


                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=1

                  OSTaskStkInit PROC
;;;209    
;;;210    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
000000  f04f7380          MOV      r3,#0x1000000
;;;211    {
;;;212        OS_STK *stk;
;;;213    
;;;214    
;;;215        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;216        stk       = ptos;                            /* Load stack pointer                                 */
;;;217    
;;;218                                                     /* Registers stacked as if auto-saved on exception    */
;;;219        *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
;;;220        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
000004  6013              STR      r3,[r2,#0]
000006  1f13              SUBS     r3,r2,#4
;;;221        *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
000008  f1a20224          SUB      r2,r2,#0x24
00000c  6018              STR      r0,[r3,#0]
00000e  f06f0001          MVN      r0,#1
;;;222        *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
000012  61d0              STR      r0,[r2,#0x1c]
000014  f04f3012          MOV      r0,#0x12121212
;;;223        *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
000018  6190              STR      r0,[r2,#0x18]
00001a  f04f3003          MOV      r0,#0x3030303
;;;224        *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
00001e  6150              STR      r0,[r2,#0x14]
000020  f04f3002          MOV      r0,#0x2020202
;;;225        *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
000024  6110              STR      r0,[r2,#0x10]
000026  f04f3001          MOV      r0,#0x1010101
00002a  e9c21002          STRD     r1,r0,[r2,#8]
;;;226        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
;;;227    
;;;228                                                     /* Remaining registers saved on process stack         */
;;;229        *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
00002e  f04f3011          MOV      r0,#0x11111111
;;;230        *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
000032  6050              STR      r0,[r2,#4]
000034  f04f3010          MOV      r0,#0x10101010
000038  f8420904          STR      r0,[r2],#-4
;;;231        *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
00003c  f04f3009          MOV      r0,#0x9090909
;;;232        *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
000040  6010              STR      r0,[r2,#0]
000042  f1a20010          SUB      r0,r2,#0x10
000046  f04f3108          MOV      r1,#0x8080808
;;;233        *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
00004a  60c1              STR      r1,[r0,#0xc]
00004c  f04f3107          MOV      r1,#0x7070707
;;;234        *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
000050  6081              STR      r1,[r0,#8]
000052  f04f3106          MOV      r1,#0x6060606
;;;235        *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
000056  6041              STR      r1,[r0,#4]
000058  f04f3105          MOV      r1,#0x5050505
00005c  f8401904          STR      r1,[r0],#-4
;;;236        *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
000060  f04f3104          MOV      r1,#0x4040404
000064  6001              STR      r1,[r0,#0]
;;;237    
;;;238        return (stk);
;;;239    }
000066  4770              BX       lr
;;;240    
                          ENDP


                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=1

                  OSTaskSwHook PROC
;;;256    #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
;;;257    void  OSTaskSwHook (void)
000000  4770              BX       lr
;;;258    {
;;;259    #if OS_APP_HOOKS_EN > 0
;;;260        App_TaskSwHook();
;;;261    #endif
;;;262    }
;;;263    #endif
                          ENDP


                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=1

                  OSTimeTickHook PROC
;;;299    #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
;;;300    void  OSTimeTickHook (void)
000000  4770              BX       lr
;;;301    {
;;;302    #if OS_APP_HOOKS_EN > 0
;;;303        App_TimeTickHook();
;;;304    #endif
;;;305    
;;;306    #if OS_TMR_EN > 0
;;;307        OSTmrCtr++;
;;;308        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
;;;309            OSTmrCtr = 0;
;;;310            OSTmrSignal();
;;;311        }
;;;312    #endif
;;;313    }
;;;314    #endif
                          ENDP


                          AREA ||i.OS_CPU_SysTickInit||, CODE, READONLY, ALIGN=1

                  OS_CPU_SysTickInit PROC
;;;363    
;;;364    void  OS_CPU_SysTickInit (void)
000000  b510              PUSH     {r4,lr}
;;;365    {
;;;366        INT32U  cnts;
;;;367    
;;;368    
;;;369        cnts = OS_CPU_SysTickClkFreq() / OS_TICKS_PER_SEC;
000002  f7fffffe          BL       OS_CPU_SysTickClkFreq
000006  f44f717a          MOV      r1,#0x3e8
00000a  fbb0f1f1          UDIV     r1,r0,r1
;;;370    
;;;371        OS_CPU_CM3_NVIC_ST_RELOAD = (cnts - 1);
00000e  f04f20e0          MOV      r0,#0xe000e000
000012  1e49              SUBS     r1,r1,#1
000014  6141              STR      r1,[r0,#0x14]
;;;372                                                     /* Enable timer.                                      */
;;;373        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
000016  6901              LDR      r1,[r0,#0x10]
000018  f0410105          ORR      r1,r1,#5
00001c  6101              STR      r1,[r0,#0x10]
;;;374                                                     /* Enable timer interrupt.                            */
;;;375        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
00001e  6901              LDR      r1,[r0,#0x10]
000020  f0410102          ORR      r1,r1,#2
000024  6101              STR      r1,[r0,#0x10]
;;;376    }
000026  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;336    
;;;337    void  SysTick_Handler (void)
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339        OS_CPU_SR  cpu_sr;
;;;340    
;;;341    
;;;342        OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
000002  f7fffffe          BL       OS_CPU_SR_Save
;;;343        OSIntNesting++;
000006  4a06              LDR      r2,|L13.32|
000008  7811              LDRB     r1,[r2,#0]  ; OSIntNesting
00000a  1c49              ADDS     r1,r1,#1
00000c  7011              STRB     r1,[r2,#0]
;;;344        OS_EXIT_CRITICAL();
00000e  f7fffffe          BL       OS_CPU_SR_Restore
;;;345    
;;;346        OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
000012  f7fffffe          BL       OSTimeTick
;;;347    
;;;348        OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      OSIntExit
;;;349    }
;;;350    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      OSIntNesting

;*** Start embedded assembler ***

#line 1 "Source\\uCOS-II\\Ports\\os_cpu_c.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_os_cpu_c_c_33a061da____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_os_cpu_c_c_33a061da____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_os_cpu_c_c_33a061da____REVSH|
#line 128
|__asm___10_os_cpu_c_c_33a061da____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
