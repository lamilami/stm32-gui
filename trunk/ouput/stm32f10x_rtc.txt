; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\stm32f10x_rtc.o --depend=.\ouput\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\stm32f10x_rtc.crf Source\FWLib\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;271      */
;;;272    void RTC_ClearFlag(uint16_t RTC_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;273    {
;;;274      /* Check the parameters */
;;;275      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;276        
;;;277      /* Clear the coressponding RTC flag */
;;;278      RTC->CRL &= (uint16_t)~RTC_FLAG;
000002  880a              LDRH     r2,[r1,#0]
000004  ea220200          BIC      r2,r2,r0
000008  800a              STRH     r2,[r1,#0]
;;;279    }
00000a  4770              BX       lr
;;;280    
                          ENDP

                  |L1.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;316      */
;;;317    void RTC_ClearITPendingBit(uint16_t RTC_IT)
000000  4902              LDR      r1,|L2.12|
;;;318    {
;;;319      /* Check the parameters */
;;;320      assert_param(IS_RTC_IT(RTC_IT));  
;;;321      
;;;322      /* Clear the coressponding RTC pending bit */
;;;323      RTC->CRL &= (uint16_t)~RTC_IT;
000002  880a              LDRH     r2,[r1,#0]
000004  ea220200          BIC      r2,r2,r0
000008  800a              STRH     r2,[r1,#0]
;;;324    }
00000a  4770              BX       lr
;;;325    
                          ENDP

                  |L2.12|
                          DCD      0x40002804

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;109      */
;;;110    void RTC_EnterConfigMode(void)
000000  4802              LDR      r0,|L3.12|
;;;111    {
;;;112      /* Set the CNF flag to enter in the Configuration Mode */
;;;113      RTC->CRL |= RTC_CRL_CNF;
000002  8801              LDRH     r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  8001              STRH     r1,[r0,#0]
;;;114    }
00000a  4770              BX       lr
;;;115    
                          ENDP

                  |L3.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;120      */
;;;121    void RTC_ExitConfigMode(void)
000000  4802              LDR      r0,|L4.12|
;;;122    {
;;;123      /* Reset the CNF flag to exit from the Configuration Mode */
;;;124      RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
000002  8801              LDRH     r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  8001              STRH     r1,[r0,#0]
;;;125    }
00000a  4770              BX       lr
;;;126    
                          ENDP

                  |L4.12|
                          DCD      0x40002804

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;131      */
;;;132    uint32_t RTC_GetCounter(void)
000000  4902              LDR      r1,|L5.12|
;;;133    {
;;;134      uint16_t tmp = 0;
;;;135      tmp = RTC->CNTL;
000002  8888              LDRH     r0,[r1,#4]
;;;136      return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
000004  8809              LDRH     r1,[r1,#0]
000006  ea404001          ORR      r0,r0,r1,LSL #16
;;;137    }
00000a  4770              BX       lr
;;;138    
                          ENDP

                  |L5.12|
                          DCD      0x40002818

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;191      */
;;;192    uint32_t RTC_GetDivider(void)
000000  4803              LDR      r0,|L6.16|
;;;193    {
;;;194      uint32_t tmp = 0x00;
;;;195      tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
000002  8801              LDRH     r1,[r0,#0]
;;;196      tmp |= RTC->DIVL;
000004  8880              LDRH     r0,[r0,#4]
000006  ea4f7101          LSL      r1,r1,#28             ;195
00000a  ea403011          ORR      r0,r0,r1,LSR #12
;;;197      return tmp;
;;;198    }
00000e  4770              BX       lr
;;;199    
                          ENDP

                  |L6.16|
                          DCD      0x40002810

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;242      */
;;;243    FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
000000  4a03              LDR      r2,|L7.16|
;;;244    {
000002  4601              MOV      r1,r0
;;;245      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;246      
;;;247      /* Check the parameters */
;;;248      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;249      
;;;250      if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
000006  8812              LDRH     r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L7.14|
;;;251      {
;;;252        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;253      }
;;;254      else
;;;255      {
;;;256        bitstatus = RESET;
;;;257      }
;;;258      return bitstatus;
;;;259    }
00000e  4770              BX       lr
;;;260    
                          ENDP

                  |L7.16|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;289      */
;;;290    ITStatus RTC_GetITStatus(uint16_t RTC_IT)
000000  4a06              LDR      r2,|L8.28|
;;;291    {
;;;292      ITStatus bitstatus = RESET;
;;;293      /* Check the parameters */
;;;294      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;295      
;;;296      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000002  8891              LDRH     r1,[r2,#4]
;;;297      if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
000004  8812              LDRH     r2,[r2,#0]
000006  ea010100          AND      r1,r1,r0              ;296
00000a  b2c9              UXTB     r1,r1                 ;296
00000c  4202              TST      r2,r0
00000e  d002              BEQ      |L8.22|
000010  b109              CBZ      r1,|L8.22|
;;;298      {
;;;299        bitstatus = SET;
000012  2001              MOVS     r0,#1
;;;300      }
;;;301      else
;;;302      {
;;;303        bitstatus = RESET;
;;;304      }
;;;305      return bitstatus;
;;;306    }
000014  4770              BX       lr
                  |L8.22|
000016  2000              MOVS     r0,#0                 ;303
000018  4770              BX       lr
;;;307    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40002800

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;88       */
;;;89     void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
000000  4a05              LDR      r2,|L9.24|
;;;90     {
;;;91       /* Check the parameters */
;;;92       assert_param(IS_RTC_IT(RTC_IT));  
;;;93       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;94       
;;;95       if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;96       {
;;;97         RTC->CRH |= RTC_IT;
;;;98       }
;;;99       else
;;;100      {
;;;101        RTC->CRH &= (uint16_t)~RTC_IT;
000004  f8b21800          LDRH     r1,[r2,#0x800]
000008  d001              BEQ      |L9.14|
00000a  4301              ORRS     r1,r1,r0              ;97
00000c  e000              B        |L9.16|
                  |L9.14|
00000e  4381              BICS     r1,r1,r0
                  |L9.16|
000010  f8a21800          STRH     r1,[r2,#0x800]        ;97
;;;102      }
;;;103    }
000014  4770              BX       lr
;;;104    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40002000

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;176      */
;;;177    void RTC_SetAlarm(uint32_t AlarmValue)
000000  b500              PUSH     {lr}
;;;178    {  
000002  4602              MOV      r2,r0
;;;179      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;180      /* Set the ALARM MSB word */
;;;181      RTC->ALRH = AlarmValue >> 16;
000008  4803              LDR      r0,|L10.24|
00000a  0c11              LSRS     r1,r2,#16
00000c  8001              STRH     r1,[r0,#0]
;;;182      /* Set the ALARM LSB word */
;;;183      RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
00000e  8082              STRH     r2,[r0,#4]
;;;184      RTC_ExitConfigMode();
000010  f85deb04          POP      {lr}
000014  f7ffbffe          B.W      RTC_ExitConfigMode
;;;185    }
;;;186    
                          ENDP

                  |L10.24|
                          DCD      0x40002820

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;143      */
;;;144    void RTC_SetCounter(uint32_t CounterValue)
000000  b500              PUSH     {lr}
;;;145    { 
000002  4602              MOV      r2,r0
;;;146      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;147      /* Set RTC COUNTER MSB word */
;;;148      RTC->CNTH = CounterValue >> 16;
000008  4803              LDR      r0,|L11.24|
00000a  0c11              LSRS     r1,r2,#16
00000c  8001              STRH     r1,[r0,#0]
;;;149      /* Set RTC COUNTER LSB word */
;;;150      RTC->CNTL = (CounterValue & RTC_LSB_MASK);
00000e  8082              STRH     r2,[r0,#4]
;;;151      RTC_ExitConfigMode();
000010  f85deb04          POP      {lr}
000014  f7ffbffe          B.W      RTC_ExitConfigMode
;;;152    }
;;;153    
                          ENDP

                  |L11.24|
                          DCD      0x40002818

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;158      */
;;;159    void RTC_SetPrescaler(uint32_t PrescalerValue)
000000  b500              PUSH     {lr}
;;;160    {
000002  4602              MOV      r2,r0
;;;161      /* Check the parameters */
;;;162      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;163      
;;;164      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;165      /* Set RTC PRESCALER MSB word */
;;;166      RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
000008  4804              LDR      r0,|L12.28|
00000a  f3c24103          UBFX     r1,r2,#16,#4
00000e  8001              STRH     r1,[r0,#0]
;;;167      /* Set RTC PRESCALER LSB word */
;;;168      RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
000010  8082              STRH     r2,[r0,#4]
;;;169      RTC_ExitConfigMode();
000012  f85deb04          POP      {lr}
000016  f7ffbffe          B.W      RTC_ExitConfigMode
;;;170    }
;;;171    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40002808

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;205      */
;;;206    void RTC_WaitForLastTask(void)
000000  4802              LDR      r0,|L13.12|
                  |L13.2|
;;;207    {
;;;208      /* Loop until RTOFF flag is set */
;;;209      while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
000002  f8b01804          LDRH     r1,[r0,#0x804]
000006  0689              LSLS     r1,r1,#26
000008  d5fb              BPL      |L13.2|
;;;210      {
;;;211      }
;;;212    }
00000a  4770              BX       lr
;;;213    
                          ENDP

                  |L13.12|
                          DCD      0x40002000

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;221      */
;;;222    void RTC_WaitForSynchro(void)
000000  4805              LDR      r0,|L14.24|
;;;223    {
;;;224      /* Clear RSF flag */
;;;225      RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
000002  f8b01804          LDRH     r1,[r0,#0x804]
000006  f0210108          BIC      r1,r1,#8
00000a  f8a01804          STRH     r1,[r0,#0x804]
                  |L14.14|
;;;226      /* Loop until RSF flag is set */
;;;227      while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
00000e  f8b01804          LDRH     r1,[r0,#0x804]
000012  0709              LSLS     r1,r1,#28
000014  d5fb              BPL      |L14.14|
;;;228      {
;;;229      }
;;;230    }
000016  4770              BX       lr
;;;231    
                          ENDP

                  |L14.24|
                          DCD      0x40002000

;*** Start embedded assembler ***

#line 1 "Source\\FWLib\\src\\stm32f10x_rtc.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_rtc_c_383801d5____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_rtc_c_383801d5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_rtc_c_383801d5____REVSH|
#line 128
|__asm___15_stm32f10x_rtc_c_383801d5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
