; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\ssd1963.o --depend=.\ouput\ssd1963.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\ssd1963.crf Source\uCGUI\LCDDriver\SSD1963.c]
                          THUMB

                          AREA ||i.GUI_Circle||, CODE, READONLY, ALIGN=1

                  GUI_Circle PROC
;;;527    ****************************************************************************/
;;;528    void GUI_Circle(u16 cx,u16 cy,u16 r,u16 color,u8 fill)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;529    {
000004  4606              MOV      r6,r0
;;;530    	u16 x,y;
;;;531    	s16 delta,tmp;
;;;532    	x=0;
000006  2400              MOVS     r4,#0
;;;533    	y=r;
;;;534    	delta=3-(r<<1);
000008  2003              MOVS     r0,#3
00000a  b081              SUB      sp,sp,#4              ;529
00000c  460f              MOV      r7,r1                 ;529
00000e  4615              MOV      r5,r2                 ;533
000010  eba00042          SUB      r0,r0,r2,LSL #1
;;;535    
;;;536    	while(y>x)
000014  e08b              B        |L1.302|
                  |L1.22|
;;;537    	{
;;;538    		if(fill)
000016  980e              LDR      r0,[sp,#0x38]
000018  b3a0              CBZ      r0,|L1.132|
;;;539    		{
;;;540    			GUI_Line(cx+x,cy+y,cx-x,cy+y,color);
00001a  9b04              LDR      r3,[sp,#0x10]
00001c  1979              ADDS     r1,r7,r5
00001e  9300              STR      r3,[sp,#0]
000020  b28b              UXTH     r3,r1
000022  eba60a04          SUB      r10,r6,r4
000026  eb060904          ADD      r9,r6,r4
00002a  fa1ff28a          UXTH     r2,r10
00002e  b289              UXTH     r1,r1
000030  fa1ff089          UXTH     r0,r9
000034  f7fffffe          BL       GUI_Line
;;;541    			GUI_Line(cx+x,cy-y,cx-x,cy-y,color);
000038  9b04              LDR      r3,[sp,#0x10]
00003a  1b79              SUBS     r1,r7,r5
00003c  9300              STR      r3,[sp,#0]
00003e  b28b              UXTH     r3,r1
000040  fa1ff28a          UXTH     r2,r10
000044  b289              UXTH     r1,r1
000046  fa1ff089          UXTH     r0,r9
00004a  f7fffffe          BL       GUI_Line
;;;542    			GUI_Line(cx+y,cy+x,cx-y,cy+x,color);
00004e  9b04              LDR      r3,[sp,#0x10]
000050  1939              ADDS     r1,r7,r4
000052  9300              STR      r3,[sp,#0]
000054  b28b              UXTH     r3,r1
000056  eba60a05          SUB      r10,r6,r5
00005a  eb060905          ADD      r9,r6,r5
00005e  fa1ff28a          UXTH     r2,r10
000062  b289              UXTH     r1,r1
000064  fa1ff089          UXTH     r0,r9
000068  f7fffffe          BL       GUI_Line
;;;543    			GUI_Line(cx+y,cy-x,cx-y,cy-x,color);
00006c  9b04              LDR      r3,[sp,#0x10]
00006e  1b39              SUBS     r1,r7,r4
000070  9300              STR      r3,[sp,#0]
000072  b28b              UXTH     r3,r1
000074  fa1ff28a          UXTH     r2,r10
000078  b289              UXTH     r1,r1
00007a  fa1ff089          UXTH     r0,r9
00007e  f7fffffe          BL       GUI_Line
000082  e048              B        |L1.278|
                  |L1.132|
000084  e7ff              B        |L1.134|
                  |L1.134|
;;;544    		}
;;;545    		else
;;;546    		{
;;;547    			LCD_SetPoint(cx+x,cy+y,color);
000086  eb070905          ADD      r9,r7,r5
00008a  eb060b04          ADD      r11,r6,r4
00008e  fa1ff189          UXTH     r1,r9
000092  fa1ff08b          UXTH     r0,r11
000096  9a04              LDR      r2,[sp,#0x10]
000098  f7fffffe          BL       LCD_SetPoint
;;;548    			LCD_SetPoint(cx-x,cy+y,color);
00009c  eba60a04          SUB      r10,r6,r4
0000a0  fa1ff189          UXTH     r1,r9
0000a4  fa1ff08a          UXTH     r0,r10
0000a8  9a04              LDR      r2,[sp,#0x10]
0000aa  f7fffffe          BL       LCD_SetPoint
;;;549    			LCD_SetPoint(cx+x,cy-y,color);
0000ae  eba70905          SUB      r9,r7,r5
0000b2  fa1ff189          UXTH     r1,r9
0000b6  fa1ff08b          UXTH     r0,r11
0000ba  9a04              LDR      r2,[sp,#0x10]
0000bc  f7fffffe          BL       LCD_SetPoint
;;;550    			LCD_SetPoint(cx-x,cy-y,color);
0000c0  fa1ff189          UXTH     r1,r9
0000c4  fa1ff08a          UXTH     r0,r10
0000c8  9a04              LDR      r2,[sp,#0x10]
0000ca  f7fffffe          BL       LCD_SetPoint
;;;551    			LCD_SetPoint(cx+y,cy+x,color);
0000ce  eb070904          ADD      r9,r7,r4
0000d2  eb060b05          ADD      r11,r6,r5
0000d6  fa1ff189          UXTH     r1,r9
0000da  fa1ff08b          UXTH     r0,r11
0000de  9a04              LDR      r2,[sp,#0x10]
0000e0  f7fffffe          BL       LCD_SetPoint
;;;552    			LCD_SetPoint(cx-y,cy+x,color);
0000e4  eba60a05          SUB      r10,r6,r5
0000e8  fa1ff189          UXTH     r1,r9
0000ec  fa1ff08a          UXTH     r0,r10
0000f0  9a04              LDR      r2,[sp,#0x10]
0000f2  f7fffffe          BL       LCD_SetPoint
;;;553    			LCD_SetPoint(cx+y,cy-x,color);
0000f6  eba70904          SUB      r9,r7,r4
0000fa  fa1ff189          UXTH     r1,r9
0000fe  fa1ff08b          UXTH     r0,r11
000102  9a04              LDR      r2,[sp,#0x10]
000104  f7fffffe          BL       LCD_SetPoint
;;;554    			LCD_SetPoint(cx-y,cy-x,color);
000108  fa1ff189          UXTH     r1,r9
00010c  fa1ff08a          UXTH     r0,r10
000110  9a04              LDR      r2,[sp,#0x10]
000112  f7fffffe          BL       LCD_SetPoint
                  |L1.278|
;;;555    		}
;;;556    		x++;
000116  1c64              ADDS     r4,r4,#1
000118  b2a4              UXTH     r4,r4
;;;557    		if(delta>=0)
00011a  f1b80f00          CMP      r8,#0
00011e  db0e              BLT      |L1.318|
;;;558    		{
;;;559    			y--;
000120  1e6d              SUBS     r5,r5,#1
000122  b2ad              UXTH     r5,r5
;;;560    			tmp=(x<<2);
000124  00a0              LSLS     r0,r4,#2
;;;561    			tmp-=(y<<2);
000126  eba00085          SUB      r0,r0,r5,LSL #2
;;;562    			delta+=(tmp+10);
00012a  4440              ADD      r0,r0,r8
00012c  300a              ADDS     r0,r0,#0xa
                  |L1.302|
00012e  fa0ff880          SXTH     r8,r0                 ;534
000132  42a5              CMP      r5,r4                 ;536
000134  f63faf6f          BHI      |L1.22|
;;;563    		}
;;;564    		else
;;;565    		{
;;;566    			delta+=((x<<2)+6);
;;;567    		}
;;;568    	}
;;;569    }
000138  b005              ADD      sp,sp,#0x14
00013a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.318|
00013e  eb080084          ADD      r0,r8,r4,LSL #2       ;566
000142  1d80              ADDS     r0,r0,#6              ;566
000144  e7f3              B        |L1.302|
;;;570    
                          ENDP


                          AREA ||i.GUI_Color565||, CODE, READONLY, ALIGN=1

                  GUI_Color565 PROC
;;;289    ****************************************************************************/
;;;290    u16 GUI_Color565(u32 RGB)
000000  f3c002c4          UBFX     r2,r0,#3,#5
;;;291    {
;;;292      u8  r, g, b;
;;;293    
;;;294      b = ( RGB >> (0+3) ) & 0x1f;		// 取B色的高5位
;;;295      g = ( RGB >> (8+2) ) & 0x3f;		// 取G色的高6位
000004  f3c02185          UBFX     r1,r0,#10,#6
;;;296      r = ( RGB >> (16+3)) & 0x1f;		// 取R色的高5位
000008  f3c040c4          UBFX     r0,r0,#19,#5
;;;297       
;;;298      return( (r<<11) + (g<<5) + (b<<0) );		
00000c  02c0              LSLS     r0,r0,#11
00000e  eb001041          ADD      r0,r0,r1,LSL #5
000012  4410              ADD      r0,r0,r2
000014  b280              UXTH     r0,r0
;;;299    }
000016  4770              BX       lr
;;;300    
                          ENDP


                          AREA ||i.GUI_GetVLine||, CODE, READONLY, ALIGN=2

                  GUI_GetVLine PROC
;;;636    *****************************************************************************/
;;;637    int GUI_GetVLine(u16 x0, u16 y0,u16 y1,u16 *color)
000000  b5f0              PUSH     {r4-r7,lr}
000002  f04f45c0          MOV      r5,#0x60000000
000006  242a              MOVS     r4,#0x2a
000008  802c              STRH     r4,[r5,#0]
00000a  4c0f              LDR      r4,|L3.72|
;;;638    {
;;;639     	int length,i;
;;;640    	
;;;641    	LCD_WriteCom(0x002A);	
;;;642      	LCD_WriteRAM(x0>>8);	    
00000c  0a06              LSRS     r6,r0,#8
00000e  8026              STRH     r6,[r4,#0]
;;;643    	LCD_WriteRAM(x0&0x00ff);
000010  b2c7              UXTB     r7,r0
000012  8027              STRH     r7,[r4,#0]
000014  8026              STRH     r6,[r4,#0]
;;;644    	LCD_WriteRAM(x0>>8);	    
;;;645    	LCD_WriteRAM(x0&0x00ff);
000016  b2c0              UXTB     r0,r0
000018  8020              STRH     r0,[r4,#0]
00001a  202b              MOVS     r0,#0x2b
00001c  8028              STRH     r0,[r5,#0]
;;;646        LCD_WriteCom(0x002b);	
;;;647    	
;;;648    	LCD_WriteRAM(y0>>8);	    
00001e  0a08              LSRS     r0,r1,#8
000020  8020              STRH     r0,[r4,#0]
;;;649    	LCD_WriteRAM(y0&0x00ff);
000022  b2c8              UXTB     r0,r1
000024  8020              STRH     r0,[r4,#0]
;;;650    	LCD_WriteRAM(y1>>8);	    
000026  0a10              LSRS     r0,r2,#8
000028  8020              STRH     r0,[r4,#0]
;;;651    	LCD_WriteRAM(y1&0x00ff);
00002a  b2d0              UXTB     r0,r2
00002c  8020              STRH     r0,[r4,#0]
00002e  202e              MOVS     r0,#0x2e
000030  8028              STRH     r0,[r5,#0]
;;;652    	//LCD_WriteCom(0x002c); 
;;;653    	LCD_WriteCom(0x002e); //连续读
;;;654      		  
;;;655    	length=y1-y0+1;  
000032  1a50              SUBS     r0,r2,r1
000034  1c40              ADDS     r0,r0,#1
;;;656      		
;;;657     	for(i=0;i<length;i++)      //开始连续读取
000036  2100              MOVS     r1,#0
000038  e003              B        |L3.66|
                  |L3.58|
;;;658    	color[i]  =  *ptr_LCD_ADDR_RAM;
00003a  8822              LDRH     r2,[r4,#0]
00003c  f8232011          STRH     r2,[r3,r1,LSL #1]
000040  1c49              ADDS     r1,r1,#1              ;657
                  |L3.66|
000042  4281              CMP      r1,r0                 ;657
000044  dbf9              BLT      |L3.58|
;;;659     	//LCD_WriteRAM(color);
;;;660    	return length;
;;;661    	
;;;662    }
000046  bdf0              POP      {r4-r7,pc}
;;;663    
                          ENDP

                  |L3.72|
                          DCD      0x60080000

                          AREA ||i.GUI_Line||, CODE, READONLY, ALIGN=2

                  GUI_Line PROC
;;;335    ****************************************************************************/
;;;336    void GUI_Line(u16 x0, u16 y0, u16 x1, u16 y1,u16 color)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;337    {
000004  4692              MOV      r10,r2
000006  461e              MOV      r6,r3
;;;338     	unsigned int length,i;
;;;339    	u16 x,y;
;;;340     	u16 dx;// = abs(x1 - x0);
;;;341     	u16 dy;// = abs(y1 - y0);
;;;342    
;;;343    	if(y0==y1)
;;;344    	{
;;;345    		  LCD_WriteCom(0x002A);	
;;;346      		  LCD_WriteRAM(x0>>8);	    
000008  0a02              LSRS     r2,r0,#8
;;;347    	      LCD_WriteRAM(x0&0x00ff);
;;;348    	      LCD_WriteRAM(x1>>8);	    
;;;349    	      LCD_WriteRAM(x1&0x00ff);
;;;350              LCD_WriteCom(0x002b);	
;;;351    	
;;;352    	      LCD_WriteRAM(y0>>8);	    
00000a  0a0b              LSRS     r3,r1,#8
;;;353    	      LCD_WriteRAM(y0&0x00ff);
;;;354    	      LCD_WriteRAM(y1>>8);	    
00000c  0a37              LSRS     r7,r6,#8
;;;355    	      LCD_WriteRAM(y1&0x00ff);
;;;356    	      LCD_WriteCom(0x002c);
;;;357      		  
;;;358    		  length=x1-x0+1;  
;;;359      		
;;;360     		  for(i=0;i<length;i++)      //开始连续写入
;;;361     	      LCD_WriteRAM(color);
;;;362    
;;;363      		return;
;;;364    	}
;;;365    	else if(y0>y1)
;;;366    	{
;;;367    		dy=y0-y1;
;;;368    	}
;;;369    	else
;;;370    	{
;;;371    		dy=y1-y0;
00000e  1a75              SUBS     r5,r6,r1
000010  f8ddb024          LDR      r11,[sp,#0x24]        ;343
000014  f04f0c2a          MOV      r12,#0x2a             ;343
000018  ea4f2e1a          LSR      lr,r10,#8             ;348
00001c  ebaa0400          SUB      r4,r10,r0             ;358
000020  42b1              CMP      r1,r6                 ;343
000022  d12c              BNE      |L4.126|
000024  f04f45c0          MOV      r5,#0x60000000        ;343
000028  f8a5c000          STRH     r12,[r5,#0]           ;343
00002c  f8dfc218          LDR      r12,|L4.584|
000030  f8ac2000          STRH     r2,[r12,#0]           ;343
000034  b2c0              UXTB     r0,r0                 ;347
000036  f8ac0000          STRH     r0,[r12,#0]           ;347
00003a  f8ace000          STRH     lr,[r12,#0]           ;347
00003e  f00a00ff          AND      r0,r10,#0xff          ;349
000042  f8ac0000          STRH     r0,[r12,#0]           ;349
000046  f04f002b          MOV      r0,#0x2b              ;349
00004a  8028              STRH     r0,[r5,#0]            ;349
00004c  f8ac3000          STRH     r3,[r12,#0]           ;349
000050  b2c8              UXTB     r0,r1                 ;353
000052  f8ac0000          STRH     r0,[r12,#0]           ;353
000056  f8ac7000          STRH     r7,[r12,#0]           ;353
00005a  b2f0              UXTB     r0,r6                 ;355
00005c  f8ac0000          STRH     r0,[r12,#0]           ;355
000060  f04f002c          MOV      r0,#0x2c              ;355
000064  8028              STRH     r0,[r5,#0]            ;355
000066  f1040401          ADD      r4,r4,#1              ;358
00006a  f04f0000          MOV      r0,#0                 ;360
00006e  e002              B        |L4.118|
                  |L4.112|
000070  f8acb000          STRH     r11,[r12,#0]          ;360
000074  1c40              ADDS     r0,r0,#1              ;360
                  |L4.118|
000076  42a0              CMP      r0,r4                 ;360
000078  d3fa              BCC      |L4.112|
                  |L4.122|
;;;372    	}
;;;373     
;;;374     	if(x0==x1)
;;;375    	{
;;;376    		  LCD_WriteCom(0x002A);	
;;;377      		  LCD_WriteRAM(x0>>8);	    
;;;378    	      LCD_WriteRAM(x0&0x00ff);
;;;379    	      LCD_WriteRAM(x1>>8);	    
;;;380    	      LCD_WriteRAM(x1&0x00ff);
;;;381              LCD_WriteCom(0x002b);	
;;;382    	
;;;383    	      LCD_WriteRAM(y0>>8);	    
;;;384    	      LCD_WriteRAM(y0&0x00ff);
;;;385    	      LCD_WriteRAM(y1>>8);	    
;;;386    	      LCD_WriteRAM(y1&0x00ff);
;;;387    	      LCD_WriteCom(0x002c);
;;;388      		  
;;;389    		  length=y1-y0+1;  
;;;390      		
;;;391     		  for(i=0;i<length;i++)      //开始连续写入
;;;392     	      LCD_WriteRAM(color);
;;;393    
;;;394      		return;
;;;395    	}
;;;396    	else if(x0 > x1)
;;;397     	{
;;;398    		dx=x0-x1;
;;;399      		x = x1;
;;;400      		x1 = x0;
;;;401      		y = y1;
;;;402      		y1 = y0;
;;;403     	}
;;;404     	else
;;;405     	{
;;;406    		dx=x1-x0;
;;;407      		x = x0;
;;;408      		y = y0;
;;;409     	}
;;;410    
;;;411     	if(dx == dy)
;;;412     	{
;;;413      		while(x <= x1)
;;;414      		{
;;;415    
;;;416       			x++;
;;;417    			if(y>y1)
;;;418    			{
;;;419    				y--;
;;;420    			}
;;;421    			else
;;;422    			{
;;;423       				y++;
;;;424    			}
;;;425       			LCD_SetPoint(x,y,color);
;;;426      		}
;;;427     	}
;;;428     	else
;;;429     	{
;;;430     		LCD_SetPoint(x, y, color);
;;;431      		if(y < y1)
;;;432      		{
;;;433       			if(dx > dy)
;;;434       			{
;;;435        			s16 p = dy * 2 - dx;
;;;436        			s16 twoDy = 2 * dy;
;;;437        			s16 twoDyMinusDx = 2 * (dy - dx);
;;;438        			while(x < x1)
;;;439        			{
;;;440         				x++;
;;;441         				if(p < 0)
;;;442         				{
;;;443          					p += twoDy;
;;;444         				}
;;;445         				else
;;;446         				{
;;;447          					y++;
;;;448          					p += twoDyMinusDx;
;;;449         				}
;;;450         				LCD_SetPoint(x, y,color);
;;;451        			}
;;;452       			}
;;;453       			else
;;;454       			{
;;;455        			s16 p = dx * 2 - dy;
;;;456        			s16 twoDx = 2 * dx;
;;;457        			s16 twoDxMinusDy = 2 * (dx - dy);
;;;458        			while(y < y1)
;;;459        			{
;;;460         				y++;
;;;461         				if(p < 0)
;;;462         				{
;;;463          					p += twoDx;
;;;464         				}
;;;465         				else
;;;466         				{
;;;467          					x++;
;;;468          					p+= twoDxMinusDy;
;;;469         				}
;;;470         				LCD_SetPoint(x, y, color);
;;;471        			}
;;;472       			}
;;;473      		}
;;;474      		else
;;;475      		{
;;;476       			if(dx > dy)
;;;477       			{
;;;478        			s16 p = dy * 2 - dx;
;;;479        			s16 twoDy = 2 * dy;
;;;480    	    		s16 twoDyMinusDx = 2 * (dy - dx);
;;;481        			while(x < x1)
;;;482        			{
;;;483         				x++;
;;;484         				if(p < 0)
;;;485    	     			{
;;;486        	  				p += twoDy;
;;;487         				}
;;;488         				else
;;;489         				{
;;;490          					y--;
;;;491    	      				p += twoDyMinusDx;
;;;492        	 			}
;;;493         				LCD_SetPoint(x, y,color);
;;;494        			}
;;;495       			}
;;;496    	   		else
;;;497       			{
;;;498        			s16 p = dx * 2 - dy;
;;;499        			s16 twoDx = 2 * dx;
;;;500    	    		s16 twoDxMinusDy = 2 * (dx - dy);
;;;501        			while(y1 < y)
;;;502        			{
;;;503         				y--;
;;;504         				if(p < 0)
;;;505    	     			{
;;;506        	  				p += twoDx;
;;;507         				}
;;;508         				else
;;;509         				{
;;;510          					x++;
;;;511    	      				p+= twoDxMinusDy;
;;;512        	 			}
;;;513         				LCD_SetPoint(x, y,color);
;;;514        			}
;;;515       			}
;;;516      		}
;;;517     	}
;;;518    }
00007a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.126|
00007e  d904              BLS      |L4.138|
000080  eba10806          SUB      r8,r1,r6              ;367
000084  fa1ff888          UXTH     r8,r8                 ;367
000088  e001              B        |L4.142|
                  |L4.138|
00008a  fa1ff885          UXTH     r8,r5                 ;371
                  |L4.142|
00008e  46c1              MOV      r9,r8                 ;367
000090  46d0              MOV      r8,r10                ;374
000092  4550              CMP      r0,r10                ;374
000094  d12b              BNE      |L4.238|
000096  f04f44c0          MOV      r4,#0x60000000        ;374
00009a  f8a4c000          STRH     r12,[r4,#0]           ;374
00009e  f8dfc1a8          LDR      r12,|L4.584|
0000a2  f8ac2000          STRH     r2,[r12,#0]           ;374
0000a6  b2c0              UXTB     r0,r0                 ;378
0000a8  f8ac0000          STRH     r0,[r12,#0]           ;378
0000ac  f8ace000          STRH     lr,[r12,#0]           ;378
0000b0  f00800ff          AND      r0,r8,#0xff           ;380
0000b4  f8ac0000          STRH     r0,[r12,#0]           ;380
0000b8  f04f002b          MOV      r0,#0x2b              ;380
0000bc  8020              STRH     r0,[r4,#0]            ;380
0000be  f8ac3000          STRH     r3,[r12,#0]           ;380
0000c2  b2c8              UXTB     r0,r1                 ;384
0000c4  f8ac0000          STRH     r0,[r12,#0]           ;384
0000c8  f8ac7000          STRH     r7,[r12,#0]           ;384
0000cc  b2f0              UXTB     r0,r6                 ;386
0000ce  f8ac0000          STRH     r0,[r12,#0]           ;386
0000d2  f04f002c          MOV      r0,#0x2c              ;386
0000d6  8020              STRH     r0,[r4,#0]            ;386
0000d8  f1050501          ADD      r5,r5,#1              ;389
0000dc  f04f0000          MOV      r0,#0                 ;391
0000e0  e002              B        |L4.232|
                  |L4.226|
0000e2  f8acb000          STRH     r11,[r12,#0]          ;391
0000e6  1c40              ADDS     r0,r0,#1              ;391
                  |L4.232|
0000e8  42a8              CMP      r0,r5                 ;391
0000ea  d3fa              BCC      |L4.226|
0000ec  e7c5              B        |L4.122|
                  |L4.238|
0000ee  d907              BLS      |L4.256|
0000f0  eba00208          SUB      r2,r0,r8              ;398
0000f4  4655              MOV      r5,r10                ;399
0000f6  4634              MOV      r4,r6                 ;401
0000f8  b297              UXTH     r7,r2                 ;398
0000fa  4682              MOV      r10,r0                ;400
0000fc  460e              MOV      r6,r1                 ;402
0000fe  e002              B        |L4.262|
                  |L4.256|
000100  b2a7              UXTH     r7,r4                 ;406
000102  4605              MOV      r5,r0                 ;407
000104  460c              MOV      r4,r1                 ;408
                  |L4.262|
000106  454f              CMP      r7,r9                 ;411
000108  d00d              BEQ      |L4.294|
00010a  e00f              B        |L4.300|
                  |L4.268|
00010c  1c6d              ADDS     r5,r5,#1              ;416
00010e  b2ad              UXTH     r5,r5                 ;416
000110  42b4              CMP      r4,r6                 ;417
000112  d901              BLS      |L4.280|
000114  1e64              SUBS     r4,r4,#1              ;419
000116  e000              B        |L4.282|
                  |L4.280|
000118  1c64              ADDS     r4,r4,#1              ;423
                  |L4.282|
00011a  b2a4              UXTH     r4,r4                 ;423
00011c  465a              MOV      r2,r11                ;425
00011e  4621              MOV      r1,r4                 ;425
000120  4628              MOV      r0,r5                 ;425
000122  f7fffffe          BL       LCD_SetPoint
                  |L4.294|
000126  4555              CMP      r5,r10                ;413
000128  d9f0              BLS      |L4.268|
00012a  e7a6              B        |L4.122|
                  |L4.300|
00012c  465a              MOV      r2,r11                ;430
00012e  4621              MOV      r1,r4                 ;430
000130  4628              MOV      r0,r5                 ;430
000132  f7fffffe          BL       LCD_SetPoint
000136  42b4              CMP      r4,r6                 ;431
000138  d242              BCS      |L4.448|
00013a  454f              CMP      r7,r9                 ;433
00013c  d91e              BLS      |L4.380|
00013e  ebc70049          RSB      r0,r7,r9,LSL #1       ;435
000142  b206              SXTH     r6,r0                 ;435
000144  ea4f0049          LSL      r0,r9,#1              ;436
000148  fa0ff880          SXTH     r8,r0                 ;436
00014c  eba90007          SUB      r0,r9,r7              ;437
000150  0040              LSLS     r0,r0,#1              ;437
000152  b207              SXTH     r7,r0                 ;437
000154  e00f              B        |L4.374|
                  |L4.342|
000156  1c6d              ADDS     r5,r5,#1              ;440
000158  b2ad              UXTH     r5,r5                 ;440
00015a  2e00              CMP      r6,#0                 ;441
00015c  da02              BGE      |L4.356|
00015e  eb060008          ADD      r0,r6,r8              ;443
000162  e002              B        |L4.362|
                  |L4.356|
000164  1c64              ADDS     r4,r4,#1              ;447
000166  b2a4              UXTH     r4,r4                 ;447
000168  19f0              ADDS     r0,r6,r7              ;448
                  |L4.362|
00016a  b206              SXTH     r6,r0                 ;448
00016c  465a              MOV      r2,r11                ;450
00016e  4621              MOV      r1,r4                 ;450
000170  4628              MOV      r0,r5                 ;450
000172  f7fffffe          BL       LCD_SetPoint
                  |L4.374|
000176  4555              CMP      r5,r10                ;438
000178  d3ed              BCC      |L4.342|
00017a  e77e              B        |L4.122|
                  |L4.380|
00017c  ebc90047          RSB      r0,r9,r7,LSL #1       ;455
000180  fa0ff880          SXTH     r8,r0                 ;455
000184  0078              LSLS     r0,r7,#1              ;456
000186  fa0ffa80          SXTH     r10,r0                ;456
00018a  eba70009          SUB      r0,r7,r9              ;457
00018e  0040              LSLS     r0,r0,#1              ;457
000190  b207              SXTH     r7,r0                 ;457
000192  e012              B        |L4.442|
                  |L4.404|
000194  1c64              ADDS     r4,r4,#1              ;460
000196  b2a4              UXTH     r4,r4                 ;460
000198  f1b80f00          CMP      r8,#0                 ;461
00019c  da02              BGE      |L4.420|
00019e  eb08000a          ADD      r0,r8,r10             ;463
0001a2  e003              B        |L4.428|
                  |L4.420|
0001a4  1c6d              ADDS     r5,r5,#1              ;467
0001a6  b2ad              UXTH     r5,r5                 ;467
0001a8  eb080007          ADD      r0,r8,r7              ;468
                  |L4.428|
0001ac  fa0ff880          SXTH     r8,r0                 ;468
0001b0  465a              MOV      r2,r11                ;470
0001b2  4621              MOV      r1,r4                 ;470
0001b4  4628              MOV      r0,r5                 ;470
0001b6  f7fffffe          BL       LCD_SetPoint
                  |L4.442|
0001ba  42b4              CMP      r4,r6                 ;458
0001bc  d3ea              BCC      |L4.404|
0001be  e75c              B        |L4.122|
                  |L4.448|
0001c0  454f              CMP      r7,r9                 ;476
0001c2  d91e              BLS      |L4.514|
0001c4  ebc70049          RSB      r0,r7,r9,LSL #1       ;478
0001c8  b206              SXTH     r6,r0                 ;478
0001ca  ea4f0049          LSL      r0,r9,#1              ;479
0001ce  fa0ff880          SXTH     r8,r0                 ;479
0001d2  eba90007          SUB      r0,r9,r7              ;480
0001d6  0040              LSLS     r0,r0,#1              ;480
0001d8  b207              SXTH     r7,r0                 ;480
0001da  e00f              B        |L4.508|
                  |L4.476|
0001dc  1c6d              ADDS     r5,r5,#1              ;483
0001de  b2ad              UXTH     r5,r5                 ;483
0001e0  2e00              CMP      r6,#0                 ;484
0001e2  da02              BGE      |L4.490|
0001e4  eb060008          ADD      r0,r6,r8              ;486
0001e8  e002              B        |L4.496|
                  |L4.490|
0001ea  1e64              SUBS     r4,r4,#1              ;490
0001ec  b2a4              UXTH     r4,r4                 ;490
0001ee  19f0              ADDS     r0,r6,r7              ;491
                  |L4.496|
0001f0  b206              SXTH     r6,r0                 ;491
0001f2  465a              MOV      r2,r11                ;493
0001f4  4621              MOV      r1,r4                 ;493
0001f6  4628              MOV      r0,r5                 ;493
0001f8  f7fffffe          BL       LCD_SetPoint
                  |L4.508|
0001fc  4555              CMP      r5,r10                ;481
0001fe  d3ed              BCC      |L4.476|
000200  e73b              B        |L4.122|
                  |L4.514|
000202  ebc90047          RSB      r0,r9,r7,LSL #1       ;498
000206  fa0ff880          SXTH     r8,r0                 ;498
00020a  0078              LSLS     r0,r7,#1              ;499
00020c  fa0ffa80          SXTH     r10,r0                ;499
000210  eba70009          SUB      r0,r7,r9              ;500
000214  0040              LSLS     r0,r0,#1              ;500
000216  b207              SXTH     r7,r0                 ;500
000218  e012              B        |L4.576|
                  |L4.538|
00021a  1e64              SUBS     r4,r4,#1              ;503
00021c  b2a4              UXTH     r4,r4                 ;503
00021e  f1b80f00          CMP      r8,#0                 ;504
000222  da02              BGE      |L4.554|
000224  eb08000a          ADD      r0,r8,r10             ;506
000228  e003              B        |L4.562|
                  |L4.554|
00022a  1c6d              ADDS     r5,r5,#1              ;510
00022c  b2ad              UXTH     r5,r5                 ;510
00022e  eb080007          ADD      r0,r8,r7              ;511
                  |L4.562|
000232  fa0ff880          SXTH     r8,r0                 ;511
000236  465a              MOV      r2,r11                ;513
000238  4621              MOV      r1,r4                 ;513
00023a  4628              MOV      r0,r5                 ;513
00023c  f7fffffe          BL       LCD_SetPoint
                  |L4.576|
000240  42a6              CMP      r6,r4                 ;501
000242  d3ea              BCC      |L4.538|
000244  e719              B        |L4.122|
;;;519    
                          ENDP

000246  0000              DCW      0x0000
                  |L4.584|
                          DCD      0x60080000

                          AREA ||i.GUI_Rectangle||, CODE, READONLY, ALIGN=1

                  GUI_Rectangle PROC
;;;578    ****************************************************************************/
;;;579    void GUI_Rectangle(u16 x0, u16 y0, u16 x1, u16 y1,u16 color,u8 fill)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;580    {
000004  4607              MOV      r7,r0
000006  e9dd9008          LDRD     r9,r0,[sp,#0x20]
00000a  460e              MOV      r6,r1
00000c  4615              MOV      r5,r2
00000e  4698              MOV      r8,r3
;;;581    	if(fill)
000010  b1a0              CBZ      r0,|L5.60|
;;;582    	{
;;;583    		u16 i;
;;;584    		if(x0>x1)
000012  42af              CMP      r7,r5
000014  d902              BLS      |L5.28|
;;;585    		{
;;;586    			i=x1;
000016  4614              MOV      r4,r2
;;;587    			x1=x0;
000018  463d              MOV      r5,r7
00001a  e00b              B        |L5.52|
                  |L5.28|
;;;588    		}
;;;589    		else
;;;590    		{
;;;591    			i=x0;
00001c  463c              MOV      r4,r7
00001e  e009              B        |L5.52|
                  |L5.32|
;;;592    		}
;;;593    		for(;i<=x1;i++)
;;;594    		{
;;;595    			GUI_Line(i,y0,i,y1,color);
000020  4643              MOV      r3,r8
000022  4622              MOV      r2,r4
000024  4631              MOV      r1,r6
000026  4620              MOV      r0,r4
000028  f8cd9000          STR      r9,[sp,#0]
00002c  f7fffffe          BL       GUI_Line
000030  1c64              ADDS     r4,r4,#1              ;593
000032  b2a4              UXTH     r4,r4                 ;593
                  |L5.52|
000034  42ac              CMP      r4,r5                 ;593
000036  d9f3              BLS      |L5.32|
                  |L5.56|
;;;596    		}
;;;597    		return;
;;;598    	}
;;;599    	GUI_Line(x0,y0,x0,y1,color);
;;;600    	GUI_Line(x0,y1,x1,y1,color);
;;;601    	GUI_Line(x1,y1,x1,y0,color);
;;;602    	GUI_Line(x1,y0,x0,y0,color);
;;;603    }
000038  e8bd83f8          POP      {r3-r9,pc}
                  |L5.60|
00003c  4643              MOV      r3,r8                 ;599
00003e  463a              MOV      r2,r7                 ;599
000040  4638              MOV      r0,r7                 ;599
000042  f8cd9000          STR      r9,[sp,#0]            ;599
000046  f7fffffe          BL       GUI_Line
00004a  4643              MOV      r3,r8                 ;600
00004c  462a              MOV      r2,r5                 ;600
00004e  4641              MOV      r1,r8                 ;600
000050  4638              MOV      r0,r7                 ;600
000052  f8cd9000          STR      r9,[sp,#0]            ;600
000056  f7fffffe          BL       GUI_Line
00005a  4633              MOV      r3,r6                 ;601
00005c  462a              MOV      r2,r5                 ;601
00005e  4641              MOV      r1,r8                 ;601
000060  4628              MOV      r0,r5                 ;601
000062  f8cd9000          STR      r9,[sp,#0]            ;601
000066  f7fffffe          BL       GUI_Line
00006a  4633              MOV      r3,r6                 ;602
00006c  463a              MOV      r2,r7                 ;602
00006e  4631              MOV      r1,r6                 ;602
000070  4628              MOV      r0,r5                 ;602
000072  f8cd9000          STR      r9,[sp,#0]            ;602
000076  f7fffffe          BL       GUI_Line
00007a  e7dd              B        |L5.56|
;;;604    
                          ENDP


                          AREA ||i.GUI_SetVLine||, CODE, READONLY, ALIGN=2

                  GUI_SetVLine PROC
;;;681    *****************************************************************************/
;;;682    int GUI_SetVLine(u16 x0, u16 y0,u16 y1,u16 *color)
000000  b5f0              PUSH     {r4-r7,lr}
000002  f04f45c0          MOV      r5,#0x60000000
000006  242a              MOVS     r4,#0x2a
000008  802c              STRH     r4,[r5,#0]
00000a  4c0f              LDR      r4,|L6.72|
;;;683    {
;;;684     	int length,i;
;;;685    
;;;686    	LCD_WriteCom(0x002A);	
;;;687      	LCD_WriteRAM(x0>>8);	    
00000c  0a06              LSRS     r6,r0,#8
00000e  8026              STRH     r6,[r4,#0]
;;;688    	LCD_WriteRAM(x0&0x00ff);
000010  b2c7              UXTB     r7,r0
000012  8027              STRH     r7,[r4,#0]
000014  8026              STRH     r6,[r4,#0]
;;;689    	LCD_WriteRAM(x0>>8);	    
;;;690    	LCD_WriteRAM(x0&0x00ff);
000016  b2c0              UXTB     r0,r0
000018  8020              STRH     r0,[r4,#0]
00001a  202b              MOVS     r0,#0x2b
00001c  8028              STRH     r0,[r5,#0]
;;;691        LCD_WriteCom(0x002b);	
;;;692    	
;;;693    	LCD_WriteRAM(y0>>8);	    
00001e  0a08              LSRS     r0,r1,#8
000020  8020              STRH     r0,[r4,#0]
;;;694    	LCD_WriteRAM(y0&0x00ff);
000022  b2c8              UXTB     r0,r1
000024  8020              STRH     r0,[r4,#0]
;;;695    	LCD_WriteRAM(y1>>8);	    
000026  0a10              LSRS     r0,r2,#8
000028  8020              STRH     r0,[r4,#0]
;;;696    	LCD_WriteRAM(y1&0x00ff);
00002a  b2d0              UXTB     r0,r2
00002c  8020              STRH     r0,[r4,#0]
00002e  202c              MOVS     r0,#0x2c
000030  8028              STRH     r0,[r5,#0]
;;;697    	LCD_WriteCom(0x002c); 
;;;698    		  
;;;699    	length=y1-y0+1;  
000032  1a50              SUBS     r0,r2,r1
000034  1c40              ADDS     r0,r0,#1
;;;700      		
;;;701     	for(i=0;i<length;i++)      
000036  2100              MOVS     r1,#0
000038  e003              B        |L6.66|
                  |L6.58|
;;;702     	LCD_WriteRAM(color[i]);
00003a  f8332011          LDRH     r2,[r3,r1,LSL #1]
00003e  8022              STRH     r2,[r4,#0]
000040  1c49              ADDS     r1,r1,#1              ;701
                  |L6.66|
000042  4281              CMP      r1,r0                 ;701
000044  dbf9              BLT      |L6.58|
;;;703    	return length;
;;;704    }
000046  bdf0              POP      {r4-r7,pc}
;;;705    
                          ENDP

                  |L6.72|
                          DCD      0x60080000

                          AREA ||i.GUI_Square||, CODE, READONLY, ALIGN=1

                  GUI_Square PROC
;;;612    ****************************************************************************/
;;;613    void  GUI_Square(u16 x0, u16 y0, u16 with, u16 color,u8 fill)
000000  b51c              PUSH     {r2-r4,lr}
;;;614    {
000002  4614              MOV      r4,r2
000004  461a              MOV      r2,r3
000006  9b04              LDR      r3,[sp,#0x10]
000008  e9cd2300          STRD     r2,r3,[sp,#0]
;;;615    	GUI_Rectangle(x0, y0, x0+with, y0+with, color,fill);
00000c  190a              ADDS     r2,r1,r4
00000e  b293              UXTH     r3,r2
000010  1902              ADDS     r2,r0,r4
000012  b292              UXTH     r2,r2
000014  f7fffffe          BL       GUI_Rectangle
;;;616    }
000018  bd1c              POP      {r2-r4,pc}
;;;617    
                          ENDP


                          AREA ||i.GUI_Text||, CODE, READONLY, ALIGN=1

                  GUI_Text PROC
;;;313    ****************************************************************************/
;;;314    void GUI_Text(u16 x, u16 y, u8 *str, u16 len,u16 Color, u16 bkColor)
000000  2000              MOVS     r0,#0
;;;315    {
;;;316      u8 i;
;;;317      
;;;318      for (i=0;i<len;i++)
000002  e001              B        |L8.8|
                  |L8.4|
000004  1c40              ADDS     r0,r0,#1
000006  b2c0              UXTB     r0,r0
                  |L8.8|
000008  4298              CMP      r0,r3
00000a  d3fb              BCC      |L8.4|
;;;319      {
;;;320     //   ili9320_PutChar((x+8*i),y,*str++,Color,bkColor);
;;;321      }
;;;322    }
00000c  4770              BX       lr
;;;323    
                          ENDP


                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=2

                  LCD_Clear PROC
;;;127    ****************************************************************************/
;;;128    void LCD_Clear(u16 c)
000000  b570              PUSH     {r4-r6,lr}
000002  f04f44c0          MOV      r4,#0x60000000
000006  202a              MOVS     r0,#0x2a
;;;129    {
;;;130        unsigned int l=800,w;
000008  f44f7148          MOV      r1,#0x320
00000c  8020              STRH     r0,[r4,#0]
00000e  4a11              LDR      r2,|L9.84|
000010  2300              MOVS     r3,#0
000012  8013              STRH     r3,[r2,#0]
000014  8013              STRH     r3,[r2,#0]
;;;131    
;;;132    	LCD_WriteCom(0x002A);	
;;;133    	LCD_WriteRAM(0);	    
;;;134    	LCD_WriteRAM(0);
;;;135    	LCD_WriteRAM(HDP>>8);	    
000016  4e10              LDR      r6,|L9.88|
000018  6870              LDR      r0,[r6,#4]  ; HDP
00001a  0a05              LSRS     r5,r0,#8
00001c  8015              STRH     r5,[r2,#0]
;;;136    	LCD_WriteRAM(HDP&0x00ff);
00001e  b2c0              UXTB     r0,r0
000020  8010              STRH     r0,[r2,#0]
000022  202b              MOVS     r0,#0x2b
000024  8020              STRH     r0,[r4,#0]
000026  8013              STRH     r3,[r2,#0]
000028  8013              STRH     r3,[r2,#0]
;;;137        LCD_WriteCom(0x002b);	
;;;138    	LCD_WriteRAM(0);	    
;;;139    	LCD_WriteRAM(0);
;;;140    	LCD_WriteRAM(VDP>>8);	    
00002a  6970              LDR      r0,[r6,#0x14]  ; VDP
00002c  0a03              LSRS     r3,r0,#8
00002e  8013              STRH     r3,[r2,#0]
;;;141    	LCD_WriteRAM(VDP&0x00ff);
000030  b2c0              UXTB     r0,r0
000032  8010              STRH     r0,[r2,#0]
000034  202c              MOVS     r0,#0x2c
000036  8020              STRH     r0,[r4,#0]
000038  f44f4378          MOV      r3,#0xf800
;;;142    	LCD_WriteCom(0x002c);
;;;143    	
;;;144    	
;;;145    	while(l--)
;;;146    	{
;;;147    	    for(w=0;w<480;w++)
00003c  f44f74f0          MOV      r4,#0x1e0
000040  e004              B        |L9.76|
                  |L9.66|
000042  2000              MOVS     r0,#0
                  |L9.68|
000044  8013              STRH     r3,[r2,#0]
000046  1c40              ADDS     r0,r0,#1
000048  42a0              CMP      r0,r4
00004a  d3fb              BCC      |L9.68|
                  |L9.76|
00004c  1e49              SUBS     r1,r1,#1              ;145
00004e  d2f8              BCS      |L9.66|
;;;148    		{    
;;;149              	LCD_WriteRAM(0xf800);
;;;150    		}
;;;151    	}
;;;152    }
000050  bd70              POP      {r4-r6,pc}
;;;153    /****************************************************************************
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x60080000
                  |L9.88|
                          DCD      ||.data||

                          AREA ||i.LCD_GetPoint||, CODE, READONLY, ALIGN=1

                  LCD_GetPoint PROC
;;;87     //****************************************************************************************************
;;;88     unsigned int LCD_GetPoint(int x,int y)
000000  b500              PUSH     {lr}
;;;89     { 
;;;90       ssd1963_SetCursor(x,y);
000002  b289              UXTH     r1,r1
000004  b280              UXTH     r0,r0
000006  f7fffffe          BL       ssd1963_SetCursor
;;;91       return (LCD_ReadRAM());
00000a  f85deb04          POP      {lr}
00000e  f7ffbffe          B.W      LCD_ReadRAM
;;;92     }
;;;93     //****************************************************************************************************
                          ENDP


                          AREA ||i.LCD_ReadRAM||, CODE, READONLY, ALIGN=2

                  LCD_ReadRAM PROC
;;;57     *******************************************************************************/
;;;58     u16 LCD_ReadRAM(void)
000000  f04f41c0          MOV      r1,#0x60000000
;;;59     {
;;;60     	u16 dummy;
;;;61       	/* Write 16-bit Index (then Read Reg) */
;;;62       	*ptr_LCD_ADDR_REG	 = 0x002e;
000004  202e              MOVS     r0,#0x2e
000006  8008              STRH     r0,[r1,#0]
;;;63       	/* Read 16-bit Reg */
;;;64       	dummy  =  *ptr_LCD_ADDR_RAM;
000008  4801              LDR      r0,|L11.16|
00000a  8800              LDRH     r0,[r0,#0]
;;;65       	return dummy;
;;;66     }
00000c  4770              BX       lr
;;;67     
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0x60080000

                          AREA ||i.LCD_SetPoint||, CODE, READONLY, ALIGN=2

                  LCD_SetPoint PROC
;;;162    ****************************************************************************/
;;;163    void LCD_SetPoint(u16 x,u16 y,u16 c)
000000  b570              PUSH     {r4-r6,lr}
000002  f04f44c0          MOV      r4,#0x60000000
000006  232a              MOVS     r3,#0x2a
000008  8023              STRH     r3,[r4,#0]
00000a  4b0d              LDR      r3,|L12.64|
;;;164    {
;;;165        LCD_WriteCom(0x002A);	
;;;166    	LCD_WriteRAM(x>>8);	    
00000c  0a05              LSRS     r5,r0,#8
00000e  801d              STRH     r5,[r3,#0]
;;;167    	LCD_WriteRAM(x&0x00ff);
000010  b2c0              UXTB     r0,r0
000012  8018              STRH     r0,[r3,#0]
;;;168    	LCD_WriteRAM(HDP>>8);	    
000014  4e0b              LDR      r6,|L12.68|
000016  6870              LDR      r0,[r6,#4]  ; HDP
000018  0a05              LSRS     r5,r0,#8
00001a  801d              STRH     r5,[r3,#0]
;;;169    	LCD_WriteRAM(HDP&0x00ff);
00001c  b2c0              UXTB     r0,r0
00001e  8018              STRH     r0,[r3,#0]
000020  202b              MOVS     r0,#0x2b
000022  8020              STRH     r0,[r4,#0]
;;;170        LCD_WriteCom(0x002b);	
;;;171    	LCD_WriteRAM(y>>8);	    
000024  0a08              LSRS     r0,r1,#8
000026  8018              STRH     r0,[r3,#0]
;;;172    	LCD_WriteRAM(y&0x00ff);
000028  b2c8              UXTB     r0,r1
00002a  8018              STRH     r0,[r3,#0]
;;;173    	LCD_WriteRAM(VDP>>8);	    
00002c  6970              LDR      r0,[r6,#0x14]  ; VDP
00002e  0a01              LSRS     r1,r0,#8
000030  8019              STRH     r1,[r3,#0]
;;;174    	LCD_WriteRAM(VDP&0x00ff);
000032  b2c0              UXTB     r0,r0
000034  8018              STRH     r0,[r3,#0]
000036  202c              MOVS     r0,#0x2c
000038  8020              STRH     r0,[r4,#0]
00003a  801a              STRH     r2,[r3,#0]
;;;175    	LCD_WriteCom(0x002c);
;;;176     	LCD_WriteRAM(c);
;;;177    }
00003c  bd70              POP      {r4-r6,pc}
;;;178    /****************************************************************************
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      0x60080000
                  |L12.68|
                          DCD      ||.data||

                          AREA ||i.LCD_WriteCom||, CODE, READONLY, ALIGN=1

                  LCD_WriteCom PROC
;;;34     *******************************************************************************/
;;;35     void LCD_WriteCom(u16 LCD_Reg)
000000  f04f41c0          MOV      r1,#0x60000000
;;;36     {
;;;37     	*ptr_LCD_ADDR_REG  =LCD_Reg;
000004  8008              STRH     r0,[r1,#0]
;;;38     }
000006  4770              BX       lr
;;;39     /*******************************************************************************
                          ENDP


                          AREA ||i.LCD_WriteRAM||, CODE, READONLY, ALIGN=2

                  LCD_WriteRAM PROC
;;;45     *******************************************************************************/
;;;46     void LCD_WriteRAM(u16 RGB_Code)					 
000000  4901              LDR      r1,|L14.8|
;;;47     {
;;;48     	/* Write 16-bit GRAM Reg */
;;;49       	*ptr_LCD_ADDR_RAM	 =RGB_Code;
000002  8008              STRH     r0,[r1,#0]
;;;50     }
000004  4770              BX       lr
;;;51     /*******************************************************************************
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x60080000

                          AREA ||i.LCD_X_Init||, CODE, READONLY, ALIGN=1

                  LCD_X_Init PROC
;;;22     
;;;23     void LCD_X_Init(void)
000000  4770              BX       lr
;;;24     {
;;;25     
;;;26     }
;;;27     
                          ENDP


                          AREA ||i.Lcd_Init||, CODE, READONLY, ALIGN=2

                  Lcd_Init PROC
;;;185    ****************************************************************************/
;;;186    void Lcd_Init(void)
000000  b5f0              PUSH     {r4-r7,lr}
000002  f04f42c0          MOV      r2,#0x60000000
000006  20e2              MOVS     r0,#0xe2
000008  8010              STRH     r0,[r2,#0]
00000a  4843              LDR      r0,|L16.280|
00000c  2123              MOVS     r1,#0x23
00000e  8001              STRH     r1,[r0,#0]
000010  2102              MOVS     r1,#2
000012  8001              STRH     r1,[r0,#0]
000014  2104              MOVS     r1,#4
000016  8001              STRH     r1,[r0,#0]
000018  23e0              MOVS     r3,#0xe0
00001a  8013              STRH     r3,[r2,#0]
00001c  2601              MOVS     r6,#1
00001e  8006              STRH     r6,[r0,#0]
000020  2400              MOVS     r4,#0
                  |L16.34|
000022  1c64              ADDS     r4,r4,#1
000024  2c0a              CMP      r4,#0xa
000026  d3fc              BCC      |L16.34|
000028  8013              STRH     r3,[r2,#0]
00002a  2703              MOVS     r7,#3
00002c  8007              STRH     r7,[r0,#0]
00002e  2400              MOVS     r4,#0
                  |L16.48|
000030  1c64              ADDS     r4,r4,#1
000032  2c32              CMP      r4,#0x32
000034  d3fc              BCC      |L16.48|
000036  8016              STRH     r6,[r2,#0]
000038  2400              MOVS     r4,#0
                  |L16.58|
00003a  1c64              ADDS     r4,r4,#1
00003c  2c32              CMP      r4,#0x32
00003e  d3fc              BCC      |L16.58|
000040  24e6              MOVS     r4,#0xe6
000042  8014              STRH     r4,[r2,#0]
000044  8001              STRH     r1,[r0,#0]
000046  2193              MOVS     r1,#0x93
000048  8001              STRH     r1,[r0,#0]
00004a  8003              STRH     r3,[r0,#0]
00004c  21b0              MOVS     r1,#0xb0
00004e  8011              STRH     r1,[r2,#0]
000050  2300              MOVS     r3,#0
000052  8003              STRH     r3,[r0,#0]
000054  8003              STRH     r3,[r0,#0]
;;;187    {
;;;188      	LCD_X_Init();
;;;189    	LCD_WriteCom(0x00E2);	
;;;190    	LCD_WriteRAM(0x0023);
;;;191    	// Set PLL with OSC = 10MHz (hardware)
;;;192        // Multiplier N = 35, VCO (>250MHz)= OSC*(N+1), VCO = 360MHz	   
;;;193    	LCD_WriteRAM(0x0002);
;;;194    	// Divider M = 2, PLL = 360/(M+1) = 120MHz
;;;195    	LCD_WriteRAM(0x0004);
;;;196    	// Validate M and N values
;;;197    
;;;198    	LCD_WriteCom(0x00E0);  // PLL enable
;;;199    	LCD_WriteRAM(0x0001);
;;;200    	TimeDelay(10);
;;;201    	LCD_WriteCom(0x00E0);
;;;202    	LCD_WriteRAM(0x0003);
;;;203    	TimeDelay(50);
;;;204    	LCD_WriteCom(0x0001);  // software reset
;;;205    	TimeDelay(50);
;;;206    	LCD_WriteCom(0x00E6);
;;;207    	LCD_WriteRAM(0x0004);
;;;208    	LCD_WriteRAM(0x0093);
;;;209    	LCD_WriteRAM(0x00e0);
;;;210    
;;;211    	LCD_WriteCom(0x00B0);	//LCD SPECIFICATION
;;;212    	LCD_WriteRAM(0x0000);
;;;213    	LCD_WriteRAM(0x0000);
;;;214    	LCD_WriteRAM((HDP>>8)&0X00FF);  //Set HDP
000056  4931              LDR      r1,|L16.284|
000058  684d              LDR      r5,[r1,#4]  ; HDP
00005a  f3c52407          UBFX     r4,r5,#8,#8
00005e  8004              STRH     r4,[r0,#0]
;;;215    	LCD_WriteRAM(HDP&0X00FF);
000060  b2ec              UXTB     r4,r5
000062  8004              STRH     r4,[r0,#0]
;;;216        LCD_WriteRAM((VDP>>8)&0X00FF);  //Set VDP
000064  694d              LDR      r5,[r1,#0x14]  ; VDP
000066  f3c52407          UBFX     r4,r5,#8,#8
00006a  8004              STRH     r4,[r0,#0]
;;;217    	LCD_WriteRAM(VDP&0X00FF);
00006c  b2ec              UXTB     r4,r5
00006e  8004              STRH     r4,[r0,#0]
000070  8003              STRH     r3,[r0,#0]
000072  24b4              MOVS     r4,#0xb4
000074  8014              STRH     r4,[r2,#0]
;;;218        LCD_WriteRAM(0x0000);
;;;219    
;;;220    	LCD_WriteCom(0x00B4);	//HSYNC
;;;221    	LCD_WriteRAM((HT>>8)&0X00FF);  //Set HT
000076  688d              LDR      r5,[r1,#8]  ; HT
000078  f3c52407          UBFX     r4,r5,#8,#8
00007c  8004              STRH     r4,[r0,#0]
;;;222    	LCD_WriteRAM(HT&0X00FF);
00007e  b2ec              UXTB     r4,r5
000080  8004              STRH     r4,[r0,#0]
;;;223    	LCD_WriteRAM((HPS>>8)&0X00FF);  //Set HPS
000082  68cd              LDR      r5,[r1,#0xc]  ; HPS
000084  f3c52407          UBFX     r4,r5,#8,#8
000088  8004              STRH     r4,[r0,#0]
;;;224    	LCD_WriteRAM(HPS&0X00FF);
00008a  b2ec              UXTB     r4,r5
00008c  8004              STRH     r4,[r0,#0]
;;;225    	LCD_WriteRAM(HPW);			   //Set HPW
00008e  780c              LDRB     r4,[r1,#0]  ; HPW
000090  8004              STRH     r4,[r0,#0]
;;;226    	LCD_WriteRAM((LPS>>8)&0X00FF);  //Set HPS
000092  690d              LDR      r5,[r1,#0x10]  ; LPS
000094  f3c52407          UBFX     r4,r5,#8,#8
000098  8004              STRH     r4,[r0,#0]
;;;227    	LCD_WriteRAM(LPS&0X00FF);
00009a  b2ec              UXTB     r4,r5
00009c  8004              STRH     r4,[r0,#0]
00009e  8003              STRH     r3,[r0,#0]
0000a0  24b6              MOVS     r4,#0xb6
0000a2  8014              STRH     r4,[r2,#0]
;;;228    	LCD_WriteRAM(0x0000);
;;;229    
;;;230    	LCD_WriteCom(0x00B6);	//VSYNC
;;;231    	LCD_WriteRAM((VT>>8)&0X00FF);   //Set VT
0000a4  698d              LDR      r5,[r1,#0x18]  ; VT
0000a6  f3c52407          UBFX     r4,r5,#8,#8
0000aa  8004              STRH     r4,[r0,#0]
;;;232    	LCD_WriteRAM(VT&0X00FF);
0000ac  b2ec              UXTB     r4,r5
0000ae  8004              STRH     r4,[r0,#0]
;;;233    	LCD_WriteRAM((VPS>>8)&0X00FF);  //Set VPS
0000b0  69cd              LDR      r5,[r1,#0x1c]  ; VPS
0000b2  f3c52407          UBFX     r4,r5,#8,#8
0000b6  8004              STRH     r4,[r0,#0]
;;;234    	LCD_WriteRAM(VPS&0X00FF);
0000b8  b2ec              UXTB     r4,r5
0000ba  8004              STRH     r4,[r0,#0]
;;;235    	LCD_WriteRAM(VPW);			   //Set VPW
0000bc  784c              LDRB     r4,[r1,#1]  ; VPW
0000be  8004              STRH     r4,[r0,#0]
;;;236    	LCD_WriteRAM((FPS>>8)&0X00FF);  //Set FPS
0000c0  6a0c              LDR      r4,[r1,#0x20]  ; FPS
0000c2  f3c42107          UBFX     r1,r4,#8,#8
0000c6  8001              STRH     r1,[r0,#0]
;;;237    	LCD_WriteRAM(FPS&0X00FF);
0000c8  b2e1              UXTB     r1,r4
0000ca  8001              STRH     r1,[r0,#0]
0000cc  21ba              MOVS     r1,#0xba
0000ce  8011              STRH     r1,[r2,#0]
0000d0  2105              MOVS     r1,#5
0000d2  8001              STRH     r1,[r0,#0]
0000d4  21b8              MOVS     r1,#0xb8
0000d6  8011              STRH     r1,[r2,#0]
0000d8  2107              MOVS     r1,#7
0000da  8001              STRH     r1,[r0,#0]
0000dc  8006              STRH     r6,[r0,#0]
0000de  2136              MOVS     r1,#0x36
0000e0  8011              STRH     r1,[r2,#0]
0000e2  2108              MOVS     r1,#8
0000e4  8001              STRH     r1,[r0,#0]
0000e6  21f0              MOVS     r1,#0xf0
0000e8  8011              STRH     r1,[r2,#0]
0000ea  8007              STRH     r7,[r0,#0]
0000ec  2400              MOVS     r4,#0
                  |L16.238|
0000ee  1c64              ADDS     r4,r4,#1
0000f0  2c32              CMP      r4,#0x32
0000f2  d3fc              BCC      |L16.238|
0000f4  2429              MOVS     r4,#0x29
0000f6  8014              STRH     r4,[r2,#0]
0000f8  24be              MOVS     r4,#0xbe
0000fa  8014              STRH     r4,[r2,#0]
0000fc  2406              MOVS     r4,#6
0000fe  8004              STRH     r4,[r0,#0]
000100  2480              MOVS     r4,#0x80
000102  8004              STRH     r4,[r0,#0]
000104  8006              STRH     r6,[r0,#0]
000106  8001              STRH     r1,[r0,#0]
000108  8003              STRH     r3,[r0,#0]
00010a  8003              STRH     r3,[r0,#0]
00010c  21d0              MOVS     r1,#0xd0
00010e  8011              STRH     r1,[r2,#0]
000110  210d              MOVS     r1,#0xd
000112  8001              STRH     r1,[r0,#0]
;;;238    
;;;239    	LCD_WriteCom(0x00BA);
;;;240    	LCD_WriteRAM(0x0005);//0x000F);    //GPIO[3:0] out 1
;;;241    
;;;242    	LCD_WriteCom(0x00B8);
;;;243    	LCD_WriteRAM(0x0007);    //GPIO3=input, GPIO[2:0]=output
;;;244    	LCD_WriteRAM(0x0001);    //GPIO0 normal
;;;245    
;;;246    	LCD_WriteCom(0x0036); //rotation
;;;247    	LCD_WriteRAM(0x0008);
;;;248    
;;;249    	LCD_WriteCom(0x00F0); //pixel data interface
;;;250    	LCD_WriteRAM(0x0003);
;;;251    
;;;252    
;;;253    	TimeDelay(50);
;;;254    	LCD_WriteCom(0x0029); //display on
;;;255    
;;;256    	LCD_WriteCom(0x00BE); //set PWM for B/L
;;;257    	LCD_WriteRAM(0x0006);
;;;258    	LCD_WriteRAM(0x0080);
;;;259    	
;;;260    	LCD_WriteRAM(0x0001);
;;;261    	LCD_WriteRAM(0x00f0);
;;;262    	LCD_WriteRAM(0x0000);
;;;263    	LCD_WriteRAM(0x0000);
;;;264    
;;;265    	LCD_WriteCom(0x00d0);//设置动态背光控制配置 
;;;266    	LCD_WriteRAM(0x000d);
;;;267    }
000114  bdf0              POP      {r4-r7,pc}
;;;268    
                          ENDP

000116  0000              DCW      0x0000
                  |L16.280|
                          DCD      0x60080000
                  |L16.284|
                          DCD      ||.data||

                          AREA ||i.Set_Dot_Addr_LCD||, CODE, READONLY, ALIGN=2

                  Set_Dot_Addr_LCD PROC
;;;98     //****************************************************************************************************
;;;99     void Set_Dot_Addr_LCD(int x,int y)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    	*TFT_Reg_Ptr = 0;
000002  f04f43c0          MOV      r3,#0x60000000
000006  2200              MOVS     r2,#0
000008  801a              STRH     r2,[r3,#0]
;;;102    	*TFT_DAT_Ptr = y>>8;
00000a  4a06              LDR      r2,|L17.36|
00000c  120c              ASRS     r4,r1,#8
00000e  8014              STRH     r4,[r2,#0]
;;;103    	*TFT_DAT_Ptr = y;
000010  8011              STRH     r1,[r2,#0]
;;;104    	*TFT_Reg_Ptr = 1;
000012  2101              MOVS     r1,#1
000014  8019              STRH     r1,[r3,#0]
;;;105    	*TFT_DAT_Ptr = x>>8;
000016  1201              ASRS     r1,r0,#8
000018  8011              STRH     r1,[r2,#0]
;;;106    	*TFT_DAT_Ptr = x;
00001a  8010              STRH     r0,[r2,#0]
;;;107    	*TFT_Reg_Ptr = 2;
00001c  2002              MOVS     r0,#2
00001e  8018              STRH     r0,[r3,#0]
;;;108    } 
000020  bd10              POP      {r4,pc}
;;;109    void TimeDelay(u32 Time)
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      0x60080000

                          AREA ||i.TimeDelay||, CODE, READONLY, ALIGN=1

                  TimeDelay PROC
;;;108    } 
;;;109    void TimeDelay(u32 Time)
000000  2100              MOVS     r1,#0
                  |L18.2|
;;;110    {
;;;111      	u32 Daly_Time = 0;
;;;112    	do
;;;113    	{
;;;114    		Daly_Time ++;
000002  1c49              ADDS     r1,r1,#1
;;;115    	}
;;;116    	while(Daly_Time < Time);
000004  4281              CMP      r1,r0
000006  d3fc              BCC      |L18.2|
;;;117    }
000008  4770              BX       lr
;;;118    
                          ENDP


                          AREA ||i.ssd1963_SetCursor||, CODE, READONLY, ALIGN=2

                  ssd1963_SetCursor PROC
;;;67     
;;;68     void ssd1963_SetCursor(u16 x,u16 y)
000000  b530              PUSH     {r4,r5,lr}
000002  f04f44c0          MOV      r4,#0x60000000
000006  222a              MOVS     r2,#0x2a
000008  8022              STRH     r2,[r4,#0]
00000a  4a0b              LDR      r2,|L19.56|
;;;69     {				
;;;70         LCD_WriteCom(0x002A);	
;;;71     	LCD_WriteRAM(x>>8);	    
00000c  0a03              LSRS     r3,r0,#8
00000e  8013              STRH     r3,[r2,#0]
;;;72     	LCD_WriteRAM(x&0x00ff);
000010  b2c0              UXTB     r0,r0
000012  8010              STRH     r0,[r2,#0]
;;;73     	LCD_WriteRAM(HDP>>8);	    
000014  4d09              LDR      r5,|L19.60|
000016  6868              LDR      r0,[r5,#4]  ; HDP
000018  0a03              LSRS     r3,r0,#8
00001a  8013              STRH     r3,[r2,#0]
;;;74     	LCD_WriteRAM(HDP&0x00ff);
00001c  b2c0              UXTB     r0,r0
00001e  8010              STRH     r0,[r2,#0]
000020  202b              MOVS     r0,#0x2b
000022  8020              STRH     r0,[r4,#0]
;;;75         LCD_WriteCom(0x002b);	
;;;76     	LCD_WriteRAM(y>>8);	    
000024  0a08              LSRS     r0,r1,#8
000026  8010              STRH     r0,[r2,#0]
;;;77     	LCD_WriteRAM(y&0x00ff);
000028  b2c8              UXTB     r0,r1
00002a  8010              STRH     r0,[r2,#0]
;;;78     	LCD_WriteRAM(VDP>>8);	    
00002c  6968              LDR      r0,[r5,#0x14]  ; VDP
00002e  0a01              LSRS     r1,r0,#8
000030  8011              STRH     r1,[r2,#0]
;;;79     	LCD_WriteRAM(VDP&0x00ff);
000032  b2c0              UXTB     r0,r0
000034  8010              STRH     r0,[r2,#0]
;;;80     }
000036  bd30              POP      {r4,r5,pc}
;;;81     
                          ENDP

                  |L19.56|
                          DCD      0x60080000
                  |L19.60|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  HPW
000000  08                DCB      0x08
                  VPW
000001  030000            DCB      0x03,0x00,0x00
                  HDP
                          DCD      0x0000031f
                  ||HT||
                          DCD      0x000003e8
                  HPS
                          DCD      0x00000033
                  LPS
                          DCD      0x00000003
                  VDP
                          DCD      0x000001df
                  ||VT||
                          DCD      0x00000212
                  VPS
                          DCD      0x00000018
                  ||FPS||
                          DCD      0x00000017

;*** Start embedded assembler ***

#line 1 "Source\\uCGUI\\LCDDriver\\SSD1963.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_SSD1963_c_HDP____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_SSD1963_c_HDP____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_SSD1963_c_HDP____REVSH|
#line 128
|__asm___9_SSD1963_c_HDP____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
