; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\ad54xx.o --depend=.\ouput\ad54xx.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\ad54xx.crf Source\BSP\AD54XX.c]
                          THUMB

                          AREA ||i.AD54XX_init||, CODE, READONLY, ALIGN=1

                  AD54XX_init PROC
;;;8      // spi 配置被外部使用
;;;9      void AD54XX_init(void)
000000  2001              MOVS     r0,#1
;;;10     {
;;;11     	ESR_CLK sr_clk;
;;;12     	ESR_STEP sr_step;
;;;13     	sr_clk = SR_198410;
;;;14     	sr_step = AD5410_SR_STEP_1_8_AD5420_2;
000002  4601              MOV      r1,r0
;;;15        	set_contol(sr_clk,sr_step);
000004  f7ffbffe          B.W      set_contol
;;;16     }
;;;17     
                          ENDP


                          AREA ||i.read||, CODE, READONLY, ALIGN=2

                  read PROC
;;;83     
;;;84     unsigned int read(EREAD_KIND read_kind)
000000  b570              PUSH     {r4-r6,lr}
;;;85     {
;;;86         unsigned int read_back,j,i;
;;;87     
;;;88     	SPI_I2S_SendData(SPI3,ADDR_READ_BACK_REG);
000002  4c2c              LDR      r4,|L2.180|
000004  2102              MOVS     r1,#2
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_I2S_SendData
                  |L2.12|
;;;89     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
00000c  2102              MOVS     r1,#2
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI_I2S_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L2.12|
;;;90     	AD54XX_UNLATCH;
000018  4d27              LDR      r5,|L2.184|
00001a  2120              MOVS     r1,#0x20
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       GPIO_ResetBits
;;;91     	for(j=0;j<50;j++);
000022  2100              MOVS     r1,#0
                  |L2.36|
000024  1c49              ADDS     r1,r1,#1
000026  2932              CMP      r1,#0x32
000028  d3fc              BCC      |L2.36|
;;;92     	AD54XX_LATCH;
00002a  2120              MOVS     r1,#0x20
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       GPIO_SetBits
;;;93     	SPI_I2S_ReceiveData(SPI3);                     // To clear OVR
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_I2S_ReceiveData
;;;94     	SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE); // To clear OVR
000038  2102              MOVS     r1,#2
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       SPI_I2S_GetFlagStatus
;;;95     	SPI_I2S_SendData(SPI3,0x00);
000040  2100              MOVS     r1,#0
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SPI_I2S_SendData
                  |L2.72|
;;;96     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
000048  2102              MOVS     r1,#2
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000050  2800              CMP      r0,#0
000052  d0f9              BEQ      |L2.72|
;;;97     	read_back = SPI_I2S_ReceiveData(SPI3)<<16;
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       SPI_I2S_ReceiveData
00005a  0406              LSLS     r6,r0,#16
;;;98     	SPI_I2S_SendData(SPI3,0x00);
00005c  2100              MOVS     r1,#0
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       SPI_I2S_SendData
                  |L2.100|
;;;99     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
000064  2102              MOVS     r1,#2
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SPI_I2S_GetFlagStatus
00006c  2800              CMP      r0,#0
00006e  d0f9              BEQ      |L2.100|
;;;100    	read_back = read_back|(SPI_I2S_ReceiveData(SPI3)<<8);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       SPI_I2S_ReceiveData
000076  ea462600          ORR      r6,r6,r0,LSL #8
;;;101    	SPI_I2S_SendData(SPI3,0x00);
00007a  2100              MOVS     r1,#0
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       SPI_I2S_SendData
                  |L2.130|
;;;102    	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
000082  2102              MOVS     r1,#2
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       SPI_I2S_GetFlagStatus
00008a  2800              CMP      r0,#0
00008c  d0f9              BEQ      |L2.130|
;;;103    	read_back = read_back|SPI_I2S_ReceiveData(SPI3);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       SPI_I2S_ReceiveData
000094  ea400406          ORR      r4,r0,r6
;;;104    
;;;105    	AD54XX_UNLATCH;
000098  2120              MOVS     r1,#0x20
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       GPIO_ResetBits
;;;106    	for(j=0;j<50;j++);
0000a0  2100              MOVS     r1,#0
                  |L2.162|
0000a2  1c49              ADDS     r1,r1,#1
0000a4  2932              CMP      r1,#0x32
0000a6  d3fc              BCC      |L2.162|
;;;107    	AD54XX_LATCH;
0000a8  2120              MOVS     r1,#0x20
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       GPIO_SetBits
;;;108    
;;;109    	return read_back;
0000b0  4620              MOV      r0,r4
;;;110    }
0000b2  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L2.180|
                          DCD      0x40003c00
                  |L2.184|
                          DCD      0x40011000

                          AREA ||i.reset||, CODE, READONLY, ALIGN=2

                  reset PROC
;;;72     
;;;73     void reset(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75     	int j;
;;;76     	
;;;77     	SPI_I2S_SendData(SPI3,READ_ADD_DEC_CONTROL_REG);
000002  4c0d              LDR      r4,|L3.56|
000004  2102              MOVS     r1,#2
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_I2S_SendData
                  |L3.12|
;;;78     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
00000c  2102              MOVS     r1,#2
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI_I2S_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L3.12|
;;;79     	AD54XX_UNLATCH;
000018  4c08              LDR      r4,|L3.60|
00001a  2120              MOVS     r1,#0x20
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_ResetBits
;;;80     	for(j=0;j<50;j++);
000022  2100              MOVS     r1,#0
                  |L3.36|
000024  1c49              ADDS     r1,r1,#1
000026  2932              CMP      r1,#0x32
000028  dbfc              BLT      |L3.36|
;;;81     	AD54XX_LATCH;
00002a  4620              MOV      r0,r4
00002c  e8bd4010          POP      {r4,lr}
000030  2120              MOVS     r1,#0x20
000032  f7ffbffe          B.W      GPIO_SetBits
;;;82     }
;;;83     
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40003c00
                  |L3.60|
                          DCD      0x40011000

                          AREA ||i.set_contol||, CODE, READONLY, ALIGN=2

                  set_contol PROC
;;;19     // exp 
;;;20     void set_contol(ESR_CLK sr_clk,ESR_STEP sr_step)
000000  b570              PUSH     {r4-r6,lr}
;;;21     {
;;;22     	int i,j;
;;;23     	unsigned char out;
;;;24     	unsigned short control;
;;;25     	control = 0;
;;;26     	
;;;27     	control = (RXEN<<13)|(OUTEN<<12)|(sr_clk<<8)|(sr_step<<5)|(SREN<<4)|(DCEN<<3)|OUT_MA;
000002  0200              LSLS     r0,r0,#8
000004  ea401441          ORR      r4,r0,r1,LSL #5
000008  f2430006          MOV      r0,#0x3006
;;;28     	
;;;29     	SPI_I2S_SendData(SPI3,ADDR_CONTROL_REG);
00000c  4d17              LDR      r5,|L4.108|
00000e  4304              ORRS     r4,r4,r0              ;27
000010  2155              MOVS     r1,#0x55
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       SPI_I2S_SendData
                  |L4.24|
;;;30     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
000018  2102              MOVS     r1,#2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000020  2800              CMP      r0,#0
000022  d0f9              BEQ      |L4.24|
;;;31     	out = (control>>8);
000024  0a21              LSRS     r1,r4,#8
;;;32     	SPI_I2S_SendData(SPI3,out);
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       SPI_I2S_SendData
                  |L4.44|
;;;33     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
00002c  2102              MOVS     r1,#2
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       SPI_I2S_GetFlagStatus
000034  2800              CMP      r0,#0
000036  d0f9              BEQ      |L4.44|
;;;34     	out = (control&0x00FF);
000038  b2e1              UXTB     r1,r4
;;;35     	SPI_I2S_SendData(SPI3,out);
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       SPI_I2S_SendData
                  |L4.64|
;;;36     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
000040  2102              MOVS     r1,#2
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       SPI_I2S_GetFlagStatus
000048  2800              CMP      r0,#0
00004a  d0f9              BEQ      |L4.64|
;;;37     
;;;38     	AD54XX_UNLATCH;
00004c  4c08              LDR      r4,|L4.112|
00004e  2120              MOVS     r1,#0x20
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       GPIO_ResetBits
;;;39     	for(j=0;j<50;j++);
000056  2100              MOVS     r1,#0
                  |L4.88|
000058  1c49              ADDS     r1,r1,#1
00005a  2932              CMP      r1,#0x32
00005c  dbfc              BLT      |L4.88|
;;;40     	AD54XX_LATCH;
00005e  4620              MOV      r0,r4
000060  e8bd4070          POP      {r4-r6,lr}
000064  2120              MOVS     r1,#0x20
000066  f7ffbffe          B.W      GPIO_SetBits
;;;41     }
;;;42     
                          ENDP

00006a  0000              DCW      0x0000
                  |L4.108|
                          DCD      0x40003c00
                  |L4.112|
                          DCD      0x40011000

                          AREA ||i.set_data||, CODE, READONLY, ALIGN=2

                  set_data PROC
;;;42     
;;;43     void set_data(float ma)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
;;;45         unsigned char out;
;;;46         unsigned int ad54xx;
;;;47     	int i,lenth,j;
;;;48     	unsigned short data;
;;;49     
;;;50     	if(OUT_MA == R1R2R3_4_20MA)
;;;51     	data = ((1<<AD54XX)/16)*(ma - 4);
;;;52     	else if(OUT_MA ==  OUT_PUT_0_20MA)
;;;53     	data = ((1<<AD54XX)/20)*ma ;
000002  491a              LDR      r1,|L5.108|
000004  f7fffffe          BL       __aeabi_fmul
000008  f7fffffe          BL       __aeabi_f2uiz
;;;54     	else
;;;55     	data = ((1<<AD54XX)/24)*ma ;
;;;56     
;;;57     	data = data<<(16 - AD54XX);
00000c  0500              LSLS     r0,r0,#20
;;;58     
;;;59     	SPI_I2S_SendData(SPI3,ADDR_DATA);
00000e  4d18              LDR      r5,|L5.112|
000010  0c04              LSRS     r4,r0,#16             ;57
000012  2101              MOVS     r1,#1
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       SPI_I2S_SendData
                  |L5.26|
;;;60     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
00001a  2102              MOVS     r1,#2
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L5.26|
;;;61     	out = 	(data>>8);
000026  0a21              LSRS     r1,r4,#8
;;;62     	SPI_I2S_SendData(SPI3,out);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       SPI_I2S_SendData
                  |L5.46|
;;;63     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
00002e  2102              MOVS     r1,#2
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       SPI_I2S_GetFlagStatus
000036  2800              CMP      r0,#0
000038  d0f9              BEQ      |L5.46|
;;;64     	out = (data&0x00ff);
00003a  b2e1              UXTB     r1,r4
;;;65     	SPI_I2S_SendData(SPI3,out);
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       SPI_I2S_SendData
                  |L5.66|
;;;66     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)==0) {}
000042  2102              MOVS     r1,#2
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       SPI_I2S_GetFlagStatus
00004a  2800              CMP      r0,#0
00004c  d0f9              BEQ      |L5.66|
;;;67     
;;;68     	AD54XX_UNLATCH;
00004e  4c09              LDR      r4,|L5.116|
000050  2120              MOVS     r1,#0x20
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       GPIO_ResetBits
;;;69     	for(j=0;j<50;j++);
000058  2100              MOVS     r1,#0
                  |L5.90|
00005a  1c49              ADDS     r1,r1,#1
00005c  2932              CMP      r1,#0x32
00005e  dbfc              BLT      |L5.90|
;;;70     	AD54XX_LATCH;
000060  4620              MOV      r0,r4
000062  e8bd4070          POP      {r4-r6,lr}
000066  2120              MOVS     r1,#0x20
000068  f7ffbffe          B.W      GPIO_SetBits
;;;71     }
;;;72     
                          ENDP

                  |L5.108|
                          DCD      0x434c0000
                  |L5.112|
                          DCD      0x40003c00
                  |L5.116|
                          DCD      0x40011000

;*** Start embedded assembler ***

#line 1 "Source\\BSP\\AD54XX.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_AD54XX_c_23a5463b____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_AD54XX_c_23a5463b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_AD54XX_c_23a5463b____REVSH|
#line 128
|__asm___8_AD54XX_c_23a5463b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
