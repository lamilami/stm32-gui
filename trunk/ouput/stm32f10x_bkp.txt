; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\stm32f10x_bkp.o --depend=.\ouput\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\stm32f10x_bkp.crf Source\FWLib\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;267      */
;;;268    void BKP_ClearFlag(void)
000000  4802              LDR      r0,|L1.12|
;;;269    {
;;;270      /* Set CTE bit to clear Tamper Pin Event flag */
;;;271      BKP->CSR |= BKP_CSR_CTE;
000002  8801              LDRH     r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  8001              STRH     r1,[r0,#0]
;;;272    }
00000a  4770              BX       lr
;;;273    
                          ENDP

                  |L1.12|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;288      */
;;;289    void BKP_ClearITPendingBit(void)
000000  4802              LDR      r0,|L2.12|
;;;290    {
;;;291      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;292      BKP->CSR |= BKP_CSR_CTI;
000002  8801              LDRH     r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  8001              STRH     r1,[r0,#0]
;;;293    }
00000a  4770              BX       lr
;;;294    
                          ENDP

                  |L2.12|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;118      */
;;;119    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;122      RCC_BackupResetCmd(DISABLE);
000008  e8bd4010          POP      {r4,lr}
00000c  2000              MOVS     r0,#0
00000e  f7ffbffe          B.W      RCC_BackupResetCmd
;;;123    }
;;;124    
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;257      */
;;;258    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;259    {
;;;260      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;261    }
000006  4770              BX       lr
;;;262    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;278      */
;;;279    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;280    {
;;;281      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;282    }
000006  4770              BX       lr
;;;283    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;158      */
;;;159    void BKP_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;160    {
;;;161      /* Check the parameters */
;;;162      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;163      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;164    }
000004  4770              BX       lr
;;;165    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;178      */
;;;179    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000000  4a03              LDR      r2,|L7.16|
;;;180    {
;;;181      uint16_t tmpreg = 0;
;;;182      /* Check the parameters */
;;;183      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;184      tmpreg = BKP->RTCCR;
000002  8811              LDRH     r1,[r2,#0]
;;;185      /* Clear CCO, ASOE and ASOS bits */
;;;186      tmpreg &= RTCCR_MASK;
000004  f4217160          BIC      r1,r1,#0x380
;;;187      
;;;188      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;189      tmpreg |= BKP_RTCOutputSource;
000008  ea410100          ORR      r1,r1,r0
;;;190      /* Store the new value */
;;;191      BKP->RTCCR = tmpreg;
00000c  8011              STRH     r1,[r2,#0]
;;;192    }
00000e  4770              BX       lr
;;;193    
                          ENDP

                  |L7.16|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;239      */
;;;240    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000000  4901              LDR      r1,|L8.8|
;;;241    {
;;;242      __IO uint32_t tmp = 0;
;;;243    
;;;244      /* Check the parameters */
;;;245      assert_param(IS_BKP_DR(BKP_DR));
;;;246    
;;;247      tmp = (uint32_t)BKP_BASE; 
;;;248      tmp += BKP_DR;
;;;249    
;;;250      return (*(__IO uint16_t *) tmp);
000002  5a08              LDRH     r0,[r1,r0]
;;;251    }
000004  4770              BX       lr
;;;252    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x40006c00

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;199      */
;;;200    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000000  4a03              LDR      r2,|L9.16|
;;;201    {
;;;202      uint16_t tmpreg = 0;
;;;203      /* Check the parameters */
;;;204      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;205      tmpreg = BKP->RTCCR;
000002  8811              LDRH     r1,[r2,#0]
;;;206      /* Clear CAL[6:0] bits */
;;;207      tmpreg &= RTCCR_CAL_MASK;
000004  f021017f          BIC      r1,r1,#0x7f
;;;208      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;209      tmpreg |= CalibrationValue;
000008  ea410100          ORR      r1,r1,r0
;;;210      /* Store the new value */
;;;211      BKP->RTCCR = tmpreg;
00000c  8011              STRH     r1,[r2,#0]
;;;212    }
00000e  4770              BX       lr
;;;213    
                          ENDP

                  |L9.16|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;145      */
;;;146    void BKP_TamperPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L10.8|
;;;147    {
;;;148      /* Check the parameters */
;;;149      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;150      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;151    }
000004  4770              BX       lr
;;;152    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;132      */
;;;133    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000000  4901              LDR      r1,|L11.8|
;;;134    {
;;;135      /* Check the parameters */
;;;136      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;137      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000002  6008              STR      r0,[r1,#0]
;;;138    }
000004  4770              BX       lr
;;;139    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;220      */
;;;221    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000000  4a01              LDR      r2,|L12.8|
;;;222    {
;;;223      __IO uint32_t tmp = 0;
;;;224    
;;;225      /* Check the parameters */
;;;226      assert_param(IS_BKP_DR(BKP_DR));
;;;227    
;;;228      tmp = (uint32_t)BKP_BASE; 
;;;229      tmp += BKP_DR;
;;;230    
;;;231      *(__IO uint32_t *) tmp = Data;
000002  5011              STR      r1,[r2,r0]
;;;232    }
000004  4770              BX       lr
;;;233    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40006c00

;*** Start embedded assembler ***

#line 1 "Source\\FWLib\\src\\stm32f10x_bkp.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_bkp_c_27a06cb8____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_bkp_c_27a06cb8____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_bkp_c_27a06cb8____REVSH|
#line 128
|__asm___15_stm32f10x_bkp_c_27a06cb8____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
