; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\os_time.o --depend=.\ouput\os_time.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\os_time.crf Source\uCOS-II\Source\os_time.c]
                          THUMB

                          AREA ||i.OSTimeDly||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;43     
;;;44     void  OSTimeDly (INT32U ticks)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4604              MOV      r4,r0
;;;46         INT8U      y;
;;;47     #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;48         OS_CPU_SR  cpu_sr = 0u;
;;;49     #endif
;;;50     
;;;51     
;;;52     
;;;53         if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
000004  4814              LDR      r0,|L1.88|
000006  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000008  2800              CMP      r0,#0
00000a  d124              BNE      |L1.86|
;;;54             return;
;;;55         }
;;;56         if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
00000c  4813              LDR      r0,|L1.92|
00000e  7800              LDRB     r0,[r0,#0]  ; OSLockNesting
000010  2800              CMP      r0,#0
000012  d120              BNE      |L1.86|
;;;57             return;
;;;58         }
;;;59         if (ticks > 0u) {                            /* 0 means no delay!                                  */
000014  2c00              CMP      r4,#0
000016  d01e              BEQ      |L1.86|
;;;60             OS_ENTER_CRITICAL();
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4603              MOV      r3,r0
;;;61             y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
00001e  4810              LDR      r0,|L1.96|
;;;62             OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
000020  4d10              LDR      r5,|L1.100|
000022  6801              LDR      r1,[r0,#0]            ;61  ; OSTCBCur
000024  f891202c          LDRB     r2,[r1,#0x2c]         ;61
000028  f891602d          LDRB     r6,[r1,#0x2d]
00002c  5ca8              LDRB     r0,[r5,r2]
00002e  43f6              MVNS     r6,r6
000030  b2f6              UXTB     r6,r6
000032  4030              ANDS     r0,r0,r6
000034  54a8              STRB     r0,[r5,r2]
;;;63             if (OSRdyTbl[y] == 0u) {
000036  d106              BNE      |L1.70|
;;;64                 OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
000038  4a0b              LDR      r2,|L1.104|
00003a  f891002e          LDRB     r0,[r1,#0x2e]
00003e  7815              LDRB     r5,[r2,#0]  ; OSRdyGrp
000040  ea250000          BIC      r0,r5,r0
000044  7010              STRB     r0,[r2,#0]
                  |L1.70|
;;;65             }
;;;66             OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
;;;67             OS_EXIT_CRITICAL();
000046  4618              MOV      r0,r3
000048  624c              STR      r4,[r1,#0x24]
00004a  f7fffffe          BL       OS_CPU_SR_Restore
;;;68             OS_Sched();                              /* Find next task to run!                             */
00004e  e8bd4070          POP      {r4-r6,lr}
000052  f7ffbffe          B.W      OS_Sched
                  |L1.86|
;;;69         }
;;;70     }
000056  bd70              POP      {r4-r6,pc}
;;;71     /*$PAGE*/
                          ENDP

                  |L1.88|
                          DCD      OSIntNesting
                  |L1.92|
                          DCD      OSLockNesting
                  |L1.96|
                          DCD      OSTCBCur
                  |L1.100|
                          DCD      OSRdyTbl
                  |L1.104|
                          DCD      OSRdyGrp

                          AREA ||i.OSTimeDlyHMSM||, CODE, READONLY, ALIGN=2

                  OSTimeDlyHMSM PROC
;;;98     #if OS_TIME_DLY_HMSM_EN > 0u
;;;99     INT8U  OSTimeDlyHMSM (INT8U   hours,
000000  b570              PUSH     {r4-r6,lr}
;;;100                          INT8U   minutes,
;;;101                          INT8U   seconds,
;;;102                          INT16U  ms)
;;;103    {
;;;104        INT32U ticks;
;;;105    
;;;106    
;;;107        if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
000002  4c1a              LDR      r4,|L2.108|
000004  7824              LDRB     r4,[r4,#0]  ; OSIntNesting
000006  b10c              CBZ      r4,|L2.12|
;;;108            return (OS_ERR_TIME_DLY_ISR);
000008  2055              MOVS     r0,#0x55
;;;109        }
;;;110        if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
;;;111            return (OS_ERR_SCHED_LOCKED);
;;;112        }
;;;113    #if OS_ARG_CHK_EN > 0u
;;;114        if (hours == 0u) {
;;;115            if (minutes == 0u) {
;;;116                if (seconds == 0u) {
;;;117                    if (ms == 0u) {
;;;118                        return (OS_ERR_TIME_ZERO_DLY);
;;;119                    }
;;;120                }
;;;121            }
;;;122        }
;;;123        if (minutes > 59u) {
;;;124            return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
;;;125        }
;;;126        if (seconds > 59u) {
;;;127            return (OS_ERR_TIME_INVALID_SECONDS);
;;;128        }
;;;129        if (ms > 999u) {
;;;130            return (OS_ERR_TIME_INVALID_MS);
;;;131        }
;;;132    #endif
;;;133                                                     /* Compute the total number of clock ticks required.. */
;;;134                                                     /* .. (rounded to the nearest tick)                   */
;;;135        ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
;;;136              + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
;;;137        OSTimeDly(ticks);
;;;138        return (OS_ERR_NONE);
;;;139    }
00000a  bd70              POP      {r4-r6,pc}
                  |L2.12|
00000c  4c18              LDR      r4,|L2.112|
00000e  7824              LDRB     r4,[r4,#0]            ;110  ; OSLockNesting
000010  b10c              CBZ      r4,|L2.22|
000012  2032              MOVS     r0,#0x32              ;111
000014  bd70              POP      {r4-r6,pc}
                  |L2.22|
000016  b900              CBNZ     r0,|L2.26|
000018  b119              CBZ      r1,|L2.34|
                  |L2.26|
00001a  293b              CMP      r1,#0x3b              ;123
00001c  d902              BLS      |L2.36|
00001e  2051              MOVS     r0,#0x51              ;124
000020  bd70              POP      {r4-r6,pc}
                  |L2.34|
000022  b11a              CBZ      r2,|L2.44|
                  |L2.36|
000024  2a3b              CMP      r2,#0x3b              ;126
000026  d902              BLS      |L2.46|
000028  2052              MOVS     r0,#0x52              ;127
00002a  bd70              POP      {r4-r6,pc}
                  |L2.44|
00002c  b12b              CBZ      r3,|L2.58|
                  |L2.46|
00002e  f44f747a          MOV      r4,#0x3e8             ;129
000032  42a3              CMP      r3,r4                 ;129
000034  d303              BCC      |L2.62|
000036  2053              MOVS     r0,#0x53              ;130
000038  bd70              POP      {r4-r6,pc}
                  |L2.58|
00003a  2054              MOVS     r0,#0x54              ;118
00003c  bd70              POP      {r4-r6,pc}
                  |L2.62|
00003e  f44f757a          MOV      r5,#0x3e8             ;135
000042  436b              MULS     r3,r5,r3              ;135
000044  fbb3f3f4          UDIV     r3,r3,r4              ;135
000048  f44f6461          MOV      r4,#0xe10             ;135
00004c  4360              MULS     r0,r4,r0              ;135
00004e  ebc11101          RSB      r1,r1,r1,LSL #4       ;135
000052  eb000081          ADD      r0,r0,r1,LSL #2       ;135
000056  4410              ADD      r0,r0,r2              ;135
000058  eb000140          ADD      r1,r0,r0,LSL #1       ;135
00005c  ebc110c0          RSB      r0,r1,r0,LSL #7       ;135
000060  eb0300c0          ADD      r0,r3,r0,LSL #3       ;135
000064  f7fffffe          BL       OSTimeDly
000068  2000              MOVS     r0,#0                 ;138
00006a  bd70              POP      {r4-r6,pc}
;;;140    #endif
                          ENDP

                  |L2.108|
                          DCD      OSIntNesting
                  |L2.112|
                          DCD      OSLockNesting

                          AREA ||i.OSTimeDlyResume||, CODE, READONLY, ALIGN=2

                  OSTimeDlyResume PROC
;;;161    #if OS_TIME_DLY_RESUME_EN > 0u
;;;162    INT8U  OSTimeDlyResume (INT8U prio)
000000  b510              PUSH     {r4,lr}
;;;163    {
000002  4604              MOV      r4,r0
;;;164        OS_TCB    *ptcb;
;;;165    #if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
;;;166        OS_CPU_SR  cpu_sr = 0u;
;;;167    #endif
;;;168    
;;;169    
;;;170    
;;;171        if (prio >= OS_LOWEST_PRIO) {
000004  283f              CMP      r0,#0x3f
000006  d301              BCC      |L3.12|
;;;172            return (OS_ERR_PRIO_INVALID);
000008  202a              MOVS     r0,#0x2a
;;;173        }
;;;174        OS_ENTER_CRITICAL();
;;;175        ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
;;;176        if (ptcb == (OS_TCB *)0) {
;;;177            OS_EXIT_CRITICAL();
;;;178            return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
;;;179        }
;;;180        if (ptcb == OS_TCB_RESERVED) {
;;;181            OS_EXIT_CRITICAL();
;;;182            return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
;;;183        }
;;;184        if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
;;;185            OS_EXIT_CRITICAL();
;;;186            return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
;;;187        }
;;;188    
;;;189        ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
;;;190        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
;;;191            ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
;;;192            ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
;;;193        } else {
;;;194            ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
;;;195        }
;;;196        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
;;;197            OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
;;;198            OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;199            OS_EXIT_CRITICAL();
;;;200            OS_Sched();                                            /* See if this is new highest priority  */
;;;201        } else {
;;;202            OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
;;;203        }
;;;204        return (OS_ERR_NONE);
;;;205    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  f7fffffe          BL       OS_CPU_SR_Save
000010  491e              LDR      r1,|L3.140|
000012  f8511024          LDR      r1,[r1,r4,LSL #2]     ;175
000016  b191              CBZ      r1,|L3.62|
000018  2901              CMP      r1,#1                 ;180
00001a  d010              BEQ      |L3.62|
00001c  6a4a              LDR      r2,[r1,#0x24]         ;184
00001e  b192              CBZ      r2,|L3.70|
000020  2300              MOVS     r3,#0                 ;189
000022  624b              STR      r3,[r1,#0x24]         ;190
000024  f8912028          LDRB     r2,[r1,#0x28]         ;190
000028  f0120f37          TST      r2,#0x37              ;190
00002c  d00f              BEQ      |L3.78|
00002e  f0220237          BIC      r2,r2,#0x37           ;191
000032  f8812028          STRB     r2,[r1,#0x28]         ;191
000036  2201              MOVS     r2,#1                 ;192
000038  f8812029          STRB     r2,[r1,#0x29]         ;192
00003c  e009              B        |L3.82|
                  |L3.62|
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;182
000044  bd10              POP      {r4,pc}
                  |L3.70|
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  2050              MOVS     r0,#0x50              ;186
00004c  bd10              POP      {r4,pc}
                  |L3.78|
00004e  f8813029          STRB     r3,[r1,#0x29]         ;194
                  |L3.82|
000052  f8912028          LDRB     r2,[r1,#0x28]         ;196
000056  0712              LSLS     r2,r2,#28             ;196
000058  d413              BMI      |L3.130|
00005a  4a0d              LDR      r2,|L3.144|
00005c  f101012c          ADD      r1,r1,#0x2c           ;196
000060  788b              LDRB     r3,[r1,#2]            ;197
000062  7814              LDRB     r4,[r2,#0]            ;197  ; OSRdyGrp
000064  ea430304          ORR      r3,r3,r4              ;197
000068  7013              STRB     r3,[r2,#0]            ;197
00006a  780a              LDRB     r2,[r1,#0]            ;198
00006c  4b09              LDR      r3,|L3.148|
00006e  7849              LDRB     r1,[r1,#1]            ;198
000070  5c9c              LDRB     r4,[r3,r2]            ;198
000072  ea440401          ORR      r4,r4,r1              ;198
000076  549c              STRB     r4,[r3,r2]            ;198
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  f7fffffe          BL       OS_Sched
000080  e001              B        |L3.134|
                  |L3.130|
000082  f7fffffe          BL       OS_CPU_SR_Restore
                  |L3.134|
000086  2000              MOVS     r0,#0                 ;204
000088  bd10              POP      {r4,pc}
;;;206    #endif
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
                          DCD      OSTCBPrioTbl
                  |L3.144|
                          DCD      OSRdyGrp
                  |L3.148|
                          DCD      OSRdyTbl

                          AREA ||i.OSTimeGet||, CODE, READONLY, ALIGN=2

                  OSTimeGet PROC
;;;221    #if OS_TIME_GET_SET_EN > 0u
;;;222    INT32U  OSTimeGet (void)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224        INT32U     ticks;
;;;225    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;226        OS_CPU_SR  cpu_sr = 0u;
;;;227    #endif
;;;228    
;;;229    
;;;230    
;;;231        OS_ENTER_CRITICAL();
000002  f7fffffe          BL       OS_CPU_SR_Save
;;;232        ticks = OSTime;
000006  4903              LDR      r1,|L4.20|
000008  680c              LDR      r4,[r1,#0]  ; OSTime
;;;233        OS_EXIT_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Restore
;;;234        return (ticks);
00000e  4620              MOV      r0,r4
;;;235    }
000010  bd10              POP      {r4,pc}
;;;236    #endif
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      OSTime

                          AREA ||i.OSTimeSet||, CODE, READONLY, ALIGN=2

                  OSTimeSet PROC
;;;250    #if OS_TIME_GET_SET_EN > 0u
;;;251    void  OSTimeSet (INT32U ticks)
000000  b510              PUSH     {r4,lr}
;;;252    {
000002  4604              MOV      r4,r0
;;;253    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;254        OS_CPU_SR  cpu_sr = 0u;
;;;255    #endif
;;;256    
;;;257    
;;;258    
;;;259        OS_ENTER_CRITICAL();
000004  f7fffffe          BL       OS_CPU_SR_Save
;;;260        OSTime = ticks;
000008  4902              LDR      r1,|L5.20|
00000a  600c              STR      r4,[r1,#0]  ; OSTime
;;;261        OS_EXIT_CRITICAL();
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      OS_CPU_SR_Restore
;;;262    }
;;;263    #endif
                          ENDP

                  |L5.20|
                          DCD      OSTime
