; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\stm32f10x_pwr.o --depend=.\ouput\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\stm32f10x_pwr.crf Source\FWLib\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;122      */
;;;123    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;124    {
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;128    }
000004  4770              BX       lr
;;;129    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;285      */
;;;286    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4902              LDR      r1,|L2.12|
;;;287    {
;;;288      /* Check the parameters */
;;;289      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;290             
;;;291      PWR->CR |=  PWR_FLAG << 2;
000002  680a              LDR      r2,[r1,#0]
000004  ea420080          ORR      r0,r2,r0,LSL #2
000008  6008              STR      r0,[r1,#0]
;;;292    }
00000a  4770              BX       lr
;;;293    
                          ENDP

                  |L2.12|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;110      */
;;;111    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  070c              LSLS     r4,r1,#28
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;114      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;115    }
;;;116    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;234      */
;;;235    void PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L4.32|
;;;236    {
;;;237      /* Clear Wake-up flag */
;;;238      PWR->CR |= PWR_CR_CWUF;
000002  6801              LDR      r1,[r0,#0]
000004  f0410104          ORR      r1,r1,#4
000008  6001              STR      r1,[r0,#0]
;;;239      /* Select STANDBY mode */
;;;240      PWR->CR |= PWR_CR_PDDS;
00000a  6801              LDR      r1,[r0,#0]
00000c  f0410102          ORR      r1,r1,#2
000010  6001              STR      r1,[r0,#0]
000012  4804              LDR      r0,|L4.36|
;;;241      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;242      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000014  6801              LDR      r1,[r0,#0]
000016  f0410104          ORR      r1,r1,#4
00001a  6001              STR      r1,[r0,#0]
;;;243    /* This option is used to ensure that store operations are completed */
;;;244    #if defined ( __CC_ARM   )
;;;245      __force_stores();
;;;246    #endif
;;;247      /* Request Wait For Interrupt */
;;;248      __WFI();
00001c  bf30              WFI      
;;;249    }
00001e  4770              BX       lr
;;;250    
                          ENDP

                  |L4.32|
                          DCD      0x40007000
                  |L4.36|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;195      */
;;;196    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  4b0c              LDR      r3,|L5.52|
;;;197    {
;;;198      uint32_t tmpreg = 0;
;;;199      /* Check the parameters */
;;;200      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;201      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;202      
;;;203      /* Select the regulator state in STOP mode ---------------------------------*/
;;;204      tmpreg = PWR->CR;
000002  681a              LDR      r2,[r3,#0]
;;;205      /* Clear PDDS and LPDS bits */
;;;206      tmpreg &= CR_DS_MASK;
000004  f0220203          BIC      r2,r2,#3
;;;207      /* Set LPDS bit according to PWR_Regulator value */
;;;208      tmpreg |= PWR_Regulator;
000008  4302              ORRS     r2,r2,r0
;;;209      /* Store the new value */
;;;210      PWR->CR = tmpreg;
00000a  601a              STR      r2,[r3,#0]
;;;211      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;212      SCB->SCR |= SCB_SCR_SLEEPDEEP;
00000c  f04f20e0          MOV      r0,#0xe000e000
000010  f8d02d10          LDR      r2,[r0,#0xd10]
000014  f0420204          ORR      r2,r2,#4
000018  f8c02d10          STR      r2,[r0,#0xd10]
;;;213      
;;;214      /* Select STOP mode entry --------------------------------------------------*/
;;;215      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
00001c  2901              CMP      r1,#1
00001e  d007              BEQ      |L5.48|
;;;216      {   
;;;217        /* Request Wait For Interrupt */
;;;218        __WFI();
;;;219      }
;;;220      else
;;;221      {
;;;222        /* Request Wait For Event */
;;;223        __WFE();
000020  bf20              WFE      
                  |L5.34|
;;;224      }
;;;225      
;;;226      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;227      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
000022  f8d01d10          LDR      r1,[r0,#0xd10]
000026  f0210104          BIC      r1,r1,#4
00002a  f8c01d10          STR      r1,[r0,#0xd10]
;;;228    }
00002e  4770              BX       lr
                  |L5.48|
000030  bf30              WFI                            ;218
000032  e7f6              B        |L5.34|
;;;229    
                          ENDP

                  |L5.52|
                          DCD      0x40007000

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;259      */
;;;260    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4a03              LDR      r2,|L6.16|
;;;261    {
000002  4601              MOV      r1,r0
;;;262      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;263      /* Check the parameters */
;;;264      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;265      
;;;266      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000006  6852              LDR      r2,[r2,#4]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L6.14|
;;;267      {
;;;268        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;269      }
;;;270      else
;;;271      {
;;;272        bitstatus = RESET;
;;;273      }
;;;274      /* Return the flag status */
;;;275      return bitstatus;
;;;276    }
00000e  4770              BX       lr
;;;277    
                          ENDP

                  |L6.16|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;135      */
;;;136    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;137    {
;;;138      /* Check the parameters */
;;;139      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;140      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;141    }
000004  4770              BX       lr
;;;142    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;156      */
;;;157    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4a03              LDR      r2,|L8.16|
;;;158    {
;;;159      uint32_t tmpreg = 0;
;;;160      /* Check the parameters */
;;;161      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;162      tmpreg = PWR->CR;
000002  6811              LDR      r1,[r2,#0]
;;;163      /* Clear PLS[7:5] bits */
;;;164      tmpreg &= CR_PLS_MASK;
000004  f02101e0          BIC      r1,r1,#0xe0
;;;165      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;166      tmpreg |= PWR_PVDLevel;
000008  4301              ORRS     r1,r1,r0
;;;167      /* Store the new value */
;;;168      PWR->CR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;169    }
00000c  4770              BX       lr
;;;170    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;176      */
;;;177    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;178    {
;;;179      /* Check the parameters */
;;;180      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;181      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;182    }
000004  4770              BX       lr
;;;183    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e00a0

;*** Start embedded assembler ***

#line 1 "Source\\FWLib\\src\\stm32f10x_pwr.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_pwr_c_0c2a8b75____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_pwr_c_0c2a8b75____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f10x_pwr_c_0c2a8b75____REVSH|
#line 128
|__asm___15_stm32f10x_pwr_c_0c2a8b75____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
