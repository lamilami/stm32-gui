; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\touchcalibration.o --depend=.\ouput\touchcalibration.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\touchcalibration.crf Source\uCGUI\TouchCalibration\TouchCalibration.c]
                          THUMB

                          AREA ||i._Calibrate||, CODE, READONLY, ALIGN=1

                  _Calibrate PROC
;;;39     
;;;40     static void _Calibrate(int Coord, int Log0, int Log1, int Phys0, int Phys1, int *p0, int *p1) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;41       int l0 = 0;
;;;42       int l1 = (Coord == GUI_COORD_X) ? LCD_XSIZE - 1 : LCD_YSIZE - 1;
000002  f240341f          MOV      r4,#0x31f
000006  e9dd5606          LDRD     r5,r6,[sp,#0x18]      ;40
00000a  9f05              LDR      r7,[sp,#0x14]
00000c  b108              CBZ      r0,|L1.18|
00000e  f24014df          MOV      r4,#0x1df
                  |L1.18|
000012  1af8              SUBS     r0,r7,r3
000014  424f              RSBS     r7,r1,#0
000016  1a52              SUBS     r2,r2,r1
000018  4347              MULS     r7,r0,r7
00001a  1a61              SUBS     r1,r4,r1
00001c  fb97f7f2          SDIV     r7,r7,r2
000020  4348              MULS     r0,r1,r0
000022  fb90f0f2          SDIV     r0,r0,r2
000026  441f              ADD      r7,r7,r3
000028  4418              ADD      r0,r0,r3
;;;43       *p0 = _Log2Phys(l0, Log0, Log1, Phys0, Phys1);
;;;44       *p1 = _Log2Phys(l1, Log0, Log1, Phys0, Phys1);
00002a  602f              STR      r7,[r5,#0]
00002c  6030              STR      r0,[r6,#0]
;;;45     }
00002e  bdf0              POP      {r4-r7,pc}
;;;46     
                          ENDP


                          AREA ||i._ExecCalibration||, CODE, READONLY, ALIGN=2

                  _ExecCalibration PROC
;;;53     
;;;54     void _ExecCalibration(void) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;55       int x,y;
;;;56       uint16_t data[6];
;;;57       uint16_t get_data[6];
;;;58       int ax_Phys[2],ay_Phys[2];
;;;59     /* calculate log. Positions */
;;;60       int ax[2] = { 15, LCD_XSIZE -1-15};
000004  48a2              LDR      r0,|L2.656|
000006  b08d              SUB      sp,sp,#0x34           ;54
;;;61     //  const int ay[2] = { 15, LCD_YSIZE-1-15};
;;;62       int ay[2] = { LCD_YSIZE-1-15, 15};
000008  e9d06101          LDRD     r6,r1,[r0,#4]
00000c  460c              MOV      r4,r1
;;;63       GUI_TOUCH_SetDefaultCalibration();
00000e  68c7              LDR      r7,[r0,#0xc]  ; <Data2>
000010  6805              LDR      r5,[r0,#0]  ; <Data1>
000012  f7fffffe          BL       GUI_TOUCH_SetDefaultCalibration
;;;64     /* _Calibrate upper left */
;;;65       GUI_SetBkColor(GUI_RED);  
000016  20ff              MOVS     r0,#0xff
000018  f7fffffe          BL       GUI_SetBkColor
;;;66       GUI_Clear();
00001c  f7fffffe          BL       GUI_Clear
;;;67       GUI_SetColor(GUI_WHITE);  GUI_FillCircle(ax[0], ay[0], 10);
000020  f06f497f          MVN      r9,#0xff000000
000024  4648              MOV      r0,r9
000026  f7fffffe          BL       GUI_SetColor
00002a  4621              MOV      r1,r4
00002c  4628              MOV      r0,r5
00002e  220a              MOVS     r2,#0xa
000030  f7fffffe          BL       GUI_FillCircle
;;;68       GUI_SetColor(GUI_RED);    GUI_FillCircle(ax[0], ay[0], 5);
000034  20ff              MOVS     r0,#0xff
000036  f7fffffe          BL       GUI_SetColor
00003a  4621              MOV      r1,r4
00003c  4628              MOV      r0,r5
00003e  2205              MOVS     r2,#5
000040  f7fffffe          BL       GUI_FillCircle
;;;69       GUI_SetColor(GUI_WHITE);
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       GUI_SetColor
;;;70       GUI_DispStringAt("Press here", ax[0]+20, ay[0]);
00004a  f1050014          ADD      r0,r5,#0x14
00004e  4601              MOV      r1,r0
000050  9000              STR      r0,[sp,#0]
000052  4622              MOV      r2,r4
000054  a08f              ADR      r0,|L2.660|
000056  f7fffffe          BL       GUI_DispStringAt
;;;71       do {
;;;72     
;;;73     #if 0
;;;74         GUI_PID_STATE State;
;;;75         GUI_TOUCH_GetState(&State);
;;;76     	 if (State.Pressed) {
;;;77     #endif
;;;78     
;;;79     #if 1
;;;80       x = TPReadX();
;;;81       y = TPReadY();
;;;82       if ((x>=3700)&&(y>=3400)&&(x<3800)&&(y<3600)) {
00005a  f6406a74          MOV      r10,#0xe74
00005e  f6405b48          MOV      r11,#0xd48
                  |L2.98|
000062  f7fffffe          BL       TPReadX
000066  4680              MOV      r8,r0                 ;80
000068  f7fffffe          BL       TPReadY
00006c  45d0              CMP      r8,r10
00006e  db16              BLT      |L2.158|
000070  4558              CMP      r0,r11
000072  db14              BLT      |L2.158|
000074  f64062d8          MOV      r2,#0xed8
000078  4590              CMP      r8,r2
00007a  da10              BGE      |L2.158|
00007c  f5b06f61          CMP      r0,#0xe10
000080  da0d              BGE      |L2.158|
;;;83     
;;;84     #endif
;;;85           ax_Phys[0] = GUI_TOUCH_GetxPhys();
000082  f7fffffe          BL       GUI_TOUCH_GetxPhys
000086  4682              MOV      r10,r0
;;;86           ay_Phys[0] = GUI_TOUCH_GetyPhys();
000088  f7fffffe          BL       GUI_TOUCH_GetyPhys
00008c  4680              MOV      r8,r0
;;;87           break;
;;;88         }
;;;89         GUI_Delay (3000);
;;;90       } while (1);
;;;91     /* Tell user to release */
;;;92       GUI_Clear();
00008e  f7fffffe          BL       GUI_Clear
;;;93       GUI_DispStringAt("OK", ax[0]+20, ay[0]);
000092  4622              MOV      r2,r4
000094  a082              ADR      r0,|L2.672|
000096  9900              LDR      r1,[sp,#0]
000098  f7fffffe          BL       GUI_DispStringAt
;;;94       do {
00009c  e004              B        |L2.168|
                  |L2.158|
00009e  f64030b8          MOV      r0,#0xbb8             ;89
0000a2  f7fffffe          BL       GUI_Delay
0000a6  e7dc              B        |L2.98|
                  |L2.168|
;;;95         GUI_PID_STATE State;
;;;96         GUI_TOUCH_GetState(&State);
0000a8  4668              MOV      r0,sp
0000aa  f7fffffe          BL       GUI_TOUCH_GetState
;;;97         if (State.Pressed == 0) {
0000ae  f89d0008          LDRB     r0,[sp,#8]
0000b2  b118              CBZ      r0,|L2.188|
;;;98           break;
;;;99         }
;;;100        GUI_Delay (100);
0000b4  2064              MOVS     r0,#0x64
0000b6  f7fffffe          BL       GUI_Delay
;;;101      } while (1);
0000ba  e7f5              B        |L2.168|
                  |L2.188|
;;;102    /* _Calibrate lower right */
;;;103      GUI_SetBkColor(GUI_RED);  
0000bc  20ff              MOVS     r0,#0xff
0000be  f7fffffe          BL       GUI_SetBkColor
;;;104      GUI_Clear();
0000c2  f7fffffe          BL       GUI_Clear
;;;105      GUI_SetColor(GUI_WHITE);  GUI_FillCircle(ax[1], ay[1], 10);
0000c6  4648              MOV      r0,r9
0000c8  f7fffffe          BL       GUI_SetColor
0000cc  4639              MOV      r1,r7
0000ce  4630              MOV      r0,r6
0000d0  220a              MOVS     r2,#0xa
0000d2  f7fffffe          BL       GUI_FillCircle
;;;106      GUI_SetColor(GUI_RED);    GUI_FillCircle(ax[1], ay[1], 5);
0000d6  20ff              MOVS     r0,#0xff
0000d8  f7fffffe          BL       GUI_SetColor
0000dc  4639              MOV      r1,r7
0000de  4630              MOV      r0,r6
0000e0  2205              MOVS     r2,#5
0000e2  f7fffffe          BL       GUI_FillCircle
;;;107      GUI_SetColor(GUI_WHITE);
0000e6  4648              MOV      r0,r9
0000e8  f7fffffe          BL       GUI_SetColor
;;;108      GUI_SetTextAlign(GUI_TA_RIGHT);
0000ec  2001              MOVS     r0,#1
0000ee  f7fffffe          BL       GUI_SetTextAlign
;;;109      GUI_DispStringAt("Press here", ax[1]-20, ay[1]);
0000f2  463a              MOV      r2,r7
0000f4  f1a60114          SUB      r1,r6,#0x14
0000f8  a066              ADR      r0,|L2.660|
0000fa  f7fffffe          BL       GUI_DispStringAt
;;;110      do {
;;;111    
;;;112    #if 1
;;;113      x = TPReadX();
;;;114      y = TPReadY();
;;;115      if ((y>450)&&(y<620)&&(x>350)&&(x<450)) {
0000fe  f44f7baf          MOV      r11,#0x15e
                  |L2.258|
000102  f7fffffe          BL       TPReadX
000106  4681              MOV      r9,r0                 ;113
000108  f7fffffe          BL       TPReadY
00010c  f2a010c3          SUB      r0,r0,#0x1c3
000110  28a9              CMP      r0,#0xa9
000112  d27e              BCS      |L2.530|
000114  45d9              CMP      r9,r11
000116  dd7c              BLE      |L2.530|
000118  f5b97fe1          CMP      r9,#0x1c2
00011c  da79              BGE      |L2.530|
;;;116    #endif
;;;117    
;;;118    #if 0
;;;119    	GUI_PID_STATE State;
;;;120      	GUI_TOUCH_GetState(&State);
;;;121    	if (State.Pressed) {
;;;122    #endif
;;;123    
;;;124          ax_Phys[1] = GUI_TOUCH_GetxPhys();
00011e  f7fffffe          BL       GUI_TOUCH_GetxPhys
000122  4683              MOV      r11,r0
;;;125          ay_Phys[1] = GUI_TOUCH_GetyPhys();
000124  f7fffffe          BL       GUI_TOUCH_GetyPhys
000128  4681              MOV      r9,r0
;;;126          break;
;;;127        }
;;;128        GUI_Delay (3000);
;;;129      } while (1);
;;;130      GUI_TOUCH_Calibrate(GUI_COORD_X, ax[0], ax[1], ax_Phys[0], ax_Phys[1]);
00012a  4653              MOV      r3,r10
00012c  4632              MOV      r2,r6
00012e  4629              MOV      r1,r5
000130  2000              MOVS     r0,#0
000132  f8cdb000          STR      r11,[sp,#0]
000136  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;131      GUI_TOUCH_Calibrate(GUI_COORD_Y, ay[0], ay[1], ay_Phys[0], ay_Phys[1]);
00013a  4643              MOV      r3,r8
00013c  463a              MOV      r2,r7
00013e  4621              MOV      r1,r4
000140  2001              MOVS     r0,#1
000142  f8cd9000          STR      r9,[sp,#0]
000146  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;132      { /* calculate and display values for configuration file */
;;;133        int x0, x1;
;;;134        int y0, y1;
;;;135        GUI_Clear();
00014a  f7fffffe          BL       GUI_Clear
;;;136        _Calibrate(GUI_COORD_X, ax[0], ax[1], ax_Phys[0], ax_Phys[1], &x0, &x1);
00014e  ab0a              ADD      r3,sp,#0x28
000150  aa09              ADD      r2,sp,#0x24
000152  f8cdb000          STR      r11,[sp,#0]
000156  e9cd2301          STRD     r2,r3,[sp,#4]
00015a  4653              MOV      r3,r10
00015c  4632              MOV      r2,r6
00015e  4629              MOV      r1,r5
000160  2000              MOVS     r0,#0
000162  f7fffffe          BL       _Calibrate
;;;137        _Calibrate(GUI_COORD_Y, ay[0], ay[1], ay_Phys[0], ay_Phys[1], &y0, &y1);
000166  ab0c              ADD      r3,sp,#0x30
000168  aa0b              ADD      r2,sp,#0x2c
00016a  f8cd9000          STR      r9,[sp,#0]
00016e  e9cd2301          STRD     r2,r3,[sp,#4]
000172  4643              MOV      r3,r8
000174  463a              MOV      r2,r7
000176  4621              MOV      r1,r4
000178  2001              MOVS     r0,#1
00017a  f7fffffe          BL       _Calibrate
;;;138        GUI_DispStringAt("x0: ", 0, 0); GUI_DispDec(x0, 4); GUI_DispNextLine();
00017e  2200              MOVS     r2,#0
000180  4611              MOV      r1,r2
000182  a048              ADR      r0,|L2.676|
000184  f7fffffe          BL       GUI_DispStringAt
000188  2104              MOVS     r1,#4
00018a  9809              LDR      r0,[sp,#0x24]
00018c  f7fffffe          BL       GUI_DispDec
000190  f7fffffe          BL       GUI_DispNextLine
;;;139        GUI_DispString  ("x1: ");       GUI_DispDec(x1, 4); GUI_DispNextLine();
000194  a045              ADR      r0,|L2.684|
000196  f7fffffe          BL       GUI_DispString
00019a  2104              MOVS     r1,#4
00019c  980a              LDR      r0,[sp,#0x28]
00019e  f7fffffe          BL       GUI_DispDec
0001a2  f7fffffe          BL       GUI_DispNextLine
;;;140        GUI_DispString  ("y0: ");       GUI_DispDec(y0, 4); GUI_DispNextLine();
0001a6  a043              ADR      r0,|L2.692|
0001a8  f7fffffe          BL       GUI_DispString
0001ac  2104              MOVS     r1,#4
0001ae  980b              LDR      r0,[sp,#0x2c]
0001b0  f7fffffe          BL       GUI_DispDec
0001b4  f7fffffe          BL       GUI_DispNextLine
;;;141        GUI_DispString  ("y1: ");       GUI_DispDec(y1, 4); GUI_DispNextLine();
0001b8  a040              ADR      r0,|L2.700|
0001ba  f7fffffe          BL       GUI_DispString
0001be  2104              MOVS     r1,#4
0001c0  980c              LDR      r0,[sp,#0x30]
0001c2  f7fffffe          BL       GUI_DispDec
0001c6  f7fffffe          BL       GUI_DispNextLine
;;;142        GUI_DispString  ("Please touch display to continue...");
0001ca  a03e              ADR      r0,|L2.708|
0001cc  f7fffffe          BL       GUI_DispString
;;;143        GUI_Delay(1000);
0001d0  f44f707a          MOV      r0,#0x3e8
0001d4  f7fffffe          BL       GUI_Delay
;;;144    
;;;145    	data[0]=  CAL_READY;
0001d8  f24e10e1          MOV      r0,#0xe1e1
0001dc  f8ad0018          STRH     r0,[sp,#0x18]
;;;146    	data[1]= ax_Phys[0];
;;;147    	data[2]= ay_Phys[0];
0001e0  f8ad801c          STRH     r8,[sp,#0x1c]
0001e4  f8ada01a          STRH     r10,[sp,#0x1a]        ;146
;;;148    	data[3]= ax_Phys[1];
0001e8  f8adb01e          STRH     r11,[sp,#0x1e]
;;;149    	data[4]= ay_Phys[1];
0001ec  f8ad9020          STRH     r9,[sp,#0x20]
;;;150    
;;;151    	#if 1
;;;152    	save_calibrate_to_flash(data);
0001f0  a806              ADD      r0,sp,#0x18
0001f2  f7fffffe          BL       save_calibrate_to_flash
;;;153    	get_calibrate_data(get_data);
0001f6  a803              ADD      r0,sp,#0xc
0001f8  f7fffffe          BL       get_calibrate_data
;;;154    
;;;155    	GUI_DispStringAt("x0: ", 100, 0); GUI_DispDec(get_data[1], 4); GUI_DispNextLine();
0001fc  2200              MOVS     r2,#0
0001fe  2164              MOVS     r1,#0x64
000200  a028              ADR      r0,|L2.676|
000202  f7fffffe          BL       GUI_DispStringAt
000206  f8bd000e          LDRH     r0,[sp,#0xe]
00020a  2104              MOVS     r1,#4
00020c  f7fffffe          BL       GUI_DispDec
000210  e000              B        |L2.532|
                  |L2.530|
000212  e02a              B        |L2.618|
                  |L2.532|
000214  f7fffffe          BL       GUI_DispNextLine
;;;156        GUI_DispString  ("x1: ");       GUI_DispDec(get_data[2], 4); GUI_DispNextLine();
000218  a024              ADR      r0,|L2.684|
00021a  f7fffffe          BL       GUI_DispString
00021e  f8bd0010          LDRH     r0,[sp,#0x10]
000222  2104              MOVS     r1,#4
000224  f7fffffe          BL       GUI_DispDec
000228  f7fffffe          BL       GUI_DispNextLine
;;;157        GUI_DispString  ("y0: ");       GUI_DispDec(get_data[3], 4); GUI_DispNextLine();
00022c  a021              ADR      r0,|L2.692|
00022e  f7fffffe          BL       GUI_DispString
000232  f8bd0012          LDRH     r0,[sp,#0x12]
000236  2104              MOVS     r1,#4
000238  f7fffffe          BL       GUI_DispDec
00023c  f7fffffe          BL       GUI_DispNextLine
;;;158        GUI_DispString  ("y1: ");       GUI_DispDec(get_data[4], 4); GUI_DispNextLine();
000240  a01e              ADR      r0,|L2.700|
000242  f7fffffe          BL       GUI_DispString
000246  f8bd0014          LDRH     r0,[sp,#0x14]
00024a  2104              MOVS     r1,#4
00024c  f7fffffe          BL       GUI_DispDec
000250  f7fffffe          BL       GUI_DispNextLine
;;;159    	GUI_DispString  ("state: ");       GUI_DispDec(get_data[0], 4); GUI_DispNextLine();
000254  a024              ADR      r0,|L2.744|
000256  f7fffffe          BL       GUI_DispString
00025a  f8bd000c          LDRH     r0,[sp,#0xc]
00025e  2104              MOVS     r1,#4
000260  f7fffffe          BL       GUI_DispDec
000264  f7fffffe          BL       GUI_DispNextLine
;;;160    	#endif
;;;161    
;;;162        do {
000268  e004              B        |L2.628|
                  |L2.618|
00026a  f64030b8          MOV      r0,#0xbb8             ;128
00026e  f7fffffe          BL       GUI_Delay
000272  e746              B        |L2.258|
                  |L2.628|
;;;163          GUI_PID_STATE State;
;;;164          GUI_TOUCH_GetState(&State);
000274  4668              MOV      r0,sp
000276  f7fffffe          BL       GUI_TOUCH_GetState
;;;165          if (State.Pressed)
00027a  f89d0008          LDRB     r0,[sp,#8]
00027e  2800              CMP      r0,#0
000280  d103              BNE      |L2.650|
;;;166          break;
;;;167          GUI_Delay (10);
000282  200a              MOVS     r0,#0xa
000284  f7fffffe          BL       GUI_Delay
;;;168        } while (1);
000288  e7f4              B        |L2.628|
                  |L2.650|
;;;169      }
;;;170    }
00028a  b00d              ADD      sp,sp,#0x34
00028c  e8bd8ff0          POP      {r4-r11,pc}
;;;171    
                          ENDP

                  |L2.656|
                          DCD      ||.constdata||
                  |L2.660|
000294  50726573          DCB      "Press here",0
000298  73206865
00029c  726500  
00029f  00                DCB      0
                  |L2.672|
0002a0  4f4b00            DCB      "OK",0
0002a3  00                DCB      0
                  |L2.676|
0002a4  78303a20          DCB      "x0: ",0
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L2.684|
0002ac  78313a20          DCB      "x1: ",0
0002b0  00      
0002b1  00                DCB      0
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L2.692|
0002b4  79303a20          DCB      "y0: ",0
0002b8  00      
0002b9  00                DCB      0
0002ba  00                DCB      0
0002bb  00                DCB      0
                  |L2.700|
0002bc  79313a20          DCB      "y1: ",0
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L2.708|
0002c4  506c6561          DCB      "Please touch display to continue...",0
0002c8  73652074
0002cc  6f756368
0002d0  20646973
0002d4  706c6179
0002d8  20746f20
0002dc  636f6e74
0002e0  696e7565
0002e4  2e2e2e00
                  |L2.744|
0002e8  73746174          DCB      "state: ",0
0002ec  653a2000

                          AREA ||i.get_calibration||, CODE, READONLY, ALIGN=2

                  get_calibration PROC
;;;189    
;;;190    int get_calibration(void)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;191    {
;;;192      uint16_t cal_data[5];
;;;193      int ax_Phys[2],ay_Phys[2];
;;;194      int ax[2] = { 15, LCD_XSIZE -1-15};
000004  4811              LDR      r0,|L3.76|
000006  e9d08204          LDRD     r8,r2,[r0,#0x10]
00000a  e9d05606          LDRD     r5,r6,[r0,#0x18]
00000e  4614              MOV      r4,r2
;;;195      int ay[2] = { LCD_YSIZE-1-15, 15};
;;;196    
;;;197      get_calibrate_data(cal_data);
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       get_calibrate_data
;;;198    
;;;199      ax_Phys[0] = cal_data[1];
000016  f8bd0006          LDRH     r0,[sp,#6]
;;;200      ay_Phys[0] = cal_data[2];
;;;201      
;;;202      ax_Phys[1] = cal_data[3];
00001a  f8bd300a          LDRH     r3,[sp,#0xa]
;;;203      ay_Phys[1] = cal_data[4];
;;;204      
;;;205      GUI_TOUCH_Calibrate(GUI_COORD_X, ax[0], ax[1], ax_Phys[0], ax_Phys[1]);
00001e  9300              STR      r3,[sp,#0]
000020  4603              MOV      r3,r0
000022  f8bd7008          LDRH     r7,[sp,#8]            ;200
000026  f8bd900c          LDRH     r9,[sp,#0xc]          ;203
00002a  4622              MOV      r2,r4
00002c  4641              MOV      r1,r8
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;206      GUI_TOUCH_Calibrate(GUI_COORD_Y, ay[0], ay[1], ay_Phys[0], ay_Phys[1]);
000034  463b              MOV      r3,r7
000036  4632              MOV      r2,r6
000038  4629              MOV      r1,r5
00003a  2001              MOVS     r0,#1
00003c  f8cd9000          STR      r9,[sp,#0]
000040  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;207    }
000044  b004              ADD      sp,sp,#0x10
000046  e8bd87f0          POP      {r4-r10,pc}
;;;208    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      ||.constdata||

                          AREA ||i.run_cal||, CODE, READONLY, ALIGN=1

                  run_cal PROC
;;;173    
;;;174    int run_cal(void)
000000  b510              PUSH     {r4,lr}
;;;175    {
;;;176      if(get_calibrate_state()== CAL_READY)
000002  f7fffffe          BL       get_calibrate_state
000006  f5a04161          SUB      r1,r0,#0xe100
00000a  39e1              SUBS     r1,r1,#0xe1
00000c  d103              BNE      |L4.22|
;;;177      {
;;;178      	get_calibration();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      get_calibration
                  |L4.22|
;;;179      }else{
;;;180    	#if 1
;;;181      	 _ExecCalibration();
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      _ExecCalibration
;;;182    	#endif	
;;;183    
;;;184    	#if 0
;;;185    	Calibration();
;;;186    	#endif
;;;187      }
;;;188    }
;;;189    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  admk
                          %        40

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.bss||
                  Factors
                          %        1200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x0000000f
                          DCD      0x00000310
                          DCD      0x000001d0
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x00000310
                          DCD      0x000001d0
                          DCD      0x0000000f

                          AREA ||.data||, DATA, ALIGN=2

                  admy
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  admx
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\uCGUI\\TouchCalibration\\TouchCalibration.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_TouchCalibration_c_d78bd113____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_TouchCalibration_c_d78bd113____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_TouchCalibration_c_d78bd113____REVSH|
#line 128
|__asm___18_TouchCalibration_c_d78bd113____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
