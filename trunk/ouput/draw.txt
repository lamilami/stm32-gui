; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\draw.o --depend=.\ouput\draw.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\draw.crf Source\gui_app\Draw.c]
                          THUMB

                          AREA ||i.Draw||, CODE, READONLY, ALIGN=2

                  Draw PROC
;;;305    
;;;306    void Draw(WM_MESSAGE * pMsg)
000000  f5ad4da0          SUB      sp,sp,#0x5000
;;;307    {
;;;308    	int i,j,k;
;;;309    	signed short data_in[5000],data_out[5000];
;;;310    	unsigned int lenth = 2048;
;;;311    	unsigned int count,pick;
;;;312    	short base_buf[63],in_buf[64];
000004  f64463a4          MOV      r3,#0x4ea4
000008  4606              MOV      r6,r0                 ;307
;;;313    	unsigned int disp_size;
;;;314    	int get_return;
;;;315    	q15_t  State[FIR_BLOCK_SIZE+FIR_TAPS-1];
;;;316    	arm_fir_instance_q15 S;
;;;317    
;;;318    	arm_cfft_radix4_instance_q15  fft_S;
;;;319    	uint16_t fftLen;
;;;320    	uint8_t ifftFlag;
;;;321    	uint8_t bitReverseFlag;
;;;322    
;;;323    	fftLen = 1024;
00000a  f44f6580          MOV      r5,#0x400
;;;324    	ifftFlag = 0;
;;;325    	bitReverseFlag = 1;
;;;326    	lenth = 1024*3;
00000e  f44f6440          MOV      r4,#0xc00
;;;327    	disp_size =1024;
;;;328    
;;;329    	for(j=0;j<64;j++)
000012  2200              MOVS     r2,#0
000014  446b              ADD      r3,r3,sp              ;312
                  |L1.22|
;;;330    		in_buf[j]=j;
000016  f8232012          STRH     r2,[r3,r2,LSL #1]
00001a  1c52              ADDS     r2,r2,#1              ;329
00001c  2a40              CMP      r2,#0x40              ;329
00001e  dbfa              BLT      |L1.22|
000020  f6446124          MOV      r1,#0x4e24            ;312
;;;331    
;;;332    	for(i=0;i<63;i++)
000024  2000              MOVS     r0,#0
000026  4469              ADD      r1,r1,sp              ;312
                  |L1.40|
;;;333    		base_buf[i]=i;
000028  f8210010          STRH     r0,[r1,r0,LSL #1]
00002c  1c40              ADDS     r0,r0,#1              ;332
00002e  283f              CMP      r0,#0x3f              ;332
000030  dbfa              BLT      |L1.40|
;;;334    	
;;;335    	put_head(in_buf, base_buf);
000032  4618              MOV      r0,r3
000034  f7fffffe          BL       put_head
;;;336    	
;;;337    	view_int(pMsg);
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       view_int
;;;338    	
;;;339    	get_za_data(data_in,lenth);
00003e  ae01              ADD      r6,sp,#4
000040  4621              MOV      r1,r4
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       get_za_data
;;;340    	
;;;341    	get_return = arm_fir_init_q15(&S,FIR_TAPS,&Coeffs_25hz[0],&State[0],FIR_BLOCK_SIZE);
000048  2320              MOVS     r3,#0x20
00004a  9300              STR      r3,[sp,#0]
00004c  f6447324          MOV      r3,#0x4f24
000050  446b              ADD      r3,r3,sp
000052  f1030750          ADD      r7,r3,#0x50
000056  4a28              LDR      r2,|L1.248|
000058  2108              MOVS     r1,#8
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       arm_fir_init_q15
000060  f2427814          MOV      r8,#0x2714            ;309
;;;342    	
;;;343    	//arm_cfft_radix4_init_q15(&fft_S,fftLen,ifftFlag,bitReverseFlag);
;;;344    	
;;;345    	//arm_cfft_radix4_q15(&fft_S, data_in); 
;;;346    
;;;347    	for(i=0;i<disp_size;i++)
000064  2000              MOVS     r0,#0
000066  44e8              ADD      r8,r8,sp              ;309
000068  e008              B        |L1.124|
                  |L1.106|
;;;348    	{
;;;349    		data_out[i] = (data_out[i]/1024);
00006a  f9381010          LDRSH    r1,[r8,r0,LSL #1]
00006e  17ca              ASRS     r2,r1,#31
000070  eb015192          ADD      r1,r1,r2,LSR #22
000074  1289              ASRS     r1,r1,#10
000076  f8281010          STRH     r1,[r8,r0,LSL #1]
00007a  1c40              ADDS     r0,r0,#1              ;347
                  |L1.124|
00007c  42a8              CMP      r0,r5                 ;347
00007e  d3f4              BCC      |L1.106|
;;;350    	}
;;;351    
;;;352    	for(i=0;i< disp_size/FIR_BLOCK_SIZE;i++)
000080  2400              MOVS     r4,#0
000082  e008              B        |L1.150|
                  |L1.132|
;;;353    	{
;;;354    		arm_fir_q15(&S,data_in+FIR_BLOCK_SIZE*i,data_out+FIR_BLOCK_SIZE*i,FIR_BLOCK_SIZE);
000084  eb081284          ADD      r2,r8,r4,LSL #6
000088  eb061184          ADD      r1,r6,r4,LSL #6
00008c  2320              MOVS     r3,#0x20
00008e  4638              MOV      r0,r7
000090  f7fffffe          BL       arm_fir_q15
000094  1c64              ADDS     r4,r4,#1              ;352
                  |L1.150|
000096  ebb41f55          CMP      r4,r5,LSR #5          ;352
00009a  d3f3              BCC      |L1.132|
;;;355    	}
;;;356    
;;;357    	for(i=0;i<disp_size;i++)
00009c  2000              MOVS     r0,#0
;;;358    	{
;;;359    		data_in[i] = 0-(data_in[i]/35); //有个倍数关系 why? 衰减了29倍 1024/35
00009e  2223              MOVS     r2,#0x23
0000a0  e00c              B        |L1.188|
                  |L1.162|
0000a2  f9361010          LDRSH    r1,[r6,r0,LSL #1]
0000a6  fb91f1f2          SDIV     r1,r1,r2
0000aa  4249              RSBS     r1,r1,#0
0000ac  f8261010          STRH     r1,[r6,r0,LSL #1]
;;;360    		data_out[i] = 0-data_out[i];
0000b0  f8381010          LDRH     r1,[r8,r0,LSL #1]
0000b4  4249              RSBS     r1,r1,#0
0000b6  f8281010          STRH     r1,[r8,r0,LSL #1]
0000ba  1c40              ADDS     r0,r0,#1              ;357
                  |L1.188|
0000bc  42a8              CMP      r0,r5                 ;357
0000be  d3f0              BCC      |L1.162|
;;;361    	}
;;;362    	
;;;363    	GUI_DrawGraph(data_in,512,Z_ACC_START_X0,Z_ACC_START_Y0);
0000c0  f44f7400          MOV      r4,#0x200
0000c4  2341              MOVS     r3,#0x41
0000c6  2214              MOVS     r2,#0x14
0000c8  4621              MOV      r1,r4
0000ca  4630              MOV      r0,r6
0000cc  f7fffffe          BL       GUI_DrawGraph
;;;364    	GUI_DrawGraph(data_out,512,Z_ACC_START_X0,Z_ACC_START_Y0+200);
0000d0  f2401309          MOV      r3,#0x109
0000d4  2214              MOVS     r2,#0x14
0000d6  4621              MOV      r1,r4
0000d8  4640              MOV      r0,r8
0000da  f7fffffe          BL       GUI_DrawGraph
                  |L1.222|
;;;365    	
;;;366    
;;;367    
;;;368    	
;;;369    #if 0
;;;370    	if(pMsg)
;;;371    	{
;;;372    		WM_DeleteWindow(pMsg->hWin);
;;;373    	}
;;;374    
;;;375    	WM_Paint(WM_GetDesktopWindow());
;;;376    	GUI_SetBkColor(GUI_RED);
;;;377    	GUI_Clear();
;;;378        GUI_DispStringHCenterAt("WIDGET_SimpleButton - Sample", 160, 5);
;;;379    
;;;380    	while(1)
;;;381    	{
;;;382    
;;;383    	GUI_Exec();
;;;384    	}
;;;385    #endif    
;;;386    	
;;;387    	
;;;388    while(1)
;;;389     {
;;;390    	if(GUI_GetKey() == GUI_ID_PARS)
0000de  f7fffffe          BL       GUI_GetKey
0000e2  2801              CMP      r0,#1
0000e4  d104              BNE      |L1.240|
;;;391    	{
;;;392    	 GUI_DispStringHCenterAt("Gui id  - Pars", 160, 5);
0000e6  2205              MOVS     r2,#5
0000e8  21a0              MOVS     r1,#0xa0
0000ea  a004              ADR      r0,|L1.252|
0000ec  f7fffffe          BL       GUI_DispStringHCenterAt
                  |L1.240|
;;;393    	}
;;;394    	GUI_Exec();
0000f0  f7fffffe          BL       GUI_Exec
0000f4  e7f3              B        |L1.222|
;;;395     }
;;;396    
;;;397    }
;;;398    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L1.248|
                          DCD      ||.data||+0x8
                  |L1.252|
0000fc  47756920          DCB      "Gui id  - Pars",0
000100  69642020
000104  2d205061
000108  727300  
00010b  00                DCB      0

                          AREA ||i.data_zip||, CODE, READONLY, ALIGN=1

                  data_zip PROC
;;;262    
;;;263    unsigned int data_zip(int* data,unsigned int in_size,int out_size,EZip ezip)
000000  b570              PUSH     {r4-r6,lr}
;;;264    {
;;;265    	int rate,i;
;;;266    	rate = in_size/out_size;
000002  fbb1f5f2          UDIV     r5,r1,r2
000006  4604              MOV      r4,r0                 ;264
;;;267    	
;;;268      if(ezip == ZIP_BEFORE)
000008  b95b              CBNZ     r3,|L2.34|
;;;269      {
;;;270    	for(i=0;i<in_size;i=i+rate)
00000a  2000              MOVS     r0,#0
00000c  e007              B        |L2.30|
                  |L2.14|
;;;271    	{
;;;272    		data[i] = data[i+rate-1];
00000e  1942              ADDS     r2,r0,r5
000010  eb040682          ADD      r6,r4,r2,LSL #2
000014  f8566c04          LDR      r6,[r6,#-4]
000018  f8446020          STR      r6,[r4,r0,LSL #2]
00001c  4610              MOV      r0,r2                 ;270
                  |L2.30|
00001e  4288              CMP      r0,r1                 ;270
000020  d3f5              BCC      |L2.14|
                  |L2.34|
;;;273    	}
;;;274      }
;;;275      
;;;276      if(ezip == MOVE_HALF)
000022  2b01              CMP      r3,#1
000024  d10b              BNE      |L2.62|
;;;277      {
;;;278    	for(i=0;i<in_size/2;i++)
000026  2000              MOVS     r0,#0
000028  e006              B        |L2.56|
                  |L2.42|
;;;279    	{
;;;280    		data[i]=data[in_size/2+i];
00002a  eb000251          ADD      r2,r0,r1,LSR #1
00002e  f8542022          LDR      r2,[r4,r2,LSL #2]
000032  f8442020          STR      r2,[r4,r0,LSL #2]
000036  1c40              ADDS     r0,r0,#1              ;278
                  |L2.56|
000038  ebb00f51          CMP      r0,r1,LSR #1          ;278
00003c  d3f5              BCC      |L2.42|
                  |L2.62|
;;;281    	}
;;;282      }
;;;283    	return i;
;;;284    }
00003e  bd70              POP      {r4-r6,pc}
;;;285    
                          ENDP


                          AREA ||i.draw||, CODE, READONLY, ALIGN=1

                  draw PROC
;;;193    
;;;194    void draw(TDraw* draw)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;195    {
000004  4604              MOV      r4,r0
;;;196    	int i;
;;;197    	GUI_COLOR color;
;;;198    	color = GUI_GetColor();
000006  f7fffffe          BL       GUI_GetColor
00000a  4601              MOV      r1,r0
;;;199        
;;;200    	if(color != draw->draw_color)
00000c  6b20              LDR      r0,[r4,#0x30]
00000e  4288              CMP      r0,r1
000010  d001              BEQ      |L3.22|
;;;201    	{
;;;202    	 GUI_SetColor(draw->draw_color);
000012  f7fffffe          BL       GUI_SetColor
                  |L3.22|
;;;203    	}
;;;204    
;;;205    	if(draw->data_size <= draw->buf_size)
;;;206    	{
;;;207    	//draw->buf[draw->data_size] = (draw->px.y - draw->p0.y);// 以p0.y为基准偏移的！！
;;;208    	//GUI_DrawGraph(draw->buf, draw->data_size,draw->p0.x, draw->p0.y);
;;;209    		draw->buf[draw->data_size] = (draw->px.y);
;;;210    		if(draw->data_size >= 1)
;;;211    		{
;;;212    		GUI_DrawLine(draw->p0.x+draw->data_size-1,draw->buf[draw->data_size-1],draw->p0.x+draw->data_size,draw->px.y);
000016  e9d41001          LDRD     r1,r0,[r4,#4]
00001a  f06f0603          MVN      r6,#3
00001e  4288              CMP      r0,r1                 ;205
000020  d814              BHI      |L3.76|
000022  6822              LDR      r2,[r4,#0]            ;209
000024  69e1              LDR      r1,[r4,#0x1c]         ;209
000026  f8421020          STR      r1,[r2,r0,LSL #2]     ;209
00002a  68a0              LDR      r0,[r4,#8]            ;210
00002c  b148              CBZ      r0,|L3.66|
00002e  6921              LDR      r1,[r4,#0x10]
000030  69e3              LDR      r3,[r4,#0x1c]
000032  180a              ADDS     r2,r1,r0
000034  6821              LDR      r1,[r4,#0]
000036  eb060080          ADD      r0,r6,r0,LSL #2
00003a  5809              LDR      r1,[r1,r0]
00003c  1e50              SUBS     r0,r2,#1
00003e  f7fffffe          BL       GUI_DrawLine
                  |L3.66|
;;;213    		}
;;;214    		draw->data_size++;	
000042  68a0              LDR      r0,[r4,#8]
000044  1c40              ADDS     r0,r0,#1
000046  60a0              STR      r0,[r4,#8]
                  |L3.72|
;;;215    
;;;216    	}else{
;;;217    
;;;218    #if 1
;;;219    		draw_clear(draw);
;;;220    		data_zip(draw->buf,draw->buf_size,draw->buf_size/2,MOVE_HALF);
;;;221    		draw->data_size = draw->buf_size/2;
;;;222    		
;;;223    		for(i=1;i<draw->data_size;i++)
;;;224    		{
;;;225    		GUI_DrawLine(draw->p0.x+i-1,draw->buf[i-1],draw->p0.x+i,draw->buf[i]);
;;;226    		}
;;;227    #endif
;;;228    
;;;229    
;;;230    #if 0
;;;231    		GUI_ClearRect(draw->p_rec_lu.x,draw->p_rec_lu.y,draw->p_rec_rd.x,draw->p_rec_rd.y);
;;;232    		draw->data_size = 0;
;;;233    	}
;;;234    	if(color != draw->draw_color)
;;;235    	{
;;;236    	 GUI_SetColor(color);
;;;237    	}
;;;238    #endif
;;;239    }
;;;240    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L3.76|
00004c  4620              MOV      r0,r4                 ;219
00004e  f7fffffe          BL       draw_clear
000052  6861              LDR      r1,[r4,#4]            ;220
000054  2301              MOVS     r3,#1                 ;220
000056  084a              LSRS     r2,r1,#1              ;220
000058  6820              LDR      r0,[r4,#0]            ;220
00005a  f7fffffe          BL       data_zip
00005e  6860              LDR      r0,[r4,#4]            ;221
000060  0840              LSRS     r0,r0,#1              ;221
000062  2501              MOVS     r5,#1                 ;223
000064  60a0              STR      r0,[r4,#8]            ;223
000066  e00c              B        |L3.130|
                  |L3.104|
000068  6820              LDR      r0,[r4,#0]            ;225
00006a  eb060185          ADD      r1,r6,r5,LSL #2       ;225
00006e  1e6f              SUBS     r7,r5,#1              ;225
000070  f8503025          LDR      r3,[r0,r5,LSL #2]     ;225
000074  5841              LDR      r1,[r0,r1]            ;225
000076  6920              LDR      r0,[r4,#0x10]         ;225
000078  1942              ADDS     r2,r0,r5              ;225
00007a  4438              ADD      r0,r0,r7              ;225
00007c  f7fffffe          BL       GUI_DrawLine
000080  1c6d              ADDS     r5,r5,#1              ;223
                  |L3.130|
000082  68a0              LDR      r0,[r4,#8]            ;223
000084  42a8              CMP      r0,r5                 ;223
000086  d8ef              BHI      |L3.104|
000088  e7de              B        |L3.72|
;;;241    
                          ENDP


                          AREA ||i.draw_clear||, CODE, READONLY, ALIGN=1

                  draw_clear PROC
;;;243    
;;;244    void draw_clear(TDraw* draw)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;245    {
000004  4605              MOV      r5,r0
;;;246    	unsigned int i,color;
;;;247    	unsigned int bk_color;
;;;248    
;;;249    	color = GUI_GetColor();
000006  f7fffffe          BL       GUI_GetColor
00000a  4680              MOV      r8,r0
;;;250    
;;;251    	bk_color = GUI_GetBkColor();
00000c  f7fffffe          BL       GUI_GetBkColor
;;;252    
;;;253    	GUI_SetColor(bk_color);
000010  f7fffffe          BL       GUI_SetColor
;;;254    
;;;255    	for(i=1;i<draw->data_size;i++)
000014  2401              MOVS     r4,#1
;;;256    	{
;;;257    	GUI_DrawLine(draw->p0.x+i-1,draw->buf[i-1],draw->p0.x+i,draw->buf[i]);
000016  1f66              SUBS     r6,r4,#5
000018  e00c              B        |L4.52|
                  |L4.26|
00001a  6828              LDR      r0,[r5,#0]
00001c  eb060184          ADD      r1,r6,r4,LSL #2
000020  1e67              SUBS     r7,r4,#1
000022  f8503024          LDR      r3,[r0,r4,LSL #2]
000026  5841              LDR      r1,[r0,r1]
000028  6928              LDR      r0,[r5,#0x10]
00002a  1902              ADDS     r2,r0,r4
00002c  4438              ADD      r0,r0,r7
00002e  f7fffffe          BL       GUI_DrawLine
000032  1c64              ADDS     r4,r4,#1              ;255
                  |L4.52|
000034  68a8              LDR      r0,[r5,#8]            ;255
000036  42a0              CMP      r0,r4                 ;255
000038  d8ef              BHI      |L4.26|
;;;258    	}
;;;259    	GUI_SetColor(color);
00003a  4640              MOV      r0,r8
00003c  e8bd41f0          POP      {r4-r8,lr}
000040  f7ffbffe          B.W      GUI_SetColor
;;;260    }
;;;261    
                          ENDP


                          AREA ||i.draw_close||, CODE, READONLY, ALIGN=1

                  draw_close PROC
;;;188    
;;;189    void draw_close(TDraw* draw)
000000  6800              LDR      r0,[r0,#0]
;;;190    {
;;;191    	free(draw->buf);
000002  f7ffbffe          B.W      free
;;;192    }
;;;193    
                          ENDP


                          AREA ||i.draw_exp||, CODE, READONLY, ALIGN=1

                  draw_exp PROC
;;;288    
;;;289    void draw_exp(TDraw* draw)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;290    {
000004  4605              MOV      r5,r0
;;;291    	int i;
;;;292    	draw_clear(draw);
000006  f7fffffe          BL       draw_clear
;;;293    #if 1
;;;294    		data_zip(draw->buf,draw->buf_size,draw->buf_size/2,0);
00000a  6869              LDR      r1,[r5,#4]
00000c  2300              MOVS     r3,#0
00000e  084a              LSRS     r2,r1,#1
000010  6828              LDR      r0,[r5,#0]
000012  f7fffffe          BL       data_zip
;;;295    		draw->data_size = draw->buf_size/2;
000016  6868              LDR      r0,[r5,#4]
;;;296    
;;;297    		for(i=1;i<draw->data_size;i++)
000018  2401              MOVS     r4,#1
00001a  0840              LSRS     r0,r0,#1              ;295
;;;298    		{
;;;299    		GUI_DrawLine(draw->p0.x+i-1,draw->buf[i-1],draw->p0.x+i,draw->buf[i]);
00001c  1f66              SUBS     r6,r4,#5
00001e  60a8              STR      r0,[r5,#8]            ;297
000020  e00c              B        |L6.60|
                  |L6.34|
000022  6828              LDR      r0,[r5,#0]
000024  eb060184          ADD      r1,r6,r4,LSL #2
000028  1e67              SUBS     r7,r4,#1
00002a  f8503024          LDR      r3,[r0,r4,LSL #2]
00002e  5841              LDR      r1,[r0,r1]
000030  6928              LDR      r0,[r5,#0x10]
000032  1902              ADDS     r2,r0,r4
000034  4438              ADD      r0,r0,r7
000036  f7fffffe          BL       GUI_DrawLine
00003a  1c64              ADDS     r4,r4,#1              ;297
                  |L6.60|
00003c  68a8              LDR      r0,[r5,#8]            ;297
00003e  42a0              CMP      r0,r4                 ;297
000040  d8ef              BHI      |L6.34|
;;;300    		}
;;;301    #endif
;;;302    
;;;303    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;304    
                          ENDP


                          AREA ||i.draw_line_at||, CODE, READONLY, ALIGN=1

                  draw_line_at PROC
;;;400    
;;;401    void draw_line_at(TPoint ps,TPoint pe,unsigned char line_style)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;402    {
000004  4616              MOV      r6,r2
000006  461f              MOV      r7,r3
000008  4604              MOV      r4,r0
00000a  460d              MOV      r5,r1
;;;403    	unsigned char get_line_style;
;;;404    	get_line_style = GUI_GetLineStyle();
00000c  f7fffffe          BL       GUI_GetLineStyle
000010  4680              MOV      r8,r0
;;;405    	GUI_SetLineStyle(GUI_LS_DASH);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       GUI_SetLineStyle
;;;406    
;;;407    	GUI_DrawLine(ps.x,ps.y,pe.x,pe.y);
000018  463b              MOV      r3,r7
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       GUI_DrawLine
;;;408    	GUI_SetLineStyle(get_line_style);
000024  4640              MOV      r0,r8
000026  e8bd41f0          POP      {r4-r8,lr}
00002a  f7ffbffe          B.W      GUI_SetLineStyle
;;;409    }
;;;410    
                          ENDP


                          AREA ||i.draw_open||, CODE, READONLY, ALIGN=1

                  draw_open PROC
;;;183    
;;;184    void draw_open(TDraw* draw)
000000  b510              PUSH     {r4,lr}
;;;185    {
000002  4604              MOV      r4,r0
;;;186    	draw->buf = malloc(sizeof(unsigned int)*draw->buf_size);
000004  6840              LDR      r0,[r0,#4]
000006  0080              LSLS     r0,r0,#2
000008  f7fffffe          BL       malloc
00000c  6020              STR      r0,[r4,#0]
;;;187    }
00000e  bd10              POP      {r4,pc}
;;;188    
                          ENDP


                          AREA ||i.draw_scale||, CODE, READONLY, ALIGN=1

                  draw_scale PROC
;;;49     // text_scale = small_degree*text_scale
;;;50     void draw_scale(TSEPoint sepoint,int color,unsigned int off_set)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;51     {
000004  4605              MOV      r5,r0
000006  e9dd4b0a          LDRD     r4,r11,[sp,#0x28]
;;;52     	unsigned int dis,i,j,k,s_dis_p_p,x0,y0,x1,y1;
;;;53     	unsigned int draw_dir;
;;;54     	unsigned long total_ms;
;;;55     	unsigned int rate;
;;;56     	unsigned int mirr;
;;;57     	
;;;58     	x0 = sepoint.start_point.x;
;;;59     	y0 = sepoint.start_point.y;
;;;60     
;;;61     	x1 = sepoint.end_point.x;
;;;62     	y1 = sepoint.end_point.y;
;;;63     
;;;64     	draw_dir = (x1 == x0)?1:0;// 1 y_dir, 0 x_dir 
00000a  2001              MOVS     r0,#1
00000c  460e              MOV      r6,r1                 ;59
00000e  4691              MOV      r9,r2                 ;61
000010  469a              MOV      r10,r3                ;62
000012  42aa              CMP      r2,r5
000014  d000              BEQ      |L9.24|
000016  2000              MOVS     r0,#0
                  |L9.24|
000018  ea5f0800          MOVS     r8,r0
;;;65     	
;;;66     	if(draw_dir)
00001c  d001              BEQ      |L9.34|
;;;67     	{
;;;68     		dis = (y0 - y1);
00001e  1af0              SUBS     r0,r6,r3
000020  e000              B        |L9.36|
                  |L9.34|
;;;69     	}else{
;;;70     		dis = x1 - x0;
000022  1b50              SUBS     r0,r2,r5
                  |L9.36|
;;;71     	}
;;;72     	s_dis_p_p = dis/5;
000024  2105              MOVS     r1,#5
000026  fbb0f0f1          UDIV     r0,r0,r1
;;;73     	
;;;74     	GUI_SetColor(color);
00002a  9000              STR      r0,[sp,#0]
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GUI_SetColor
;;;75     	GUI_DrawLine(x0,y0,x1,y1);
000032  4653              MOV      r3,r10
000034  464a              MOV      r2,r9
000036  4631              MOV      r1,r6
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GUI_DrawLine
;;;76     
;;;77     	for(i=1;i < s_dis_p_p ;i++)
00003e  2401              MOVS     r4,#1
000040  e03e              B        |L9.192|
                  |L9.66|
;;;78     	{
;;;79     		if((i >= 5)&&(i%5 == 0))
000042  2c05              CMP      r4,#5
000044  d305              BCC      |L9.82|
000046  2005              MOVS     r0,#5
000048  fbb4f1f0          UDIV     r1,r4,r0
00004c  fb004011          MLS      r0,r0,r1,r4
000050  b168              CBZ      r0,|L9.110|
                  |L9.82|
;;;80     		{
;;;81     		j=5;
;;;82     			
;;;83     		if(draw_dir)
;;;84     			{
;;;85     			mirr = y0-i*5;
;;;86     			GUI_DispDecAt(i+off_set,x0-10,y0-i*5,3);
;;;87     			
;;;88     			}else{
;;;89     
;;;90     			GUI_DispDecAt(i+off_set,x0+i*5,y0+10,3);
;;;91     			}
;;;92     			
;;;93     		}else{
;;;94     		
;;;95     		j=0;
000052  2700              MOVS     r7,#0
;;;96     		
;;;97     		}
;;;98     		
;;;99     	if(draw_dir){
000054  f1b80f00          CMP      r8,#0
000058  d027              BEQ      |L9.170|
                  |L9.90|
;;;100    	
;;;101    	GUI_DrawLine(x0,y0-i*5, x1+5+j,y0-i*5);
00005a  4260              RSBS     r0,r4,#0
00005c  eb000080          ADD      r0,r0,r0,LSL #2
000060  1981              ADDS     r1,r0,r6
000062  eb090207          ADD      r2,r9,r7
000066  1d52              ADDS     r2,r2,#5
000068  460b              MOV      r3,r1
00006a  4628              MOV      r0,r5
00006c  e025              B        |L9.186|
                  |L9.110|
00006e  2705              MOVS     r7,#5                 ;81
000070  f1b80f00          CMP      r8,#0                 ;83
000074  d00d              BEQ      |L9.146|
000076  4260              RSBS     r0,r4,#0              ;85
000078  eb000080          ADD      r0,r0,r0,LSL #2       ;85
00007c  4430              ADD      r0,r0,r6              ;85
00007e  b202              SXTH     r2,r0                 ;86
000080  f1a5010a          SUB      r1,r5,#0xa            ;86
000084  eb04000b          ADD      r0,r4,r11             ;86
000088  2303              MOVS     r3,#3                 ;86
00008a  b209              SXTH     r1,r1                 ;86
00008c  f7fffffe          BL       GUI_DispDecAt
000090  e7e3              B        |L9.90|
                  |L9.146|
000092  eb040084          ADD      r0,r4,r4,LSL #2       ;90
000096  4428              ADD      r0,r0,r5              ;90
000098  b201              SXTH     r1,r0                 ;90
00009a  f106020a          ADD      r2,r6,#0xa            ;90
00009e  eb04000b          ADD      r0,r4,r11             ;90
0000a2  2303              MOVS     r3,#3                 ;90
0000a4  b212              SXTH     r2,r2                 ;90
0000a6  f7fffffe          BL       GUI_DispDecAt
                  |L9.170|
;;;102    	
;;;103    		}else{
;;;104    
;;;105    	GUI_DrawLine(x0+i*5,y0, x0+i*5,y1+5+j);
0000aa  eb040084          ADD      r0,r4,r4,LSL #2
0000ae  eb0a0307          ADD      r3,r10,r7
0000b2  4428              ADD      r0,r0,r5
0000b4  1d5b              ADDS     r3,r3,#5
0000b6  4602              MOV      r2,r0
0000b8  4631              MOV      r1,r6
                  |L9.186|
0000ba  f7fffffe          BL       GUI_DrawLine
0000be  1c64              ADDS     r4,r4,#1              ;77
                  |L9.192|
0000c0  9800              LDR      r0,[sp,#0]            ;77
0000c2  4284              CMP      r4,r0                 ;77
0000c4  d3bd              BCC      |L9.66|
;;;106    		}
;;;107    	}
;;;108    }
0000c6  e8bd8ff8          POP      {r3-r11,pc}
;;;109    
                          ENDP


                          AREA ||i.get_loc||, CODE, READONLY, ALIGN=2

                  get_loc PROC
;;;411    
;;;412    void get_loc(int *y,int scale_mid,float CM_S,char zero_up_down)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;413    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4611              MOV      r1,r2
00000a  461d              MOV      r5,r3
;;;414    	float rate ,g,get,half_scale;
;;;415    	g = 9.8*1000;
;;;416    	half_scale = SCALE_Y_SIZE/4;
;;;417    	rate = half_scale/g;
00000c  4809              LDR      r0,|L10.52|
;;;418    	get = rate*CM_S;
00000e  f7fffffe          BL       __aeabi_fmul
000012  4606              MOV      r6,r0
000014  4638              MOV      r0,r7                 ;413
;;;419    	if(zero_up_down > 0)
;;;420    	{
;;;421    		*y = scale_mid - get;
000016  f7fffffe          BL       __aeabi_i2f
;;;422    	}else{
;;;423    		*y = scale_mid + get;
00001a  4631              MOV      r1,r6
00001c  b115              CBZ      r5,|L10.36|
00001e  f7fffffe          BL       __aeabi_fsub
000022  e001              B        |L10.40|
                  |L10.36|
000024  f7fffffe          BL       __aeabi_fadd
                  |L10.40|
000028  f7fffffe          BL       __aeabi_f2iz
00002c  6020              STR      r0,[r4,#0]            ;421
;;;424    	}
;;;425    }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;426    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      0x3bd5febf

                          AREA ||i.get_za_data||, CODE, READONLY, ALIGN=2

                  get_za_data PROC
;;;144    
;;;145    void get_za_data(signed short *data, unsigned int lenth)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;146    {  
000004  b081              SUB      sp,sp,#4
000006  4683              MOV      r11,r0
;;;147    	int i;
;;;148    	long si;
;;;149    	float freq;
;;;150    	float fs=1024;//采样频率
000008  f04f4089          MOV      r0,#0x44800000
;;;151    	float pick;
;;;152        
;;;153    	for(i=0;i<lenth;i++)
00000c  2400              MOVS     r4,#0
00000e  9000              STR      r0,[sp,#0]
000010  e041              B        |L11.150|
                  |L11.18|
;;;154    	{
;;;155    	 pick = i/fs;
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       __aeabi_i2f
000018  9900              LDR      r1,[sp,#0]
00001a  f7fffffe          BL       __aeabi_fdiv
;;;156    	 data[i] = 1024*sin(pick*2*3.14159*80) + 5*sin(pick*2*3.14159*5)+2*sin(pick*2*3.14159*256);
00001e  2101              MOVS     r1,#1
000020  f7fffffe          BL       __ARM_scalbnf
000024  f7fffffe          BL       __aeabi_f2d
000028  4a1d              LDR      r2,|L11.160|
00002a  4b1e              LDR      r3,|L11.164|
00002c  f7fffffe          BL       __aeabi_dmul
000030  4605              MOV      r5,r0
000032  460e              MOV      r6,r1
000034  2208              MOVS     r2,#8
000036  f7fffffe          BL       __ARM_scalbn
00003a  f7fffffe          BL       ||sin||
00003e  2201              MOVS     r2,#1
000040  f7fffffe          BL       __ARM_scalbn
000044  4f18              LDR      r7,|L11.168|
000046  4681              MOV      r9,r0
000048  468a              MOV      r10,r1
00004a  2200              MOVS     r2,#0
00004c  463b              MOV      r3,r7
00004e  4628              MOV      r0,r5
000050  4631              MOV      r1,r6
000052  f7fffffe          BL       __aeabi_dmul
000056  f7fffffe          BL       ||sin||
00005a  2200              MOVS     r2,#0
00005c  463b              MOV      r3,r7
00005e  f7fffffe          BL       __aeabi_dmul
000062  4607              MOV      r7,r0
000064  4688              MOV      r8,r1
000066  2200              MOVS     r2,#0
000068  4b10              LDR      r3,|L11.172|
00006a  4628              MOV      r0,r5
00006c  4631              MOV      r1,r6
00006e  f7fffffe          BL       __aeabi_dmul
000072  f7fffffe          BL       ||sin||
000076  220a              MOVS     r2,#0xa
000078  f7fffffe          BL       __ARM_scalbn
00007c  463a              MOV      r2,r7
00007e  4643              MOV      r3,r8
000080  f7fffffe          BL       __aeabi_dadd
000084  464a              MOV      r2,r9
000086  4653              MOV      r3,r10
000088  f7fffffe          BL       __aeabi_dadd
00008c  f7fffffe          BL       __aeabi_d2iz
000090  f82b0014          STRH     r0,[r11,r4,LSL #1]
000094  1c64              ADDS     r4,r4,#1              ;153
                  |L11.150|
000096  9802              LDR      r0,[sp,#8]            ;153
000098  4284              CMP      r4,r0                 ;153
00009a  d3ba              BCC      |L11.18|
;;;157    	}	
;;;158    }
00009c  e8bd8ffe          POP      {r1-r11,pc}
;;;159    
                          ENDP

                  |L11.160|
                          DCD      0xf01b866e
                  |L11.164|
                          DCD      0x400921f9
                  |L11.168|
                          DCD      0x40140000
                  |L11.172|
                          DCD      0x40540000

                          AREA ||i.scale_set||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  scale_set PROC
;;;28     
;;;29     void scale_set(TScale *tscale)
000000  b57c              PUSH     {r2-r6,lr}
;;;30     {
000002  4604              MOV      r4,r0
;;;31     	char buf[8];
;;;32     	float rate_x,rate_y;
;;;33     
;;;34     	rem_tscale = tscale;
000004  4820              LDR      r0,|L12.136|
;;;35     	rate_x = (tscale->x_data_max/tscale->x_pix_size)*PIX_PER_DIV;
000006  6044              STR      r4,[r0,#4]  ; rem_tscale
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       __aeabi_ui2f
00000e  4601              MOV      r1,r0
000010  68a0              LDR      r0,[r4,#8]
000012  f7fffffe          BL       __aeabi_fdiv
000016  4d1d              LDR      r5,|L12.140|
000018  4629              MOV      r1,r5
00001a  f7fffffe          BL       __aeabi_fmul
00001e  4606              MOV      r6,r0
;;;36     	rate_y = (tscale->y_data_max/tscale->y_pix_size)*PIX_PER_DIV;
000020  6860              LDR      r0,[r4,#4]
000022  f7fffffe          BL       __aeabi_ui2f
000026  4601              MOV      r1,r0
000028  68e0              LDR      r0,[r4,#0xc]
00002a  f7fffffe          BL       __aeabi_fdiv
00002e  4629              MOV      r1,r5
000030  f7fffffe          BL       __aeabi_fmul
000034  e9d41204          LDRD     r1,r2,[r4,#0x10]
000038  4605              MOV      r5,r0
;;;37     	
;;;38     	GUI_DispStringAt(tscale->unit_x,tscale->disp_text_p0.x - XYC_OFF_SET,tscale->disp_text_p0.y);
00003a  3946              SUBS     r1,r1,#0x46
00003c  6a20              LDR      r0,[r4,#0x20]
00003e  f7fffffe          BL       GUI_DispStringAt
;;;39     	sprintf(buf,"%.3f",rate_x);
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       __aeabi_f2d
000048  4602              MOV      r2,r0
00004a  460b              MOV      r3,r1
00004c  a110              ADR      r1,|L12.144|
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       __2sprintf
;;;40     	GUI_DispStringAt(buf,tscale->disp_text_p0.x,tscale->disp_text_p0.y);
000054  e9d41204          LDRD     r1,r2,[r4,#0x10]
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       GUI_DispStringAt
00005e  e9d41206          LDRD     r1,r2,[r4,#0x18]
;;;41     	
;;;42     	GUI_DispStringAt(tscale->unit_y,tscale->disp_text_p1.x - XYC_OFF_SET,tscale->disp_text_p1.y);
000062  3946              SUBS     r1,r1,#0x46
000064  6a60              LDR      r0,[r4,#0x24]
000066  f7fffffe          BL       GUI_DispStringAt
;;;43     	sprintf(buf,"%.3f",rate_y);
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       __aeabi_f2d
000070  4602              MOV      r2,r0
000072  460b              MOV      r3,r1
000074  a106              ADR      r1,|L12.144|
000076  4668              MOV      r0,sp
000078  f7fffffe          BL       __2sprintf
00007c  e9d41206          LDRD     r1,r2,[r4,#0x18]
;;;44     	GUI_DispStringAt(buf,tscale->disp_text_p1.x,tscale->disp_text_p1.y);
000080  4668              MOV      r0,sp
000082  f7fffffe          BL       GUI_DispStringAt
;;;45     }
000086  bd7c              POP      {r2-r6,pc}
;;;46     
                          ENDP

                  |L12.136|
                          DCD      ||.data||
                  |L12.140|
                          DCD      0x40a00000
                  |L12.144|
000090  252e3366          DCB      "%.3f",0
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.view_int||, CODE, READONLY, ALIGN=2

                  view_int PROC
;;;110    
;;;111    void view_int(WM_MESSAGE * pMsg)
000000  b57c              PUSH     {r2-r6,lr}
;;;112    {
;;;113    	TSEPoint tsepoint;
;;;114    	if(pMsg)
000002  b118              CBZ      r0,|L13.12|
;;;115    	{
;;;116    		WM_DeleteWindow(pMsg->hWin);
000004  f9b00004          LDRSH    r0,[r0,#4]
000008  f7fffffe          BL       WM_DeleteWindow
                  |L13.12|
;;;117    	}
;;;118    
;;;119    	WM_Paint(WM_GetDesktopWindow());
00000c  f7fffffe          BL       WM_GetDesktopWindow
000010  f7fffffe          BL       WM_Paint
;;;120    	GUI_SetBkColor(GUI_BLACK);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       GUI_SetBkColor
;;;121    	GUI_Clear();
00001a  f7fffffe          BL       GUI_Clear
;;;122    	
;;;123    	GUI_DispStringAt("worke_state", 0,0);
00001e  2200              MOVS     r2,#0
000020  4611              MOV      r1,r2
000022  a01f              ADR      r0,|L13.160|
000024  f7fffffe          BL       GUI_DispStringAt
;;;124    	GUI_DispStringAt("battery", 80,0);
000028  2200              MOVS     r2,#0
00002a  2150              MOVS     r1,#0x50
00002c  a01f              ADR      r0,|L13.172|
00002e  f7fffffe          BL       GUI_DispStringAt
;;;125    	
;;;126    	hButton = BUTTON_Create(720, 0, 80, 25, GUI_ID_PARS, WM_CF_SHOW);
000032  2302              MOVS     r3,#2
000034  2201              MOVS     r2,#1
000036  e9cd2300          STRD     r2,r3,[sp,#0]
00003a  2319              MOVS     r3,#0x19
00003c  2250              MOVS     r2,#0x50
00003e  2100              MOVS     r1,#0
000040  f44f7034          MOV      r0,#0x2d0
000044  f7fffffe          BL       BUTTON_Create
000048  491a              LDR      r1,|L13.180|
00004a  8008              STRH     r0,[r1,#0]
;;;127    	BUTTON_SetText(hButton, "BasePars...");
00004c  a11a              ADR      r1,|L13.184|
00004e  f7fffffe          BL       BUTTON_SetText
;;;128    
;;;129    	tsepoint.start_point.x = 20;
;;;130    	tsepoint.start_point.y = 376;
;;;131    	tsepoint.end_point.x = tsepoint.start_point.x + SCALE_X_SIZE;
;;;132    	tsepoint.end_point.y = 376;
;;;133    	draw_scale(tsepoint,0xffff,0);		//X
000052  2300              MOVS     r3,#0
000054  f64f76ff          MOV      r6,#0xffff
000058  e9cd6300          STRD     r6,r3,[sp,#0]
00005c  f44f75bc          MOV      r5,#0x178             ;130
000060  2414              MOVS     r4,#0x14              ;129
000062  f44f721b          MOV      r2,#0x26c             ;131
000066  462b              MOV      r3,r5
000068  4629              MOV      r1,r5
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       draw_scale
;;;134    
;;;135    	tsepoint.start_point.x = 20;
;;;136    	tsepoint.start_point.y = 376;
;;;137    	tsepoint.end_point.x = 20;
;;;138    	tsepoint.end_point.y = tsepoint.start_point.y - SCALE_Y_SIZE;
;;;139    	draw_scale(tsepoint,0xffff,0);		//Y
000070  2300              MOVS     r3,#0
000072  e9cd6300          STRD     r6,r3,[sp,#0]
000076  2078              MOVS     r0,#0x78              ;138
000078  4603              MOV      r3,r0
00007a  4622              MOV      r2,r4
00007c  4629              MOV      r1,r5
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       draw_scale
;;;140    
;;;141    	GUI_SetColor(GUI_BLUE);
000084  f44f007f          MOV      r0,#0xff0000
000088  f7fffffe          BL       GUI_SetColor
;;;142    	GUI_DrawHLine(65,20,SCALE_X_SIZE);
00008c  b002              ADD      sp,sp,#8
00008e  2114              MOVS     r1,#0x14
000090  e8bd4070          POP      {r4-r6,lr}
000094  f44f7216          MOV      r2,#0x258
000098  2041              MOVS     r0,#0x41
00009a  f7ffbffe          B.W      GUI_DrawHLine
;;;143    }
;;;144    
                          ENDP

00009e  0000              DCW      0x0000
                  |L13.160|
0000a0  776f726b          DCB      "worke_state",0
0000a4  655f7374
0000a8  61746500
                  |L13.172|
0000ac  62617474          DCB      "battery",0
0000b0  65727900
                  |L13.180|
                          DCD      ||.data||
                  |L13.184|
0000b8  42617365          DCB      "BasePars...",0
0000bc  50617273
0000c0  2e2e2e00

                          AREA ||i.zip_data||, CODE, READONLY, ALIGN=1

                  zip_data PROC
;;;162    // 采集量与 pick_rate 成比例
;;;163    void zip_data(int* in_data, int* out_data,int in_size,int pick_rate)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;164    {
;;;165    	int i,j,k;
;;;166    	int first,mid;
;;;167    
;;;168    	for(i=0,j=0;i<in_size;i=i+pick_rate,j++)
000004  2500              MOVS     r5,#0
000006  4681              MOV      r9,r0                 ;164
000008  46ac              MOV      r12,r5
00000a  e01a              B        |L14.66|
                  |L14.12|
;;;169    	{
;;;170    		mid = in_data[i];
00000c  f8596025          LDR      r6,[r9,r5,LSL #2]
;;;171    	   for(k=1;k<pick_rate;k++)
000010  2001              MOVS     r0,#1
000012  e00f              B        |L14.52|
                  |L14.20|
;;;172    	   {
;;;173    		  if(abs(mid) > abs(in_data[i+k]))
000014  eb050800          ADD      r8,r5,r0
000018  1e37              SUBS     r7,r6,#0
00001a  f8594028          LDR      r4,[r9,r8,LSL #2]
00001e  da00              BGE      |L14.34|
000020  4277              RSBS     r7,r6,#0
                  |L14.34|
000022  f1b40800          SUBS     r8,r4,#0
000026  da01              BGE      |L14.44|
000028  f1c40800          RSB      r8,r4,#0
                  |L14.44|
00002c  4547              CMP      r7,r8
00002e  dc00              BGT      |L14.50|
;;;174    		  {
;;;175    		  
;;;176    		  }else{
;;;177    			mid = in_data[i+k];
000030  4626              MOV      r6,r4
                  |L14.50|
000032  1c40              ADDS     r0,r0,#1              ;171
                  |L14.52|
000034  4298              CMP      r0,r3                 ;171
000036  dbed              BLT      |L14.20|
;;;178    		  }
;;;179    	   }
;;;180    		out_data[j] = mid;//out_data[j] = mid%35;
000038  f841602c          STR      r6,[r1,r12,LSL #2]
00003c  441d              ADD      r5,r5,r3              ;168
00003e  f10c0c01          ADD      r12,r12,#1            ;168
                  |L14.66|
000042  4295              CMP      r5,r2                 ;168
000044  dbe2              BLT      |L14.12|
;;;181    	}
;;;182    }
000046  e8bd83f0          POP      {r4-r9,pc}
;;;183    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  hButton
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  rem_tscale
                          DCD      0x00000000
                  Coeffs_25hz
000008  00140042          DCW      0x0014,0x0042
00000c  00aa00ff          DCW      0x00aa,0x00ff
000010  00ff00aa          DCW      0x00ff,0x00aa
000014  00420014          DCW      0x0042,0x0014

;*** Start embedded assembler ***

#line 1 "Source\\gui_app\\Draw.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_Draw_c_be54cc5e____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_Draw_c_be54cc5e____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_Draw_c_be54cc5e____REVSH|
#line 128
|__asm___6_Draw_c_be54cc5e____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
