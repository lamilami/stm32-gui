; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\app.o --depend=.\ouput\app.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\app.crf Source\APP\app.c]
                          THUMB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;144    
;;;145    static  void  AppTaskCreate(void)
000000  b500              PUSH     {lr}
;;;146    {
000002  b085              SUB      sp,sp,#0x14
;;;147      //INT8U  err;
;;;148    
;;;149      OSTaskCreateExt(AppTaskUserIF,(void *)0,(OS_STK *)&AppTaskUserIFStk[APP_TASK_USER_IF_STK_SIZE-1],APP_TASK_USER_IF_PRIO,APP_TASK_USER_IF_PRIO,(OS_STK *)&AppTaskUserIFStk[0],
000004  2303              MOVS     r3,#3
000006  4819              LDR      r0,|L1.108|
000008  f10d0c04          ADD      r12,sp,#4
00000c  2200              MOVS     r2,#0
00000e  0259              LSLS     r1,r3,#9
000010  e8ac000f          STM      r12!,{r0-r3}
000014  2305              MOVS     r3,#5
000016  4a16              LDR      r2,|L1.112|
000018  2100              MOVS     r1,#0
00001a  4816              LDR      r0,|L1.116|
00001c  9300              STR      r3,[sp,#0]
00001e  f7fffffe          BL       OSTaskCreateExt
;;;150                        APP_TASK_USER_IF_STK_SIZE,
;;;151                        (void *)0,
;;;152                        OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
;;;153    
;;;154    
;;;155    #if (OS_TASK_NAME_SIZE > 8)
;;;156      OSTaskNameSet(APP_TASK_USER_IF_PRIO, "User I/F", &err);
;;;157    #endif
;;;158    
;;;159    
;;;160      OSTaskCreateExt(AppTaskKbd,(void *)0,(OS_STK *)&AppTaskKbdStk[APP_TASK_KBD_STK_SIZE-1],APP_TASK_KBD_PRIO,APP_TASK_KBD_PRIO,(OS_STK *)&AppTaskKbdStk[0],
000022  4813              LDR      r0,|L1.112|
000024  f10d0c04          ADD      r12,sp,#4
000028  2303              MOVS     r3,#3
00002a  2200              MOVS     r2,#0
00002c  f44f7100          MOV      r1,#0x200
000030  1d00              ADDS     r0,r0,#4
000032  e8ac000f          STM      r12!,{r0-r3}
000036  2304              MOVS     r3,#4
000038  f20072fc          ADD      r2,r0,#0x7fc
00003c  2100              MOVS     r1,#0
00003e  480e              LDR      r0,|L1.120|
000040  9300              STR      r3,[sp,#0]
000042  f7fffffe          BL       OSTaskCreateExt
;;;161                        APP_TASK_KBD_STK_SIZE,
;;;162                        (void *)0,
;;;163                        OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
;;;164    
;;;165    
;;;166      OSTaskCreateExt(AppTaskNet,(void *)0,(OS_STK *)&AppTaskNetStk[APP_TASK_NET_SIZE-1],APP_TASK_NET_PRIO,APP_TASK_NET_PRIO,(OS_STK *)&AppTaskNetStk[0],
000046  480d              LDR      r0,|L1.124|
000048  f10d0c04          ADD      r12,sp,#4
00004c  2303              MOVS     r3,#3
00004e  2200              MOVS     r2,#0
000050  f44f7180          MOV      r1,#0x100
000054  e8ac000f          STM      r12!,{r0-r3}
000058  2307              MOVS     r3,#7
00005a  f500727f          ADD      r2,r0,#0x3fc
00005e  2100              MOVS     r1,#0
000060  4807              LDR      r0,|L1.128|
000062  9300              STR      r3,[sp,#0]
000064  f7fffffe          BL       OSTaskCreateExt
;;;167                        APP_TASK_NET_SIZE,
;;;168                        (void *)0,
;;;169                        OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
;;;170    
;;;171    #if (OS_TASK_NAME_SIZE > 8)
;;;172      OSTaskNameSet(APP_TASK_KBD_PRIO, "Keyboard", &err)
;;;173    #endif
;;;174    }
000068  b005              ADD      sp,sp,#0x14
00006a  bd00              POP      {pc}
;;;175    
                          ENDP

                  |L1.108|
                          DCD      ||.bss||+0x200
                  |L1.112|
                          DCD      ||.bss||+0x19fc
                  |L1.116|
                          DCD      AppTaskUserIF
                  |L1.120|
                          DCD      AppTaskKbd
                  |L1.124|
                          DCD      ||.bss||+0x2200
                  |L1.128|
                          DCD      AppTaskNet

                          AREA ||i.AppTaskKbd||, CODE, READONLY, ALIGN=2

                  AppTaskKbd PROC
;;;214    
;;;215    static  void  AppTaskKbd (void *p_arg)
000000  4e15              LDR      r6,|L2.88|
;;;216    {
;;;217       int x,y;
;;;218       u8 tick=0;
;;;219       GUI_PID_STATE pid_state;
;;;220       (void)p_arg;
;;;221      
;;;222       while(DEF_TRUE) 
;;;223         {
;;;224    	 	tick++;
;;;225            OSTimeDlyHMSM(0,0,0,5);
;;;226    	#ifdef 	R_TOUCH
;;;227    	    GUI_TOUCH_Exec();
;;;228    	#endif 
;;;229    
;;;230    	#ifdef C_TOUCH
;;;231    		if(TOUCH_PRESSING == 0)
;;;232    		{
;;;233    		FT5x06_GetData(&x,&y);
;;;234    		pid_state.Pressed = 1;
000002  2501              MOVS     r5,#1
000004  b086              SUB      sp,sp,#0x18           ;216
000006  2400              MOVS     r4,#0                 ;218
                  |L2.8|
000008  2200              MOVS     r2,#0                 ;225
00000a  2305              MOVS     r3,#5                 ;225
00000c  4611              MOV      r1,r2                 ;225
00000e  4610              MOV      r0,r2                 ;225
000010  f7fffffe          BL       OSTimeDlyHMSM
000014  2110              MOVS     r1,#0x10              ;231
000016  4630              MOV      r0,r6                 ;231
000018  f7fffffe          BL       GPIO_ReadInputDataBit
00001c  b138              CBZ      r0,|L2.46|
;;;235    		pid_state.x = x;
;;;236    		pid_state.y = y;
;;;237    		GUI_PID_StoreState(&pid_state);
;;;238    		OSTimeDlyHMSM(0,0,0,20);
;;;239    		#if 1
;;;240    		}
;;;241    		else
;;;242    		{
;;;243    		pid_state.Pressed = 0;
00001e  f88d4008          STRB     r4,[sp,#8]
;;;244    		pid_state.x = 0;
;;;245    		pid_state.y = 0;
000022  9400              STR      r4,[sp,#0]
;;;246    		GUI_PID_StoreState(&pid_state);
000024  4668              MOV      r0,sp
000026  9401              STR      r4,[sp,#4]
000028  f7fffffe          BL       GUI_PID_StoreState
00002c  e7ec              B        |L2.8|
                  |L2.46|
00002e  a904              ADD      r1,sp,#0x10           ;233
000030  a803              ADD      r0,sp,#0xc            ;233
000032  f7fffffe          BL       FT5x06_GetData
000036  9803              LDR      r0,[sp,#0xc]          ;235
000038  9000              STR      r0,[sp,#0]            ;236
00003a  9804              LDR      r0,[sp,#0x10]         ;236
00003c  9001              STR      r0,[sp,#4]            ;237
00003e  f88d5008          STRB     r5,[sp,#8]            ;234
000042  4668              MOV      r0,sp                 ;237
000044  f7fffffe          BL       GUI_PID_StoreState
000048  2200              MOVS     r2,#0                 ;238
00004a  2314              MOVS     r3,#0x14              ;238
00004c  4611              MOV      r1,r2                 ;238
00004e  4610              MOV      r0,r2                 ;238
000050  f7fffffe          BL       OSTimeDlyHMSM
000054  e7d8              B        |L2.8|
;;;247    		#endif
;;;248    		}
;;;249    	#endif
;;;250    
;;;251    		if(tick&0x10)
;;;252    		{
;;;253    		  //  GPIO_SetBits(GPIOF,GPIO_Pin_6);
;;;254    		  //  GPIO_ResetBits(GPIOF,GPIO_Pin_10);
;;;255    		}
;;;256    		else
;;;257    		{
;;;258    		 	//GPIO_ResetBits(GPIOF,GPIO_Pin_6);
;;;259    			//GPIO_SetBits(GPIOF,GPIO_Pin_10);
;;;260    		}
;;;261    	   ;
;;;262    	
;;;263         }
;;;264    }
;;;265    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40011000

                          AREA ||i.AppTaskNet||, CODE, READONLY, ALIGN=1

                  AppTaskNet PROC
                  |L3.0|
;;;265    
;;;266    static void AppTaskNet(void *p_arg)
000000  2200              MOVS     r2,#0
;;;267    {
;;;268    	 
;;;269    	 while(1)
;;;270    	{
;;;271    	OSTimeDlyHMSM(0,0,0,10);    
000002  230a              MOVS     r3,#0xa
000004  4611              MOV      r1,r2
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       OSTimeDlyHMSM
00000c  e7f8              B        |L3.0|
;;;272    	}
;;;273    //	 Web_Server();
;;;274    }
;;;275    
                          ENDP


                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=1

                  AppTaskStart PROC
;;;107    
;;;108    static  void  AppTaskStart (void *p_arg)
000000  f7fffffe          BL       BSP_Init
;;;109    {
;;;110    		 int ma,i;
;;;111    		 static unsigned int read_data;
;;;112      (void)p_arg;
;;;113     
;;;114       BSP_Init();  
;;;115    
;;;116            			                                      /* Initialize BSP functions                                 */
;;;117       #if (OS_TASK_STAT_EN > 0)
;;;118        OSStatInit();                                               /* Determine CPU capacity                                   */
000004  f7fffffe          BL       OSStatInit
;;;119       #endif
;;;120    
;;;121    //   AppUserIFMbox = OSMboxCreate((void *)0);                  /* Create MBOX for communication between Kbd and UserIF     */
;;;122       AppTaskCreate();                                            /* Create application tasks                                 */
000008  f7fffffe          BL       AppTaskCreate
                  |L4.12|
;;;123        
;;;124       while(DEF_TRUE)
;;;125    	 {  
;;;126    	  /* Task body, always written as an infinite loop. */
;;;127    	   OSTaskSuspend(OS_PRIO_SELF);
00000c  20ff              MOVS     r0,#0xff
00000e  f7fffffe          BL       OSTaskSuspend
000012  e7fb              B        |L4.12|
;;;128    
;;;129         }
;;;130    }
;;;131    
                          ENDP


                          AREA ||i.AppTaskUserIF||, CODE, READONLY, ALIGN=1

                  AppTaskUserIF PROC
                  |L5.0|
;;;188    extern void  MainTask(void);
;;;189    static  void  AppTaskUserIF (void *p_arg)
000000  f7fffffe          BL       MainTask
;;;190    {
;;;191     
;;;192     (void)p_arg;
;;;193      // GUI_Init();
;;;194      while(DEF_TRUE) 
000004  e7fc              B        |L5.0|
;;;195        {
;;;196    	  MainTask(); 
;;;197    	 // GUIDEMO_Touch();
;;;198        }
;;;199    }
;;;200    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;75     
;;;76     int  main (void)
000000  b500              PUSH     {lr}
;;;77     {
000002  b085              SUB      sp,sp,#0x14
;;;78     
;;;79         OSInit();                          
000004  f7fffffe          BL       OSInit
;;;80     
;;;81        // Create the start task 
;;;82     OSTaskCreateExt(AppTaskStart,(void *)0,(OS_STK *)&AppTaskStartStk[APP_TASK_START_STK_SIZE-1],APP_TASK_START_PRIO,APP_TASK_START_PRIO,(OS_STK *)&AppTaskStartStk[0],APP_TASK_START_STK_SIZE,(void *)0,OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);
000008  4809              LDR      r0,|L6.48|
00000a  f10d0c04          ADD      r12,sp,#4
00000e  2303              MOVS     r3,#3
000010  2200              MOVS     r2,#0
000012  2180              MOVS     r1,#0x80
000014  e8ac000f          STM      r12!,{r0-r3}
000018  f50072fe          ADD      r2,r0,#0x1fc
00001c  2100              MOVS     r1,#0
00001e  4805              LDR      r0,|L6.52|
000020  9300              STR      r3,[sp,#0]
000022  f7fffffe          BL       OSTaskCreateExt
;;;83     
;;;84     #if (OS_TASK_NAME_SIZE > 13)
;;;85         OSTaskNameSet(APP_TASK_START_PRIO, "Start Task", &err);
;;;86     #endif
;;;87     
;;;88         OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II)       */
000026  f7fffffe          BL       OSStart
;;;89     }
00002a  b005              ADD      sp,sp,#0x14
00002c  2000              MOVS     r0,#0
00002e  bd00              POP      {pc}
;;;90     
                          ENDP

                  |L6.48|
                          DCD      ||.bss||
                  |L6.52|
                          DCD      AppTaskStart

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  AppTaskStartStk
                          %        512
                  AppTaskUserIFStk
                          %        6144
                  AppTaskKbdStk
                          %        2048
                  AppTaskNetStk
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  ExTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\APP\\app.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_app_c_main____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_app_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_app_c_main____REVSH|
#line 128
|__asm___5_app_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
