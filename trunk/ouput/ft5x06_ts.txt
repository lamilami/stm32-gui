; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\ouput\ft5x06_ts.o --depend=.\ouput\ft5x06_ts.d --cpu=Cortex-M3 --apcs=interwork -I.\Source\APP -I.\Source\FWLib\cm3 -I.\Source\FWLib\inc -I.\Source\BSP -I.\Source\FWLib -I.\Source\Startup -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\uCGUI\LCDDriver\Touch -I.\Source\uCOS-II\Source -I.\Source\uCGUI\Core -I.\Source\uCGUI\WM -I.\Source\uCGUI\Widget -I.\Source\uCGUI\GUIDemo -I.\Source\SDHC\driver -I.\Source\SDHC\fatfs -I.\Source\gui_app -I.\Source\gui_app\pinyin -I.\Source\uCGUI\TouchCalibration -I.\Source\Mot -I.\Source\Net -I.\Source\STM32F10x_DSP_Lib\src\asm\arm -I.\Source\STM32F10x_DSP_Lib\inc -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Lib\ARM -I..\..\..\STM32F4\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\Libraries\CMSIS\Include -I.\Source\Lib -ID:\Keil_ARM\ARM\INC -ID:\Keil_ARM\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_XL -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 --omf_browse=.\ouput\ft5x06_ts.crf Source\BSP\ft5x06_ts.c]
                          THUMB

                          AREA ||i.FT5x06_GPIO_Config||, CODE, READONLY, ALIGN=2

                  FT5x06_GPIO_Config PROC
;;;34     *******************************************************************************/
;;;35     void FT5x06_GPIO_Config(void)
000000  b538              PUSH     {r3-r5,lr}
;;;36     {
;;;37       GPIO_InitTypeDef  GPIO_InitStructure; 
;;;38     
;;;39       RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);
000002  2101              MOVS     r1,#1
000004  0548              LSLS     r0,r1,#21
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;40       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2008              MOVS     r0,#8
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;41         
;;;42       /* Configure I2C1 pins: SCL and SDA */
;;;43     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
000012  2001              MOVS     r0,#1
000014  f88d0002          STRB     r0,[sp,#2]
;;;44     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; 
000018  20c0              MOVS     r0,#0xc0
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;45     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;  
00001e  2014              MOVS     r0,#0x14
;;;46     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000020  4c07              LDR      r4,|L1.64|
000022  f88d0003          STRB     r0,[sp,#3]            ;45
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_Init
;;;47     
;;;48     	GPIO_ResetBits(GPIOB, GPIO_Pin_6);
00002e  2140              MOVS     r1,#0x40
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       GPIO_ResetBits
;;;49     	GPIO_ResetBits(GPIOB, GPIO_Pin_7);
000036  2180              MOVS     r1,#0x80
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       GPIO_ResetBits
;;;50     }
00003e  bd38              POP      {r3-r5,pc}
;;;51     
                          ENDP

                  |L1.64|
                          DCD      0x40010c00

                          AREA ||i.FT5x06_GetData||, CODE, READONLY, ALIGN=2

                  FT5x06_GetData PROC
;;;338    *******************************************************************************/
;;;339    void FT5x06_GetData(int* x, int* y)
000000  b570              PUSH     {r4-r6,lr}
;;;340    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;341    
;;;342    	static int Xposition_H,Xposition_L,Yposition_H,Yposition_L,Xposition,Yposition;
;;;343    
;;;344    //	if(EXTI_GetITStatus(EXTI_Line4) != RESET)
;;;345    //	if(TOUCH_PRESSING == 0)
;;;346    	{
;;;347    		  Xposition_H=FT_IIC_RegRead(FT5X0X_REG_TOUCH1_XH);
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       FT_IIC_RegRead
00000c  4c0f              LDR      r4,|L2.76|
;;;348    		  Xposition_L=FT_IIC_RegRead(FT5X0X_REG_TOUCH1_XL);
00000e  6020              STR      r0,[r4,#0]  ; Xposition_H
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       FT_IIC_RegRead
;;;349    		  Xposition = (Xposition_H&0x0f)*256+Xposition_L;
000016  6060              STR      r0,[r4,#4]  ; Xposition_L
000018  6821              LDR      r1,[r4,#0]  ; Xposition_H
00001a  f001010f          AND      r1,r1,#0xf
00001e  eb002001          ADD      r0,r0,r1,LSL #8
;;;350    		  Yposition_H=FT_IIC_RegRead(FT5X0X_REG_TOUCH1_YH);
000022  6120              STR      r0,[r4,#0x10]  ; Xposition
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       FT_IIC_RegRead
;;;351    		  Yposition_L=FT_IIC_RegRead(FT5X0X_REG_TOUCH1_YL);
00002a  60a0              STR      r0,[r4,#8]  ; Yposition_H
00002c  2006              MOVS     r0,#6
00002e  f7fffffe          BL       FT_IIC_RegRead
;;;352    		  Yposition = (Yposition_H&0x0f)*256+Yposition_L;
000032  60e0              STR      r0,[r4,#0xc]  ; Yposition_L
000034  68a1              LDR      r1,[r4,#8]  ; Yposition_H
000036  f001010f          AND      r1,r1,#0xf
00003a  eb002001          ADD      r0,r0,r1,LSL #8
;;;353    
;;;354    		  *x = Xposition;
00003e  6160              STR      r0,[r4,#0x14]  ; Yposition
000040  6921              LDR      r1,[r4,#0x10]  ; Xposition
;;;355    		  *y = 480 - Yposition;
000042  f5c070f0          RSB      r0,r0,#0x1e0
000046  6029              STR      r1,[r5,#0]
000048  6030              STR      r0,[r6,#0]
;;;356    
;;;357    		  //printf("Xposition= [%d],Yposition = [%d]\r\n", Xposition,Yposition);
;;;358    		    /* Clear the EXTI Line 4 */
;;;359    //		  EXTI_ClearITPendingBit(EXTI_Line4);
;;;360      	}	
;;;361    }
00004a  bd70              POP      {r4-r6,pc}
;;;362    /*******************************************************************************
                          ENDP

                  |L2.76|
                          DCD      ||.data||

                          AREA ||i.FT5x06_ReadByte||, CODE, READONLY, ALIGN=2

                  FT5x06_ReadByte PROC
;;;158    *****************************************************************************/
;;;159    u8 FT5x06_ReadByte (etI2cAck ack)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;160    {
;;;161    	u8 mask,rxByte=0;
;;;162    	FT5x06_SDA=HIGH; 
000004  4e18              LDR      r6,|L3.104|
000006  2500              MOVS     r5,#0                 ;161
000008  2701              MOVS     r7,#1
00000a  4681              MOV      r9,r0                 ;160
00000c  f8c6719c          STR      r7,[r6,#0x19c]
;;;163    	delay_asm1(6);
000010  2006              MOVS     r0,#6
000012  f7fffffe          BL       delay_asm1
;;;164    	for (mask=0x80; mask>0; mask>>=1) 
000016  2480              MOVS     r4,#0x80
000018  f04f0800          MOV      r8,#0                 ;161
                  |L3.28|
;;;165    	{ 
;;;166    	    FT5x06_SCL=HIGH; //start clock on SCL-line
00001c  f8c67198          STR      r7,[r6,#0x198]
;;;167    		delay_asm1(6*3);
000020  2012              MOVS     r0,#0x12
000022  f7fffffe          BL       delay_asm1
;;;168    		if(READ_SDA==1) rxByte=(rxByte | mask); 
000026  f8d6011c          LDR      r0,[r6,#0x11c]
00002a  2801              CMP      r0,#1
00002c  d100              BNE      |L3.48|
00002e  4325              ORRS     r5,r5,r4
                  |L3.48|
;;;169    		FT5x06_SCL=LOW;
000030  f8c68198          STR      r8,[r6,#0x198]
;;;170    		delay_asm1(6*3);
000034  2012              MOVS     r0,#0x12
000036  f7fffffe          BL       delay_asm1
00003a  0864              LSRS     r4,r4,#1              ;164
00003c  d1ee              BNE      |L3.28|
00003e  f50676cc          ADD      r6,r6,#0x198          ;164
;;;171    	}
;;;172    	FT5x06_SDA=ack; 
000042  f8c69004          STR      r9,[r6,#4]
;;;173    	delay_asm1(6);
000046  f04f0006          MOV      r0,#6
00004a  f7fffffe          BL       delay_asm1
;;;174    	FT5x06_SCL=HIGH; //clk #9 for ack
00004e  6037              STR      r7,[r6,#0]
;;;175    	delay_asm1(6*3);
000050  2012              MOVS     r0,#0x12
000052  f7fffffe          BL       delay_asm1
;;;176    	FT5x06_SCL=LOW;
000056  f8c68000          STR      r8,[r6,#0]
;;;177    	FT5x06_SDA=HIGH;
00005a  6077              STR      r7,[r6,#4]
;;;178    	delay_asm1(6*3);
00005c  2012              MOVS     r0,#0x12
00005e  f7fffffe          BL       delay_asm1
;;;179    	return rxByte; 
000062  4628              MOV      r0,r5
;;;180    }
000064  e8bd87f0          POP      {r4-r10,pc}
;;;181    
                          ENDP

                  |L3.104|
                          DCD      0x42218000

                          AREA ||i.FT5x06_RegReadN||, CODE, READONLY, ALIGN=1

                  FT5x06_RegReadN PROC
;;;285    *****************************************************************************/
;;;286    void FT5x06_RegReadN(u8 reg1, u8 N, u8 *array)
000000  b570              PUSH     {r4-r6,lr}
;;;287    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;288      u8 b;
;;;289      FT5x06_Start();                                  
000008  f7fffffe          BL       FT5x06_Start
;;;290      FT5x06_WriteByte(FT5x06_ADD);                      
00000c  2076              MOVS     r0,#0x76
00000e  f7fffffe          BL       FT5x06_WriteByte
;;;291      FT5x06_WriteByte(reg1);                        
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       FT5x06_WriteByte
;;;292      FT5x06_Start();                           
000018  f7fffffe          BL       FT5x06_Start
;;;293      FT5x06_WriteByte(FT5x06_ADD+1);                    
00001c  2077              MOVS     r0,#0x77
00001e  f7fffffe          BL       FT5x06_WriteByte
;;;294      //b = IIC_ReadByte(ACK);                        
;;;295      while (N>1)                                   
000022  e006              B        |L4.50|
                  |L4.36|
;;;296      {
;;;297        b = FT5x06_ReadByte(ACK);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       FT5x06_ReadByte
;;;298        *array = b;
;;;299        array++;
;;;300        N--;
00002a  1e6d              SUBS     r5,r5,#1
00002c  f8040b01          STRB     r0,[r4],#1            ;298
000030  b2ed              UXTB     r5,r5
                  |L4.50|
000032  2d01              CMP      r5,#1                 ;295
000034  d8f6              BHI      |L4.36|
;;;301      }
;;;302      b = FT5x06_ReadByte(NO_ACK);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       FT5x06_ReadByte
;;;303      *array = b;                                   
00003c  7020              STRB     r0,[r4,#0]
;;;304      FT5x06_Stop();                                
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      FT5x06_Stop
;;;305    }
;;;306    /*******************************************************************************
                          ENDP


                          AREA ||i.FT5x06_RegWrite||, CODE, READONLY, ALIGN=1

                  FT5x06_RegWrite PROC
;;;198    *****************************************************************************/
;;;199    void FT5x06_RegWrite(u8 reg,u8 val)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;201      FT5x06_Start();                                  
000006  f7fffffe          BL       FT5x06_Start
;;;202      FT5x06_WriteByte(FT5x06_ADD);                      
00000a  2076              MOVS     r0,#0x76
00000c  f7fffffe          BL       FT5x06_WriteByte
;;;203      FT5x06_WriteByte(reg);                         
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       FT5x06_WriteByte
;;;204      FT5x06_WriteByte(val);                         
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       FT5x06_WriteByte
;;;205      FT5x06_Stop();                               
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      FT5x06_Stop
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.FT5x06_RegWriteN||, CODE, READONLY, ALIGN=1

                  FT5x06_RegWriteN PROC
;;;253    *****************************************************************************/
;;;254    void FT5x06_RegWriteN(u8 reg1,u8 N,u8 *array)
000000  b570              PUSH     {r4-r6,lr}
;;;255    {                              
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;256      FT5x06_Start();                                 
000008  f7fffffe          BL       FT5x06_Start
;;;257      FT5x06_WriteByte(FT5x06_ADD);                      
00000c  2076              MOVS     r0,#0x76
00000e  f7fffffe          BL       FT5x06_WriteByte
;;;258      FT5x06_WriteByte(reg1);                     
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       FT5x06_WriteByte
;;;259      while (N>0)                               
000018  e005              B        |L6.38|
                  |L6.26|
;;;260      {
;;;261        FT5x06_WriteByte(*array);
00001a  7828              LDRB     r0,[r5,#0]
00001c  f7fffffe          BL       FT5x06_WriteByte
;;;262        array++;
000020  1c6d              ADDS     r5,r5,#1
;;;263        N--;
000022  1e64              SUBS     r4,r4,#1
000024  b2e4              UXTB     r4,r4
                  |L6.38|
000026  2c00              CMP      r4,#0                 ;259
000028  d1f7              BNE      |L6.26|
;;;264      }
;;;265      FT5x06_Stop();                                
00002a  e8bd4070          POP      {r4-r6,lr}
00002e  f7ffbffe          B.W      FT5x06_Stop
;;;266    }
;;;267    
                          ENDP


                          AREA ||i.FT5x06_Start||, CODE, READONLY, ALIGN=2

                  FT5x06_Start PROC
;;;69     *****************************************************************************/
;;;70     void FT5x06_Start (void)
000000  b570              PUSH     {r4-r6,lr}
;;;71     {
;;;72     	FT5x06_SDA=HIGH;
000002  4c09              LDR      r4,|L7.40|
000004  2001              MOVS     r0,#1
000006  6060              STR      r0,[r4,#4]
;;;73     	FT5x06_SCL=HIGH;
000008  6020              STR      r0,[r4,#0]
;;;74     	delay_asm1(6*2);
00000a  f04f000c          MOV      r0,#0xc
00000e  f7fffffe          BL       delay_asm1
;;;75     	FT5x06_SDA=LOW;
000012  2500              MOVS     r5,#0
000014  6065              STR      r5,[r4,#4]
;;;76     	delay_asm1(6*2);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       delay_asm1
;;;77     	FT5x06_SCL=LOW;
00001c  6025              STR      r5,[r4,#0]
;;;78     	delay_asm1(6);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  2006              MOVS     r0,#6
000024  f7ffbffe          B.W      delay_asm1
;;;79     	
;;;80     }
;;;81     /*****************************************************************************
                          ENDP

                  |L7.40|
                          DCD      0x42218198

                          AREA ||i.FT5x06_Stop||, CODE, READONLY, ALIGN=2

                  FT5x06_Stop PROC
;;;95     *****************************************************************************/
;;;96     void FT5x06_Stop (void)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
;;;98     	FT5x06_SDA=LOW;
000002  4c09              LDR      r4,|L8.40|
000004  2000              MOVS     r0,#0
000006  6060              STR      r0,[r4,#4]
;;;99     	FT5x06_SCL=LOW;
000008  6020              STR      r0,[r4,#0]
;;;100    	delay_asm1(6*2);
00000a  f04f000c          MOV      r0,#0xc
00000e  f7fffffe          BL       delay_asm1
;;;101    	FT5x06_SCL=HIGH;
000012  2501              MOVS     r5,#1
000014  6025              STR      r5,[r4,#0]
;;;102    	delay_asm1(6*2);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       delay_asm1
;;;103    	FT5x06_SDA=HIGH;
00001c  6065              STR      r5,[r4,#4]
;;;104    	delay_asm1(6*4);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  2018              MOVS     r0,#0x18
000024  f7ffbffe          B.W      delay_asm1
;;;105    }
;;;106    
                          ENDP

                  |L8.40|
                          DCD      0x42218198

                          AREA ||i.FT5x06_WriteByte||, CODE, READONLY, ALIGN=2

                  FT5x06_WriteByte PROC
;;;121    *****************************************************************************/
;;;122    u8 FT5x06_WriteByte (u8 txByte)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;123    {
;;;124        u8 mask,erro=0;
000004  f04f0800          MOV      r8,#0
;;;125        for (mask=0x80; mask>0; mask>>=1) 
000008  2480              MOVS     r4,#0x80
;;;126        { 
;;;127    	    if ((mask & txByte) == 0) FT5x06_SDA=LOW;
00000a  4d18              LDR      r5,|L9.108|
00000c  4681              MOV      r9,r0                 ;123
00000e  4647              MOV      r7,r8                 ;124
;;;128    		else FT5x06_SDA=HIGH;
000010  2601              MOVS     r6,#1
                  |L9.18|
000012  ea140f09          TST      r4,r9                 ;127
000016  d01c              BEQ      |L9.82|
000018  f8c5619c          STR      r6,[r5,#0x19c]
                  |L9.28|
;;;129    		delay_asm1(6);
00001c  2006              MOVS     r0,#6
00001e  f7fffffe          BL       delay_asm1
;;;130    		FT5x06_SCL=HIGH; 
000022  f8c56198          STR      r6,[r5,#0x198]
;;;131    		delay_asm1(6*3);
000026  2012              MOVS     r0,#0x12
000028  f7fffffe          BL       delay_asm1
;;;132    		FT5x06_SCL=LOW;
00002c  f8c57198          STR      r7,[r5,#0x198]
;;;133    		delay_asm1(6*3);
000030  2012              MOVS     r0,#0x12
000032  f7fffffe          BL       delay_asm1
000036  0864              LSRS     r4,r4,#1              ;125
000038  d1eb              BNE      |L9.18|
;;;134        }
;;;135        FT5x06_SDA=HIGH; //release SDA-line
00003a  f8c5619c          STR      r6,[r5,#0x19c]
;;;136        FT5x06_SCL=HIGH; //clk #9 for ack
00003e  f8c56198          STR      r6,[r5,#0x198]
;;;137        delay_asm1(6*3);
000042  2012              MOVS     r0,#0x12
000044  f7fffffe          BL       delay_asm1
;;;138    	if(READ_SDA==HIGH) erro=ACK_ERROR;
000048  f8d5011c          LDR      r0,[r5,#0x11c]
00004c  2801              CMP      r0,#1
00004e  d003              BEQ      |L9.88|
000050  e004              B        |L9.92|
                  |L9.82|
000052  f8c5719c          STR      r7,[r5,#0x19c]        ;127
000056  e7e1              B        |L9.28|
                  |L9.88|
000058  f04f0801          MOV      r8,#1
                  |L9.92|
;;;139        FT5x06_SCL=LOW;
00005c  f8c57198          STR      r7,[r5,#0x198]
;;;140    	delay_asm1(6*3);
000060  2012              MOVS     r0,#0x12
000062  f7fffffe          BL       delay_asm1
;;;141        return erro; //return error code
000066  4640              MOV      r0,r8
;;;142    }
000068  e8bd87f0          POP      {r4-r10,pc}
;;;143    
                          ENDP

                  |L9.108|
                          DCD      0x42218000

                          AREA ||i.FT5x06_identify||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  FT5x06_identify PROC
;;;312    *******************************************************************************/
;;;313    bool FT5x06_identify(void)
000000  b510              PUSH     {r4,lr}
;;;314    {
;;;315    	int id,ver;
;;;316    	id = FT_IIC_RegRead(FT5X0X_REG_CIPHER);
000002  20a3              MOVS     r0,#0xa3
000004  f7fffffe          BL       FT_IIC_RegRead
000008  4601              MOV      r1,r0
;;;317    	if (id != FT5x06_CHIP_ID) {
00000a  28a3              CMP      r0,#0xa3
00000c  d003              BEQ      |L10.22|
;;;318    		printf("ID %d not supported\r\n", id);
00000e  a009              ADR      r0,|L10.52|
000010  f7fffffe          BL       __2printf
;;;319    		return 0;
000014  e007              B        |L10.38|
                  |L10.22|
;;;320    	}
;;;321    	ver = FT_IIC_RegRead(FT5X0X_REG_FIRMID);
000016  20a6              MOVS     r0,#0xa6
000018  f7fffffe          BL       FT_IIC_RegRead
00001c  1e01              SUBS     r1,r0,#0
;;;322    	if (ver < 0) {
00001e  da04              BGE      |L10.42|
;;;323    		printf("could not read the firmware version\r\n");
000020  a00a              ADR      r0,|L10.76|
000022  f7fffffe          BL       __2printf
                  |L10.38|
;;;324    		return 0;
000026  2000              MOVS     r0,#0
;;;325    	}
;;;326    
;;;327    	printf("FT5x06 firmware version %d\r\n", ver);
;;;328    
;;;329    	return 1;
;;;330    
;;;331    }
000028  bd10              POP      {r4,pc}
                  |L10.42|
00002a  a012              ADR      r0,|L10.116|
00002c  f7fffffe          BL       __2printf
000030  2001              MOVS     r0,#1                 ;329
000032  bd10              POP      {r4,pc}
;;;332    /*******************************************************************************
                          ENDP

                  |L10.52|
000034  49442025          DCB      "ID %d not supported\r\n",0
000038  64206e6f
00003c  74207375
000040  70706f72
000044  7465640d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L10.76|
00004c  636f756c          DCB      "could not read the firmware version\r\n",0
000050  64206e6f
000054  74207265
000058  61642074
00005c  68652066
000060  69726d77
000064  61726520
000068  76657273
00006c  696f6e0d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L10.116|
000074  46543578          DCB      "FT5x06 firmware version %d\r\n",0
000078  30362066
00007c  69726d77
000080  61726520
000084  76657273
000088  696f6e20
00008c  25640d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.FT5x06_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  FT5x06_init PROC
;;;368    *******************************************************************************/
;;;369    void FT5x06_init(void)
000000  b510              PUSH     {r4,lr}
;;;370    {
;;;371    	FT5x06_GPIO_Config();
000002  f7fffffe          BL       FT5x06_GPIO_Config
;;;372    	printf("[FTS] ft5x0x_ts_probe, driver version is %s.\r\n", CFG_FTS_CTP_DRIVER_VERSION);
000006  a107              ADR      r1,|L11.36|
000008  a007              ADR      r0,|L11.40|
00000a  f7fffffe          BL       __2printf
;;;373    	if(!FT5x06_identify())
00000e  f7fffffe          BL       FT5x06_identify
000012  b120              CBZ      r0,|L11.30|
;;;374    	{
;;;375    		printf("[FTS] ==identify failed =\r\n");	
;;;376    	}
;;;377    	else
;;;378    	{
;;;379    		printf("[FTS] ==init over =\r\n");
000014  a010              ADR      r0,|L11.88|
                  |L11.22|
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      __2printf
                  |L11.30|
00001e  a014              ADR      r0,|L11.112|
000020  e7f9              B        |L11.22|
;;;380    	}
;;;381    }
;;;382    
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
000024  332e3000          DCB      "3.0",0
                  |L11.40|
000028  5b465453          DCB      "[FTS] ft5x0x_ts_probe, driver version is %s.\r\n",0
00002c  5d206674
000030  35783078
000034  5f74735f
000038  70726f62
00003c  652c2064
000040  72697665
000044  72207665
000048  7273696f
00004c  6e206973
000050  2025732e
000054  0d0a00  
000057  00                DCB      0
                  |L11.88|
000058  5b465453          DCB      "[FTS] ==init over =\r\n",0
00005c  5d203d3d
000060  696e6974
000064  206f7665
000068  72203d0d
00006c  0a00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L11.112|
000070  5b465453          DCB      "[FTS] ==identify failed =\r\n",0
000074  5d203d3d
000078  6964656e
00007c  74696679
000080  20666169
000084  6c656420
000088  3d0d0a00

                          AREA ||i.FT_IIC_RegRead||, CODE, READONLY, ALIGN=1

                  FT_IIC_RegRead PROC
;;;222    *****************************************************************************/
;;;223    u8 FT_IIC_RegRead(u8 reg)
000000  b510              PUSH     {r4,lr}
;;;224    {
000002  4604              MOV      r4,r0
;;;225      u8 b;
;;;226      FT5x06_Start();                                  
000004  f7fffffe          BL       FT5x06_Start
;;;227      FT5x06_WriteByte(FT5x06_ADD);                 
000008  2076              MOVS     r0,#0x76
00000a  f7fffffe          BL       FT5x06_WriteByte
;;;228      FT5x06_WriteByte(reg);                        
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       FT5x06_WriteByte
;;;229      FT5x06_Start();                           
000014  f7fffffe          BL       FT5x06_Start
;;;230      FT5x06_WriteByte(FT5x06_ADD+1);                    
000018  2077              MOVS     r0,#0x77
00001a  f7fffffe          BL       FT5x06_WriteByte
;;;231      b = FT5x06_ReadByte(NO_ACK);                                                
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       FT5x06_ReadByte
000024  4604              MOV      r4,r0
;;;232      FT5x06_Stop();                                 
000026  f7fffffe          BL       FT5x06_Stop
;;;233      return b;
00002a  4620              MOV      r0,r4
;;;234    }
00002c  bd10              POP      {r4,pc}
;;;235    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  Xposition_H
                          DCD      0x00000000
                  Xposition_L
                          DCD      0x00000000
                  Yposition_H
                          DCD      0x00000000
                  Yposition_L
                          DCD      0x00000000
                  Xposition
                          DCD      0x00000000
                  Yposition
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\BSP\\ft5x06_ts.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_ft5x06_ts_c_99561885____REV16|
#line 114 "..\\..\\..\\STM32F4\\STM32F4xx_DSP_StdPeriph_Lib_V1.0.1\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_ft5x06_ts_c_99561885____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_ft5x06_ts_c_99561885____REVSH|
#line 128
|__asm___11_ft5x06_ts_c_99561885____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
